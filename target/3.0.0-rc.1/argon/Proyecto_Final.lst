
c:/Users/Albert/OneDrive/Escritorio/Proyecto_Final/Proyecto_Final/target/3.0.0-rc.1/argon/Proyecto_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ce4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7d00  000d7d00  00007d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7d08  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003e530  000d7d0c  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d7da0  000d7da0  00027da0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7dc8  000d7dc8  00027dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001de270  00000000  00000000  00027dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001ba06  00000000  00000000  0020603c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00040291  00000000  00000000  00221a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003628  00000000  00000000  00261cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a340  00000000  00000000  002652fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003fc50  00000000  00000000  0026f63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004a6fe  00000000  00000000  002af28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001328f2  00000000  00000000  002f9989  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000099b0  00000000  00000000  0042c27c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fc3d 	bl	d78ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fc45 	bl	d78c8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e530 	.word	0x2003e530
   d4048:	000d7d0c 	.word	0x000d7d0c
   d404c:	2003e5c4 	.word	0x2003e5c4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fef7 	bl	d5e50 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7cd8 	.word	0x000d7cd8
   d407c:	000d7cfc 	.word	0x000d7cfc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b83e 	b.w	d4100 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f903 	bl	d4290 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bea1 	b.w	d5dd4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bb1b 	b.w	d56cc <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bb19 	b.w	d56cc <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bb1f 	b.w	d56dc <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z17parada_emergenciav>:
}

//Creamos la funcion de parada de emergencia, con la interrupción
void parada_emergencia(){
  
  cont_hongo++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40b0:	4b04      	ldr	r3, [pc, #16]	; (d40c4 <_Z17parada_emergenciav+0x14>)
   d40b2:	681a      	ldr	r2, [r3, #0]

  if (cont_hongo == 2) //En caso de que llegue a un estado 2
   d40b4:	2a01      	cmp	r2, #1
  cont_hongo++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40b6:	f102 0101 	add.w	r1, r2, #1
  {
    cont_hongo = 0; //Reseteamos el contador, y será 0 nuevamente.
   d40ba:	bf0a      	itet	eq
   d40bc:	2200      	moveq	r2, #0
  cont_hongo++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40be:	6019      	strne	r1, [r3, #0]
    cont_hongo = 0; //Reseteamos el contador, y será 0 nuevamente.
   d40c0:	601a      	streq	r2, [r3, #0]
  }
   
}
   d40c2:	4770      	bx	lr
   d40c4:	2003e5e0 	.word	0x2003e5e0

000d40c8 <_Z25cambio_estado_motor_botonv>:

void cambio_estado_motor_boton(){
  
  cont_reinicio_motor++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40c8:	4b04      	ldr	r3, [pc, #16]	; (d40dc <_Z25cambio_estado_motor_botonv+0x14>)
   d40ca:	681a      	ldr	r2, [r3, #0]

  if (cont_reinicio_motor == 2) //En caso de que llegue a un estado 2
   d40cc:	2a01      	cmp	r2, #1
  cont_reinicio_motor++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40ce:	f102 0101 	add.w	r1, r2, #1
  {
    cont_reinicio_motor = 0; //Reseteamos el contador, y será 0 nuevamente.
   d40d2:	bf0a      	itet	eq
   d40d4:	2200      	moveq	r2, #0
  cont_reinicio_motor++; // Aumentamos el contador en 1, para que podamos verificar los estados del boton, donde 0 es desactivado y 1 es activado.
   d40d6:	6019      	strne	r1, [r3, #0]
    cont_reinicio_motor = 0; //Reseteamos el contador, y será 0 nuevamente.
   d40d8:	601a      	streq	r2, [r3, #0]
  }
   
   d40da:	4770      	bx	lr
   d40dc:	2003e5e4 	.word	0x2003e5e4

000d40e0 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40e0:	b513      	push	{r0, r1, r4, lr}
   d40e2:	4b06      	ldr	r3, [pc, #24]	; (d40fc <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
   d40e4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e6:	f88d 3000 	strb.w	r3, [sp]
   d40ea:	2200      	movs	r2, #0
   d40ec:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40ee:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f002 f806 	bl	d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
   d40f4:	4620      	mov	r0, r4
   d40f6:	b002      	add	sp, #8
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	2003e5c8 	.word	0x2003e5c8

000d4100 <setup>:
void setup() {
   d4100:	b573      	push	{r0, r1, r4, r5, r6, lr}
  pinMode(parada_hongo, INPUT_PULLDOWN); //Definimos como Pull Down la pulsación del boton de parada de emergencia 
   d4102:	4e33      	ldr	r6, [pc, #204]	; (d41d0 <setup+0xd0>)
  pinMode(boton_reinicio_motor, INPUT_PULLDOWN); 
   d4104:	4d33      	ldr	r5, [pc, #204]	; (d41d4 <setup+0xd4>)
  pinMode(parada_hongo, INPUT_PULLDOWN); //Definimos como Pull Down la pulsación del boton de parada de emergencia 
   d4106:	8830      	ldrh	r0, [r6, #0]
   d4108:	2103      	movs	r1, #3
   d410a:	f002 fcd7 	bl	d6abc <pinMode>
  attachInterrupt(parada_hongo, parada_emergencia, RISING); //Interrupción será RISING, que es de LOW a HIGH. Para la pulsación del boton de emergencia
   d410e:	2400      	movs	r4, #0
  pinMode(boton_reinicio_motor, INPUT_PULLDOWN); 
   d4110:	8828      	ldrh	r0, [r5, #0]
   d4112:	2103      	movs	r1, #3
   d4114:	f002 fcd2 	bl	d6abc <pinMode>
  attachInterrupt(parada_hongo, parada_emergencia, RISING); //Interrupción será RISING, que es de LOW a HIGH. Para la pulsación del boton de emergencia
   d4118:	492f      	ldr	r1, [pc, #188]	; (d41d8 <setup+0xd8>)
   d411a:	8830      	ldrh	r0, [r6, #0]
   d411c:	9400      	str	r4, [sp, #0]
   d411e:	f04f 33ff 	mov.w	r3, #4294967295
   d4122:	2201      	movs	r2, #1
   d4124:	f002 fa62 	bl	d65ec <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(boton_reinicio_motor, cambio_estado_motor_boton, RISING); 
   d4128:	492c      	ldr	r1, [pc, #176]	; (d41dc <setup+0xdc>)
   d412a:	8828      	ldrh	r0, [r5, #0]
   d412c:	9400      	str	r4, [sp, #0]
   d412e:	f04f 33ff 	mov.w	r3, #4294967295
   d4132:	2201      	movs	r2, #1
   d4134:	f002 fa5a 	bl	d65ec <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4138:	4623      	mov	r3, r4
   d413a:	4929      	ldr	r1, [pc, #164]	; (d41e0 <setup+0xe0>)
   d413c:	4829      	ldr	r0, [pc, #164]	; (d41e4 <setup+0xe4>)
   d413e:	2202      	movs	r2, #2
   d4140:	f001 faa4 	bl	d568c <spark_variable>
   d4144:	4623      	mov	r3, r4
   d4146:	4928      	ldr	r1, [pc, #160]	; (d41e8 <setup+0xe8>)
   d4148:	4828      	ldr	r0, [pc, #160]	; (d41ec <setup+0xec>)
   d414a:	2202      	movs	r2, #2
   d414c:	f001 fa9e 	bl	d568c <spark_variable>
   d4150:	2202      	movs	r2, #2
   d4152:	4623      	mov	r3, r4
   d4154:	4926      	ldr	r1, [pc, #152]	; (d41f0 <setup+0xf0>)
   d4156:	4827      	ldr	r0, [pc, #156]	; (d41f4 <setup+0xf4>)
   d4158:	f001 fa98 	bl	d568c <spark_variable>
  Serial.begin(9600); //Iniciamos el comunicación serial a 9600 baudios para verla en el monitor
   d415c:	f002 fa1a 	bl	d6594 <_Z16_fetch_usbserialv>
   d4160:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4164:	f002 fa0a 	bl	d657c <_ZN9USBSerial5beginEl>
	dht.begin(); //Iniciamos el sensor de temperatura 
   d4168:	4823      	ldr	r0, [pc, #140]	; (d41f8 <setup+0xf8>)
   d416a:	f000 fdc7 	bl	d4cfc <_ZN3DHT5beginEv>
	Wire.begin();
   d416e:	f002 fd0d 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4172:	f002 fb39 	bl	d67e8 <_ZN7TwoWire5beginEv>
  accelgyro.initialize();
   d4176:	4821      	ldr	r0, [pc, #132]	; (d41fc <setup+0xfc>)
   d4178:	f000 fc8f 	bl	d4a9a <_ZN7MPU605010initializeEv>
	pinMode(pwm, OUTPUT); //Definimos a PWM como salida
   d417c:	4b20      	ldr	r3, [pc, #128]	; (d4200 <setup+0x100>)
   d417e:	2101      	movs	r1, #1
   d4180:	8818      	ldrh	r0, [r3, #0]
   d4182:	f002 fc9b 	bl	d6abc <pinMode>
  pinMode(s1, OUTPUT);  //Definimos a s1 como salida
   d4186:	4b1f      	ldr	r3, [pc, #124]	; (d4204 <setup+0x104>)
   d4188:	2101      	movs	r1, #1
   d418a:	8818      	ldrh	r0, [r3, #0]
   d418c:	f002 fc96 	bl	d6abc <pinMode>
  pinMode(s2, OUTPUT);  //Definimos a s2 como salida
   d4190:	4b1d      	ldr	r3, [pc, #116]	; (d4208 <setup+0x108>)
   d4192:	2101      	movs	r1, #1
   d4194:	8818      	ldrh	r0, [r3, #0]
   d4196:	f002 fc91 	bl	d6abc <pinMode>
  pinMode(servo, OUTPUT); //Definimos a servo como salida
   d419a:	4b1c      	ldr	r3, [pc, #112]	; (d420c <setup+0x10c>)
   d419c:	2101      	movs	r1, #1
   d419e:	8818      	ldrh	r0, [r3, #0]
   d41a0:	f002 fc8c 	bl	d6abc <pinMode>
  pinMode(green, OUTPUT); //Definimos a Green como salida
   d41a4:	4b1a      	ldr	r3, [pc, #104]	; (d4210 <setup+0x110>)
   d41a6:	2101      	movs	r1, #1
   d41a8:	8818      	ldrh	r0, [r3, #0]
   d41aa:	f002 fc87 	bl	d6abc <pinMode>
  pinMode(red, OUTPUT); //Definimos a Red como salida
   d41ae:	4b19      	ldr	r3, [pc, #100]	; (d4214 <setup+0x114>)
   d41b0:	2101      	movs	r1, #1
   d41b2:	8818      	ldrh	r0, [r3, #0]
   d41b4:	f002 fc82 	bl	d6abc <pinMode>
  pinMode(blue, OUTPUT); //Definimos a Blue como salida
   d41b8:	4b17      	ldr	r3, [pc, #92]	; (d4218 <setup+0x118>)
   d41ba:	2101      	movs	r1, #1
   d41bc:	8818      	ldrh	r0, [r3, #0]
   d41be:	f002 fc7d 	bl	d6abc <pinMode>
  ina219.begin();
   d41c2:	4816      	ldr	r0, [pc, #88]	; (d421c <setup+0x11c>)
}
   d41c4:	b002      	add	sp, #8
   d41c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ina219.begin();
   d41ca:	f001 b820 	b.w	d520e <_ZN15Adafruit_INA2195beginEv>
   d41ce:	bf00      	nop
   d41d0:	2003e53c 	.word	0x2003e53c
   d41d4:	2003e534 	.word	0x2003e534
   d41d8:	000d40b1 	.word	0x000d40b1
   d41dc:	000d40c9 	.word	0x000d40c9
   d41e0:	2003e62c 	.word	0x2003e62c
   d41e4:	000d7980 	.word	0x000d7980
   d41e8:	2003e638 	.word	0x2003e638
   d41ec:	000d7993 	.word	0x000d7993
   d41f0:	2003e630 	.word	0x2003e630
   d41f4:	000d79a3 	.word	0x000d79a3
   d41f8:	2003e5fc 	.word	0x2003e5fc
   d41fc:	2003e5ca 	.word	0x2003e5ca
   d4200:	2003e540 	.word	0x2003e540
   d4204:	2003e548 	.word	0x2003e548
   d4208:	2003e54c 	.word	0x2003e54c
   d420c:	2003e550 	.word	0x2003e550
   d4210:	2003e538 	.word	0x2003e538
   d4214:	2003e544 	.word	0x2003e544
   d4218:	2003e530 	.word	0x2003e530
   d421c:	2003e618 	.word	0x2003e618

000d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4220:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4222:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4224:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4226:	b17c      	cbz	r4, d4248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4228:	6863      	ldr	r3, [r4, #4]
   d422a:	3b01      	subs	r3, #1
   d422c:	6063      	str	r3, [r4, #4]
   d422e:	b95b      	cbnz	r3, d4248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4230:	6823      	ldr	r3, [r4, #0]
   d4232:	4620      	mov	r0, r4
   d4234:	689b      	ldr	r3, [r3, #8]
   d4236:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4238:	68a3      	ldr	r3, [r4, #8]
   d423a:	3b01      	subs	r3, #1
   d423c:	60a3      	str	r3, [r4, #8]
   d423e:	b91b      	cbnz	r3, d4248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4620      	mov	r0, r4
   d4244:	68db      	ldr	r3, [r3, #12]
   d4246:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4248:	4628      	mov	r0, r5
   d424a:	bd38      	pop	{r3, r4, r5, pc}

000d424c <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d424e:	4605      	mov	r5, r0
   d4250:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4252:	4616      	mov	r6, r2
   d4254:	b94a      	cbnz	r2, d426a <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d4256:	6803      	ldr	r3, [r0, #0]
   d4258:	b2c9      	uxtb	r1, r1
   d425a:	689b      	ldr	r3, [r3, #8]
   d425c:	4798      	blx	r3
   d425e:	4607      	mov	r7, r0
        n += println();
   d4260:	4628      	mov	r0, r5
   d4262:	f001 fc58 	bl	d5b16 <_ZN5Print7printlnEv>
    }
   d4266:	4438      	add	r0, r7
   d4268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d426a:	2900      	cmp	r1, #0
   d426c:	da0c      	bge.n	d4288 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d426e:	2a0a      	cmp	r2, #10
   d4270:	d10a      	bne.n	d4288 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d4272:	212d      	movs	r1, #45	; 0x2d
   d4274:	f001 fc4c 	bl	d5b10 <_ZN5Print5printEc>
            val = -n;
   d4278:	4261      	negs	r1, r4
            t = print('-');
   d427a:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d427c:	b2f2      	uxtb	r2, r6
   d427e:	4628      	mov	r0, r5
   d4280:	f001 fc5f 	bl	d5b42 <_ZN5Print11printNumberEmh>
   d4284:	4407      	add	r7, r0
   d4286:	e7eb      	b.n	d4260 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4288:	4621      	mov	r1, r4
        size_t t = 0;
   d428a:	2700      	movs	r7, #0
   d428c:	e7f6      	b.n	d427c <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
	...

000d4290 <loop>:
void loop() {
   d4290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4294:	ed2d 8b08 	vpush	{d8-d11}
  while (cont_hongo == 0)  //Usaremos el While, mientras el boton de emergencia no se haya presionado
   d4298:	f8df 9370 	ldr.w	r9, [pc, #880]	; d460c <loop+0x37c>
void loop() {
   d429c:	b093      	sub	sp, #76	; 0x4c
   d429e:	464c      	mov	r4, r9
  while (cont_hongo == 0)  //Usaremos el While, mientras el boton de emergencia no se haya presionado
   d42a0:	f8d9 3000 	ldr.w	r3, [r9]
   d42a4:	2b00      	cmp	r3, #0
   d42a6:	d041      	beq.n	d432c <loop+0x9c>
    Serial.print(" BOTON EMERGENCIA: ");
   d42a8:	4fb2      	ldr	r7, [pc, #712]	; (d4574 <loop+0x2e4>)
    analogWrite(pwm, 0);
   d42aa:	f8df 8364 	ldr.w	r8, [pc, #868]	; d4610 <loop+0x380>
    analogWrite(red,0);
   d42ae:	f8df 9364 	ldr.w	r9, [pc, #868]	; d4614 <loop+0x384>
  while (cont_hongo == 1)
   d42b2:	6823      	ldr	r3, [r4, #0]
   d42b4:	2b01      	cmp	r3, #1
   d42b6:	f040 8158 	bne.w	d456a <loop+0x2da>
    Serial.print(" BOTON EMERGENCIA: ");
   d42ba:	f002 f96b 	bl	d6594 <_Z16_fetch_usbserialv>
   d42be:	4639      	mov	r1, r7
   d42c0:	f001 fc22 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.println(cont_hongo);
   d42c4:	f002 f966 	bl	d6594 <_Z16_fetch_usbserialv>
   d42c8:	220a      	movs	r2, #10
   d42ca:	6821      	ldr	r1, [r4, #0]
    cont_tiempo_emergencia++;
   d42cc:	4eaa      	ldr	r6, [pc, #680]	; (d4578 <loop+0x2e8>)
    Serial.println(cont_hongo);
   d42ce:	f7ff ffbd 	bl	d424c <_ZN5Print7printlnIiLi0EEEjT_i>
    analogWrite(pwm, 0);
   d42d2:	f8b8 0000 	ldrh.w	r0, [r8]
   d42d6:	2100      	movs	r1, #0
   d42d8:	f002 fc1a 	bl	d6b10 <_Z11analogWritetm>
    analogWrite(red,0);
   d42dc:	f8b9 0000 	ldrh.w	r0, [r9]
   d42e0:	2100      	movs	r1, #0
   d42e2:	f002 fc15 	bl	d6b10 <_Z11analogWritetm>
    analogWrite(green,0);
   d42e6:	4ba5      	ldr	r3, [pc, #660]	; (d457c <loop+0x2ec>)
   d42e8:	2100      	movs	r1, #0
   d42ea:	8818      	ldrh	r0, [r3, #0]
   d42ec:	f002 fc10 	bl	d6b10 <_Z11analogWritetm>
    analogWrite(blue,255);
   d42f0:	4ba3      	ldr	r3, [pc, #652]	; (d4580 <loop+0x2f0>)
   d42f2:	21ff      	movs	r1, #255	; 0xff
   d42f4:	8818      	ldrh	r0, [r3, #0]
   d42f6:	f002 fc0b 	bl	d6b10 <_Z11analogWritetm>
    velocidad = 0;
   d42fa:	4ba2      	ldr	r3, [pc, #648]	; (d4584 <loop+0x2f4>)
   d42fc:	2500      	movs	r5, #0
   d42fe:	601d      	str	r5, [r3, #0]
    vel_final = velocidad;
   d4300:	4ba1      	ldr	r3, [pc, #644]	; (d4588 <loop+0x2f8>)
   d4302:	601d      	str	r5, [r3, #0]
    cont_tiempo_emergencia++;
   d4304:	6833      	ldr	r3, [r6, #0]
   d4306:	3301      	adds	r3, #1
    if (cont_tiempo_emergencia ==  2) //bajamos el tiempo de aviso de que el motor esta parado por emergencia,debido a que es importante que se avise este evento
   d4308:	2b02      	cmp	r3, #2
    cont_tiempo_emergencia++;
   d430a:	6033      	str	r3, [r6, #0]
    if (cont_tiempo_emergencia ==  2) //bajamos el tiempo de aviso de que el motor esta parado por emergencia,debido a que es importante que se avise este evento
   d430c:	d1d1      	bne.n	d42b2 <loop+0x22>
      Particle.publish("PARADA_EMERGENCIA"); //Publicamos en slack que esta parado por emergencia.
   d430e:	499f      	ldr	r1, [pc, #636]	; (d458c <loop+0x2fc>)
   d4310:	a80e      	add	r0, sp, #56	; 0x38
   d4312:	f7ff fee5 	bl	d40e0 <_ZN10CloudClass7publishEPKc.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4316:	a80f      	add	r0, sp, #60	; 0x3c
   d4318:	f7ff ff82 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cont_tiempo_normal = 0;
   d431c:	4b9c      	ldr	r3, [pc, #624]	; (d4590 <loop+0x300>)
      cont_tiempo_emergencia = 0;
   d431e:	6035      	str	r5, [r6, #0]
      cont_tiempo_normal = 0;
   d4320:	601d      	str	r5, [r3, #0]
      cont_tiempo_medio = 0;
   d4322:	4b9c      	ldr	r3, [pc, #624]	; (d4594 <loop+0x304>)
   d4324:	601d      	str	r5, [r3, #0]
      cont_tiempo_alto = 0;
   d4326:	4b9c      	ldr	r3, [pc, #624]	; (d4598 <loop+0x308>)
   d4328:	601d      	str	r5, [r3, #0]
      cont_tiempo_emergencia = 0;
   d432a:	e7c0      	b.n	d42ae <loop+0x1e>
    delay(250); // Delay para tomar las mediciones de 2 segundos
   d432c:	20fa      	movs	r0, #250	; 0xfa
    float promedio_acc_gz = 0; 
   d432e:	eddf 8a9b 	vldr	s17, [pc, #620]	; d459c <loop+0x30c>
        accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d4332:	f8df a278 	ldr.w	sl, [pc, #632]	; d45ac <loop+0x31c>
   d4336:	f8df b278 	ldr.w	fp, [pc, #632]	; d45b0 <loop+0x320>
    delay(250); // Delay para tomar las mediciones de 2 segundos
   d433a:	f001 fd11 	bl	d5d60 <delay>
   d433e:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    float promedio_acc_gy = 0;
   d4342:	eeb0 aa68 	vmov.f32	s20, s17
    float promedio_acc_gx = 0;  
   d4346:	eeb0 9a68 	vmov.f32	s18, s17
    float promedio_acc_az = 0;
   d434a:	eeb0 ba68 	vmov.f32	s22, s17
    float promedio_acc_ay = 0;   
   d434e:	eef0 ba68 	vmov.f32	s23, s17
    float promedio_acc_ax = 0;
   d4352:	eef0 aa68 	vmov.f32	s21, s17
        accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d4356:	4e92      	ldr	r6, [pc, #584]	; (d45a0 <loop+0x310>)
   d4358:	4f92      	ldr	r7, [pc, #584]	; (d45a4 <loop+0x314>)
   d435a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; d4618 <loop+0x388>
   d435e:	4b92      	ldr	r3, [pc, #584]	; (d45a8 <loop+0x318>)
   d4360:	4a92      	ldr	r2, [pc, #584]	; (d45ac <loop+0x31c>)
   d4362:	4993      	ldr	r1, [pc, #588]	; (d45b0 <loop+0x320>)
   d4364:	4893      	ldr	r0, [pc, #588]	; (d45b4 <loop+0x324>)
   d4366:	9602      	str	r6, [sp, #8]
   d4368:	9701      	str	r7, [sp, #4]
   d436a:	f8cd 8000 	str.w	r8, [sp]
   d436e:	f000 fb4f 	bl	d4a10 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
        promedio_acc_ax = promedio_acc_ax + ax; //X
   d4372:	f9bb 3000 	ldrsh.w	r3, [fp]
   d4376:	ee07 3a90 	vmov	s15, r3
        promedio_acc_ay = promedio_acc_ay + ay; //Y   
   d437a:	f9ba 3000 	ldrsh.w	r3, [sl]
        promedio_acc_ax = promedio_acc_ax + ax; //X
   d437e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int cont_acc =0; cont_acc<500; cont_acc++)
   d4382:	3d01      	subs	r5, #1
        promedio_acc_ax = promedio_acc_ax + ax; //X
   d4384:	ee7a aaa7 	vadd.f32	s21, s21, s15
        promedio_acc_ay = promedio_acc_ay + ay; //Y   
   d4388:	ee07 3a90 	vmov	s15, r3
        promedio_acc_az = promedio_acc_az + az; //Z   
   d438c:	4b86      	ldr	r3, [pc, #536]	; (d45a8 <loop+0x318>)
        promedio_acc_ay = promedio_acc_ay + ay; //Y   
   d438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        promedio_acc_az = promedio_acc_az + az; //Z   
   d4392:	f9b3 3000 	ldrsh.w	r3, [r3]
        promedio_acc_ay = promedio_acc_ay + ay; //Y   
   d4396:	ee7b baa7 	vadd.f32	s23, s23, s15
        promedio_acc_az = promedio_acc_az + az; //Z   
   d439a:	ee07 3a90 	vmov	s15, r3
        promedio_acc_gx = promedio_acc_gx + gx; //PITCH    
   d439e:	f9b8 3000 	ldrsh.w	r3, [r8]
        promedio_acc_az = promedio_acc_az + az; //Z   
   d43a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43a6:	ee3b ba27 	vadd.f32	s22, s22, s15
        promedio_acc_gx = promedio_acc_gx + gx; //PITCH    
   d43aa:	ee07 3a90 	vmov	s15, r3
        promedio_acc_gy = promedio_acc_gy + gy; //YAW   
   d43ae:	f9b7 3000 	ldrsh.w	r3, [r7]
        promedio_acc_gx = promedio_acc_gx + gx; //PITCH    
   d43b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43b6:	ee39 9a27 	vadd.f32	s18, s18, s15
        promedio_acc_gy = promedio_acc_gy + gy; //YAW   
   d43ba:	ee07 3a90 	vmov	s15, r3
        promedio_acc_gz = promedio_acc_gz + gz; // ROLL      
   d43be:	f9b6 3000 	ldrsh.w	r3, [r6]
        promedio_acc_gy = promedio_acc_gy + gy; //YAW   
   d43c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43c6:	ee3a aa27 	vadd.f32	s20, s20, s15
        promedio_acc_gz = promedio_acc_gz + gz; // ROLL      
   d43ca:	ee07 3a90 	vmov	s15, r3
   d43ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43d2:	ee78 8aa7 	vadd.f32	s17, s17, s15
    for (int cont_acc =0; cont_acc<500; cont_acc++)
   d43d6:	d1be      	bne.n	d4356 <loop+0xc6>
    float final_acc_gx = (promedio_acc_gx/500)*gyroScale;  
   d43d8:	ed9f 8a77 	vldr	s16, [pc, #476]	; d45b8 <loop+0x328>
        current_mA = ina219.getCurrent_mA();
   d43dc:	4e77      	ldr	r6, [pc, #476]	; (d45bc <loop+0x32c>)
    Serial.print("X: "); Serial.print(final_acc_ax); Serial.print(" G;  ");
   d43de:	f002 f8d9 	bl	d6594 <_Z16_fetch_usbserialv>
   d43e2:	4977      	ldr	r1, [pc, #476]	; (d45c0 <loop+0x330>)
   d43e4:	f001 fb90 	bl	d5b08 <_ZN5Print5printEPKc>
   d43e8:	f002 f8d4 	bl	d6594 <_Z16_fetch_usbserialv>
    float final_acc_ax = (promedio_acc_ax/500)*accScale;
   d43ec:	ee8a 0a88 	vdiv.f32	s0, s21, s16
    Serial.print("X: "); Serial.print(final_acc_ax); Serial.print(" G;  ");
   d43f0:	2102      	movs	r1, #2
    Serial.print("Roll: "); Serial.print(final_acc_gz); Serial.println(" °/s  ");
   d43f2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    float final_acc_ax = (promedio_acc_ax/500)*accScale;
   d43f6:	eddf aa73 	vldr	s21, [pc, #460]	; d45c4 <loop+0x334>
    Serial.print("X: "); Serial.print(final_acc_ax); Serial.print(" G;  ");
   d43fa:	ee20 0a2a 	vmul.f32	s0, s0, s21
   d43fe:	f001 fc87 	bl	d5d10 <_ZN5Print5printEfi>
   d4402:	f002 f8c7 	bl	d6594 <_Z16_fetch_usbserialv>
   d4406:	4970      	ldr	r1, [pc, #448]	; (d45c8 <loop+0x338>)
   d4408:	f001 fb7e 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print("Y: "); Serial.print(final_acc_ay); Serial.print(" G;  ");
   d440c:	f002 f8c2 	bl	d6594 <_Z16_fetch_usbserialv>
   d4410:	496e      	ldr	r1, [pc, #440]	; (d45cc <loop+0x33c>)
   d4412:	f001 fb79 	bl	d5b08 <_ZN5Print5printEPKc>
   d4416:	f002 f8bd 	bl	d6594 <_Z16_fetch_usbserialv>
    float final_acc_ay = (promedio_acc_ay/500)*accScale;   
   d441a:	ee8b 0a88 	vdiv.f32	s0, s23, s16
    Serial.print("Y: "); Serial.print(final_acc_ay); Serial.print(" G;  ");
   d441e:	2102      	movs	r1, #2
    float final_acc_gx = (promedio_acc_gx/500)*gyroScale;  
   d4420:	eec9 9a08 	vdiv.f32	s19, s18, s16
    Serial.print("Y: "); Serial.print(final_acc_ay); Serial.print(" G;  ");
   d4424:	ee20 0a2a 	vmul.f32	s0, s0, s21
   d4428:	f001 fc72 	bl	d5d10 <_ZN5Print5printEfi>
   d442c:	f002 f8b2 	bl	d6594 <_Z16_fetch_usbserialv>
   d4430:	4965      	ldr	r1, [pc, #404]	; (d45c8 <loop+0x338>)
    float final_acc_gx = (promedio_acc_gx/500)*gyroScale;  
   d4432:	ed9f 9a67 	vldr	s18, [pc, #412]	; d45d0 <loop+0x340>
    Serial.print("Y: "); Serial.print(final_acc_ay); Serial.print(" G;  ");
   d4436:	f001 fb67 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print("Z: "); Serial.print(final_acc_az); Serial.println(" G  ");
   d443a:	f002 f8ab 	bl	d6594 <_Z16_fetch_usbserialv>
   d443e:	4965      	ldr	r1, [pc, #404]	; (d45d4 <loop+0x344>)
   d4440:	f001 fb62 	bl	d5b08 <_ZN5Print5printEPKc>
   d4444:	f002 f8a6 	bl	d6594 <_Z16_fetch_usbserialv>
    float final_acc_az = (promedio_acc_az/500)*accScale;
   d4448:	ee8b 0a08 	vdiv.f32	s0, s22, s16
    Serial.print("Z: "); Serial.print(final_acc_az); Serial.println(" G  ");
   d444c:	2102      	movs	r1, #2
    float final_acc_gx = (promedio_acc_gx/500)*gyroScale;  
   d444e:	ee69 9a89 	vmul.f32	s19, s19, s18
    Serial.print("Z: "); Serial.print(final_acc_az); Serial.println(" G  ");
   d4452:	ee20 0a2a 	vmul.f32	s0, s0, s21
   d4456:	f001 fc5b 	bl	d5d10 <_ZN5Print5printEfi>
   d445a:	f002 f89b 	bl	d6594 <_Z16_fetch_usbserialv>
   d445e:	495e      	ldr	r1, [pc, #376]	; (d45d8 <loop+0x348>)
   d4460:	f001 fb65 	bl	d5b2e <_ZN5Print7printlnEPKc>
    Serial.print("Pitch: "); Serial.print(final_acc_gx); Serial.print(" °/s;  ");
   d4464:	f002 f896 	bl	d6594 <_Z16_fetch_usbserialv>
   d4468:	495c      	ldr	r1, [pc, #368]	; (d45dc <loop+0x34c>)
   d446a:	f001 fb4d 	bl	d5b08 <_ZN5Print5printEPKc>
   d446e:	f002 f891 	bl	d6594 <_Z16_fetch_usbserialv>
   d4472:	eeb0 0a69 	vmov.f32	s0, s19
   d4476:	2102      	movs	r1, #2
   d4478:	f001 fc4a 	bl	d5d10 <_ZN5Print5printEfi>
   d447c:	f002 f88a 	bl	d6594 <_Z16_fetch_usbserialv>
   d4480:	4957      	ldr	r1, [pc, #348]	; (d45e0 <loop+0x350>)
   d4482:	f001 fb41 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print("Yaw: "); Serial.print(final_acc_gy); Serial.print(" °/s;  ");
   d4486:	f002 f885 	bl	d6594 <_Z16_fetch_usbserialv>
   d448a:	4956      	ldr	r1, [pc, #344]	; (d45e4 <loop+0x354>)
   d448c:	f001 fb3c 	bl	d5b08 <_ZN5Print5printEPKc>
   d4490:	f002 f880 	bl	d6594 <_Z16_fetch_usbserialv>
    float final_acc_gy = (promedio_acc_gy/500)*gyroScale;
   d4494:	ee8a 0a08 	vdiv.f32	s0, s20, s16
    Serial.print("Yaw: "); Serial.print(final_acc_gy); Serial.print(" °/s;  ");
   d4498:	2102      	movs	r1, #2
   d449a:	ee20 0a09 	vmul.f32	s0, s0, s18
   d449e:	f001 fc37 	bl	d5d10 <_ZN5Print5printEfi>
   d44a2:	f002 f877 	bl	d6594 <_Z16_fetch_usbserialv>
   d44a6:	494e      	ldr	r1, [pc, #312]	; (d45e0 <loop+0x350>)
   d44a8:	f001 fb2e 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print("Roll: "); Serial.print(final_acc_gz); Serial.println(" °/s  ");
   d44ac:	f002 f872 	bl	d6594 <_Z16_fetch_usbserialv>
   d44b0:	494d      	ldr	r1, [pc, #308]	; (d45e8 <loop+0x358>)
   d44b2:	f001 fb29 	bl	d5b08 <_ZN5Print5printEPKc>
   d44b6:	f002 f86d 	bl	d6594 <_Z16_fetch_usbserialv>
    float final_acc_gz = (promedio_acc_gz/500)*gyroScale; 
   d44ba:	ee88 0a88 	vdiv.f32	s0, s17, s16
    Serial.print("Roll: "); Serial.print(final_acc_gz); Serial.println(" °/s  ");
   d44be:	2102      	movs	r1, #2
   d44c0:	ee20 0a09 	vmul.f32	s0, s0, s18
   d44c4:	f001 fc24 	bl	d5d10 <_ZN5Print5printEfi>
   d44c8:	f002 f864 	bl	d6594 <_Z16_fetch_usbserialv>
   d44cc:	4947      	ldr	r1, [pc, #284]	; (d45ec <loop+0x35c>)
    float promedio_I = 0;
   d44ce:	ed9f 9a33 	vldr	s18, [pc, #204]	; d459c <loop+0x30c>
    Serial.print("Roll: "); Serial.print(final_acc_gz); Serial.println(" °/s  ");
   d44d2:	f001 fb2c 	bl	d5b2e <_ZN5Print7printlnEPKc>
        current_mA = ina219.getCurrent_mA();
   d44d6:	4630      	mov	r0, r6
   d44d8:	f000 feb4 	bl	d5244 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    for (int cont_current =0; cont_current<500; cont_current++)
   d44dc:	3d01      	subs	r5, #1
        promedio_I = promedio_I + current_mA;        
   d44de:	ee39 9a00 	vadd.f32	s18, s18, s0
    for (int cont_current =0; cont_current<500; cont_current++)
   d44e2:	d1f8      	bne.n	d44d6 <loop+0x246>
    float corriente_final = promedio_I/500;
   d44e4:	eec9 8a08 	vdiv.f32	s17, s18, s16
    Serial.print("Corriente de motor:  "); Serial.print(corriente_final); Serial.println(" mA");
   d44e8:	f002 f854 	bl	d6594 <_Z16_fetch_usbserialv>
   d44ec:	4940      	ldr	r1, [pc, #256]	; (d45f0 <loop+0x360>)
   d44ee:	f001 fb0b 	bl	d5b08 <_ZN5Print5printEPKc>
   d44f2:	f002 f84f 	bl	d6594 <_Z16_fetch_usbserialv>
   d44f6:	2102      	movs	r1, #2
   d44f8:	eeb0 0a68 	vmov.f32	s0, s17
   d44fc:	f001 fc08 	bl	d5d10 <_ZN5Print5printEfi>
   d4500:	f002 f848 	bl	d6594 <_Z16_fetch_usbserialv>
   d4504:	493b      	ldr	r1, [pc, #236]	; (d45f4 <loop+0x364>)
   d4506:	f001 fb12 	bl	d5b2e <_ZN5Print7printlnEPKc>
    Serial.print("Potencia de motor:   "); Serial.print(potencia); Serial.println(" Watts");
   d450a:	f002 f843 	bl	d6594 <_Z16_fetch_usbserialv>
   d450e:	493a      	ldr	r1, [pc, #232]	; (d45f8 <loop+0x368>)
   d4510:	f001 fafa 	bl	d5b08 <_ZN5Print5printEPKc>
   d4514:	f002 f83e 	bl	d6594 <_Z16_fetch_usbserialv>
    potencia = (corriente_final/1000)*5;  
   d4518:	eddf 7a38 	vldr	s15, [pc, #224]	; d45fc <loop+0x36c>
   d451c:	ee88 0aa7 	vdiv.f32	s0, s17, s15
    Serial.print("Potencia de motor:   "); Serial.print(potencia); Serial.println(" Watts");
   d4520:	2102      	movs	r1, #2
   d4522:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4526:	ee20 0a27 	vmul.f32	s0, s0, s15
   d452a:	f001 fbf1 	bl	d5d10 <_ZN5Print5printEfi>
   d452e:	f002 f831 	bl	d6594 <_Z16_fetch_usbserialv>
   d4532:	4933      	ldr	r1, [pc, #204]	; (d4600 <loop+0x370>)
   d4534:	f001 fafb 	bl	d5b2e <_ZN5Print7printlnEPKc>
    float h = dht.getHumidity();      // Leemos la humedad, y la ponemos en una variable float h
   d4538:	4832      	ldr	r0, [pc, #200]	; (d4604 <loop+0x374>)
   d453a:	f000 fdff 	bl	d513c <_ZN3DHT11getHumidityEv>
    float t = dht.getTempCelcius();   // Leemos la temperatura, y la ponemos en una variable float t
   d453e:	4831      	ldr	r0, [pc, #196]	; (d4604 <loop+0x374>)
    float h = dht.getHumidity();      // Leemos la humedad, y la ponemos en una variable float h
   d4540:	eeb0 9a40 	vmov.f32	s18, s0
    float t = dht.getTempCelcius();   // Leemos la temperatura, y la ponemos en una variable float t
   d4544:	f000 fdcc 	bl	d50e0 <_ZN3DHT14getTempCelciusEv>
    if (isnan(h) || isnan(t)) {    // En caso de que el sensor mande datos erroneos nos saldrá esta advertencia.
   d4548:	eeb4 9a49 	vcmp.f32	s18, s18
   d454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();   // Leemos la temperatura, y la ponemos en una variable float t
   d4550:	eeb0 8a40 	vmov.f32	s16, s0
    if (isnan(h) || isnan(t)) {    // En caso de que el sensor mande datos erroneos nos saldrá esta advertencia.
   d4554:	d604      	bvs.n	d4560 <loop+0x2d0>
   d4556:	eeb4 0a40 	vcmp.f32	s0, s0
   d455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d455e:	d75d      	bvc.n	d461c <loop+0x38c>
      Serial.println("No se pudo leer datos!"); //Lo mandará por puerto serial
   d4560:	f002 f818 	bl	d6594 <_Z16_fetch_usbserialv>
   d4564:	4928      	ldr	r1, [pc, #160]	; (d4608 <loop+0x378>)
   d4566:	f001 fae2 	bl	d5b2e <_ZN5Print7printlnEPKc>
}
   d456a:	b013      	add	sp, #76	; 0x4c
   d456c:	ecbd 8b08 	vpop	{d8-d11}
   d4570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4574:	000d7b0f 	.word	0x000d7b0f
   d4578:	2003e5ec 	.word	0x2003e5ec
   d457c:	2003e538 	.word	0x2003e538
   d4580:	2003e530 	.word	0x2003e530
   d4584:	2003e638 	.word	0x2003e638
   d4588:	2003e634 	.word	0x2003e634
   d458c:	000d7b23 	.word	0x000d7b23
   d4590:	2003e5f4 	.word	0x2003e5f4
   d4594:	2003e5f0 	.word	0x2003e5f0
   d4598:	2003e5e8 	.word	0x2003e5e8
   d459c:	00000000 	.word	0x00000000
   d45a0:	2003e614 	.word	0x2003e614
   d45a4:	2003e612 	.word	0x2003e612
   d45a8:	2003e5de 	.word	0x2003e5de
   d45ac:	2003e5dc 	.word	0x2003e5dc
   d45b0:	2003e5da 	.word	0x2003e5da
   d45b4:	2003e5ca 	.word	0x2003e5ca
   d45b8:	43fa0000 	.word	0x43fa0000
   d45bc:	2003e618 	.word	0x2003e618
   d45c0:	000d79b4 	.word	0x000d79b4
   d45c4:	3a1cf5c3 	.word	0x3a1cf5c3
   d45c8:	000d79b8 	.word	0x000d79b8
   d45cc:	000d79be 	.word	0x000d79be
   d45d0:	3bfa0000 	.word	0x3bfa0000
   d45d4:	000d79c2 	.word	0x000d79c2
   d45d8:	000d79c6 	.word	0x000d79c6
   d45dc:	000d79cb 	.word	0x000d79cb
   d45e0:	000d79d3 	.word	0x000d79d3
   d45e4:	000d79dc 	.word	0x000d79dc
   d45e8:	000d79e2 	.word	0x000d79e2
   d45ec:	000d79e9 	.word	0x000d79e9
   d45f0:	000d79f1 	.word	0x000d79f1
   d45f4:	000d7a07 	.word	0x000d7a07
   d45f8:	000d7a0b 	.word	0x000d7a0b
   d45fc:	447a0000 	.word	0x447a0000
   d4600:	000d7a21 	.word	0x000d7a21
   d4604:	2003e5fc 	.word	0x2003e5fc
   d4608:	000d7a28 	.word	0x000d7a28
   d460c:	2003e5e0 	.word	0x2003e5e0
   d4610:	2003e540 	.word	0x2003e540
   d4614:	2003e544 	.word	0x2003e544
   d4618:	2003e610 	.word	0x2003e610
    Serial.print("Humid: "); 
   d461c:	f001 ffba 	bl	d6594 <_Z16_fetch_usbserialv>
   d4620:	49b4      	ldr	r1, [pc, #720]	; (d48f4 <loop+0x664>)
    Serial.print(vel_final);
   d4622:	4eb5      	ldr	r6, [pc, #724]	; (d48f8 <loop+0x668>)
    Serial.print("Humid: "); 
   d4624:	f001 fa70 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print(h);
   d4628:	f001 ffb4 	bl	d6594 <_Z16_fetch_usbserialv>
   d462c:	eeb0 0a49 	vmov.f32	s0, s18
   d4630:	2102      	movs	r1, #2
   d4632:	f001 fb6d 	bl	d5d10 <_ZN5Print5printEfi>
    Serial.print("% - ");
   d4636:	f001 ffad 	bl	d6594 <_Z16_fetch_usbserialv>
   d463a:	49b0      	ldr	r1, [pc, #704]	; (d48fc <loop+0x66c>)
   d463c:	f001 fa64 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print("Temp: "); 
   d4640:	f001 ffa8 	bl	d6594 <_Z16_fetch_usbserialv>
   d4644:	49ae      	ldr	r1, [pc, #696]	; (d4900 <loop+0x670>)
   d4646:	f001 fa5f 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print(t);
   d464a:	f001 ffa3 	bl	d6594 <_Z16_fetch_usbserialv>
   d464e:	eeb0 0a48 	vmov.f32	s0, s16
   d4652:	2102      	movs	r1, #2
   d4654:	f001 fb5c 	bl	d5d10 <_ZN5Print5printEfi>
    Serial.print("*C ");
   d4658:	f001 ff9c 	bl	d6594 <_Z16_fetch_usbserialv>
   d465c:	49a9      	ldr	r1, [pc, #676]	; (d4904 <loop+0x674>)
   d465e:	f001 fa53 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print(" Velocidad del Motor - PWM: ");
   d4662:	f001 ff97 	bl	d6594 <_Z16_fetch_usbserialv>
   d4666:	49a8      	ldr	r1, [pc, #672]	; (d4908 <loop+0x678>)
   d4668:	f001 fa4e 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.print(vel_final);
   d466c:	f001 ff92 	bl	d6594 <_Z16_fetch_usbserialv>
   d4670:	6835      	ldr	r5, [r6, #0]
        if (n < 0 && base == 10) {
   d4672:	2d00      	cmp	r5, #0
   d4674:	4607      	mov	r7, r0
   d4676:	f280 818f 	bge.w	d4998 <loop+0x708>
            t = print('-');
   d467a:	212d      	movs	r1, #45	; 0x2d
   d467c:	f001 fa48 	bl	d5b10 <_ZN5Print5printEc>
            val = -n;
   d4680:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4682:	220a      	movs	r2, #10
   d4684:	4638      	mov	r0, r7
   d4686:	f001 fa5c 	bl	d5b42 <_ZN5Print11printNumberEmh>
    Serial.println("%");
   d468a:	f001 ff83 	bl	d6594 <_Z16_fetch_usbserialv>
   d468e:	499f      	ldr	r1, [pc, #636]	; (d490c <loop+0x67c>)
   d4690:	f001 fa4d 	bl	d5b2e <_ZN5Print7printlnEPKc>
    Serial.print(" BOTON EMERGENCIA (cont_hongo): ");
   d4694:	f001 ff7e 	bl	d6594 <_Z16_fetch_usbserialv>
   d4698:	499d      	ldr	r1, [pc, #628]	; (d4910 <loop+0x680>)
   d469a:	f001 fa35 	bl	d5b08 <_ZN5Print5printEPKc>
    Serial.println(cont_hongo);
   d469e:	f001 ff79 	bl	d6594 <_Z16_fetch_usbserialv>
   d46a2:	220a      	movs	r2, #10
   d46a4:	6821      	ldr	r1, [r4, #0]
   d46a6:	f7ff fdd1 	bl	d424c <_ZN5Print7printlnIiLi0EEEjT_i>
    digitalWrite(s1,HIGH);
   d46aa:	4b9a      	ldr	r3, [pc, #616]	; (d4914 <loop+0x684>)
   d46ac:	2101      	movs	r1, #1
   d46ae:	8818      	ldrh	r0, [r3, #0]
   d46b0:	f002 fa15 	bl	d6ade <digitalWrite>
    digitalWrite(s2,LOW);
   d46b4:	4b98      	ldr	r3, [pc, #608]	; (d4918 <loop+0x688>)
   d46b6:	2100      	movs	r1, #0
   d46b8:	8818      	ldrh	r0, [r3, #0]
   d46ba:	f002 fa10 	bl	d6ade <digitalWrite>
    if(corriente_final<=50.0)
   d46be:	eddf 7a97 	vldr	s15, [pc, #604]	; d491c <loop+0x68c>
   d46c2:	eef4 8ae7 	vcmpe.f32	s17, s15
   d46c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46ca:	eeb0 9a67 	vmov.f32	s18, s15
   d46ce:	d835      	bhi.n	d473c <loop+0x4ac>
      analogWrite(red,0);
   d46d0:	4b93      	ldr	r3, [pc, #588]	; (d4920 <loop+0x690>)
      cont_tiempo_normal++; //Aumentamos en uno el contador.
   d46d2:	4d94      	ldr	r5, [pc, #592]	; (d4924 <loop+0x694>)
      analogWrite(red,0);
   d46d4:	8818      	ldrh	r0, [r3, #0]
   d46d6:	2100      	movs	r1, #0
   d46d8:	f002 fa1a 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(green,255);
   d46dc:	4b92      	ldr	r3, [pc, #584]	; (d4928 <loop+0x698>)
   d46de:	21ff      	movs	r1, #255	; 0xff
   d46e0:	8818      	ldrh	r0, [r3, #0]
   d46e2:	f002 fa15 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(blue,0);
   d46e6:	4b91      	ldr	r3, [pc, #580]	; (d492c <loop+0x69c>)
   d46e8:	2100      	movs	r1, #0
   d46ea:	8818      	ldrh	r0, [r3, #0]
   d46ec:	f002 fa10 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(pwm, val_pwm);
   d46f0:	4b8f      	ldr	r3, [pc, #572]	; (d4930 <loop+0x6a0>)
   d46f2:	6819      	ldr	r1, [r3, #0]
   d46f4:	4b8f      	ldr	r3, [pc, #572]	; (d4934 <loop+0x6a4>)
   d46f6:	8818      	ldrh	r0, [r3, #0]
   d46f8:	f002 fa0a 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(servo, 40);
   d46fc:	4b8e      	ldr	r3, [pc, #568]	; (d4938 <loop+0x6a8>)
   d46fe:	2128      	movs	r1, #40	; 0x28
   d4700:	8818      	ldrh	r0, [r3, #0]
   d4702:	f002 fa05 	bl	d6b10 <_Z11analogWritetm>
      transporte = 1;
   d4706:	4b8d      	ldr	r3, [pc, #564]	; (d493c <loop+0x6ac>)
   d4708:	2201      	movs	r2, #1
   d470a:	601a      	str	r2, [r3, #0]
      velocidad = 100;
   d470c:	4a8c      	ldr	r2, [pc, #560]	; (d4940 <loop+0x6b0>)
   d470e:	2364      	movs	r3, #100	; 0x64
   d4710:	6013      	str	r3, [r2, #0]
      vel_final = velocidad;
   d4712:	6033      	str	r3, [r6, #0]
      cont_tiempo_normal++; //Aumentamos en uno el contador.
   d4714:	682b      	ldr	r3, [r5, #0]
   d4716:	3301      	adds	r3, #1
      if (cont_tiempo_normal ==  2)  //En caso de que el contador llegue al limite
   d4718:	2b02      	cmp	r3, #2
      cont_tiempo_normal++; //Aumentamos en uno el contador.
   d471a:	602b      	str	r3, [r5, #0]
      if (cont_tiempo_normal ==  2)  //En caso de que el contador llegue al limite
   d471c:	d10e      	bne.n	d473c <loop+0x4ac>
        Particle.publish("TEMP_NORMAL"); //Publicamos en SLACK que la temperatura es normal
   d471e:	4989      	ldr	r1, [pc, #548]	; (d4944 <loop+0x6b4>)
   d4720:	a80e      	add	r0, sp, #56	; 0x38
   d4722:	f7ff fcdd 	bl	d40e0 <_ZN10CloudClass7publishEPKc.isra.0>
   d4726:	a80f      	add	r0, sp, #60	; 0x3c
   d4728:	f7ff fd7a 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        cont_tiempo_medio = 0;
   d472c:	4a86      	ldr	r2, [pc, #536]	; (d4948 <loop+0x6b8>)
        cont_tiempo_normal = 0;
   d472e:	2300      	movs	r3, #0
        cont_tiempo_medio = 0;
   d4730:	6013      	str	r3, [r2, #0]
        cont_tiempo_alto = 0;
   d4732:	4a86      	ldr	r2, [pc, #536]	; (d494c <loop+0x6bc>)
        cont_tiempo_normal = 0;
   d4734:	602b      	str	r3, [r5, #0]
        cont_tiempo_alto = 0;
   d4736:	6013      	str	r3, [r2, #0]
        cont_tiempo_emergencia = 0;
   d4738:	4a85      	ldr	r2, [pc, #532]	; (d4950 <loop+0x6c0>)
   d473a:	6013      	str	r3, [r2, #0]
    if(corriente_final>50.0)
   d473c:	eef4 8ac9 	vcmpe.f32	s17, s18
   d4740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4744:	dd3e      	ble.n	d47c4 <loop+0x534>
      analogWrite(red,255);
   d4746:	4b76      	ldr	r3, [pc, #472]	; (d4920 <loop+0x690>)
      cont_tiempo_medio++; //Aumentamos en uno el contador.
   d4748:	4d7f      	ldr	r5, [pc, #508]	; (d4948 <loop+0x6b8>)
      analogWrite(red,255);
   d474a:	8818      	ldrh	r0, [r3, #0]
   d474c:	21ff      	movs	r1, #255	; 0xff
   d474e:	f002 f9df 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(green,34);
   d4752:	4b75      	ldr	r3, [pc, #468]	; (d4928 <loop+0x698>)
   d4754:	2122      	movs	r1, #34	; 0x22
   d4756:	8818      	ldrh	r0, [r3, #0]
   d4758:	f002 f9da 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(blue,0);
   d475c:	4b73      	ldr	r3, [pc, #460]	; (d492c <loop+0x69c>)
   d475e:	2100      	movs	r1, #0
   d4760:	8818      	ldrh	r0, [r3, #0]
   d4762:	f002 f9d5 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(pwm, val_pwm*0.75);
   d4766:	4b72      	ldr	r3, [pc, #456]	; (d4930 <loop+0x6a0>)
   d4768:	6818      	ldr	r0, [r3, #0]
   d476a:	f002 fb95 	bl	d6e98 <__aeabi_i2d>
   d476e:	2200      	movs	r2, #0
   d4770:	4b78      	ldr	r3, [pc, #480]	; (d4954 <loop+0x6c4>)
   d4772:	f002 fbfb 	bl	d6f6c <__aeabi_dmul>
   d4776:	f002 fed1 	bl	d751c <__aeabi_d2uiz>
   d477a:	4b6e      	ldr	r3, [pc, #440]	; (d4934 <loop+0x6a4>)
   d477c:	4601      	mov	r1, r0
   d477e:	8818      	ldrh	r0, [r3, #0]
   d4780:	f002 f9c6 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(servo, 40);
   d4784:	4b6c      	ldr	r3, [pc, #432]	; (d4938 <loop+0x6a8>)
   d4786:	2128      	movs	r1, #40	; 0x28
   d4788:	8818      	ldrh	r0, [r3, #0]
   d478a:	f002 f9c1 	bl	d6b10 <_Z11analogWritetm>
      transporte = 1;
   d478e:	4b6b      	ldr	r3, [pc, #428]	; (d493c <loop+0x6ac>)
   d4790:	2201      	movs	r2, #1
   d4792:	601a      	str	r2, [r3, #0]
      velocidad = 50;
   d4794:	4a6a      	ldr	r2, [pc, #424]	; (d4940 <loop+0x6b0>)
   d4796:	2332      	movs	r3, #50	; 0x32
   d4798:	6013      	str	r3, [r2, #0]
      vel_final = velocidad;
   d479a:	6033      	str	r3, [r6, #0]
      cont_tiempo_medio++; //Aumentamos en uno el contador.
   d479c:	682b      	ldr	r3, [r5, #0]
   d479e:	3301      	adds	r3, #1
      if (cont_tiempo_medio ==  2) //En caso de que el contador llegue al limite
   d47a0:	2b02      	cmp	r3, #2
      cont_tiempo_medio++; //Aumentamos en uno el contador.
   d47a2:	602b      	str	r3, [r5, #0]
      if (cont_tiempo_medio ==  2) //En caso de que el contador llegue al limite
   d47a4:	d10e      	bne.n	d47c4 <loop+0x534>
        Particle.publish("TEMP_MEDIO"); //Publicamos en SLACK que la temperatura del motor tiene riesgo medio.
   d47a6:	496c      	ldr	r1, [pc, #432]	; (d4958 <loop+0x6c8>)
   d47a8:	a80e      	add	r0, sp, #56	; 0x38
   d47aa:	f7ff fc99 	bl	d40e0 <_ZN10CloudClass7publishEPKc.isra.0>
   d47ae:	a80f      	add	r0, sp, #60	; 0x3c
   d47b0:	f7ff fd36 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        cont_tiempo_normal = 0;
   d47b4:	4a5b      	ldr	r2, [pc, #364]	; (d4924 <loop+0x694>)
   d47b6:	2300      	movs	r3, #0
   d47b8:	6013      	str	r3, [r2, #0]
        cont_tiempo_alto = 0;
   d47ba:	4a64      	ldr	r2, [pc, #400]	; (d494c <loop+0x6bc>)
        cont_tiempo_medio = 0;
   d47bc:	602b      	str	r3, [r5, #0]
        cont_tiempo_alto = 0;
   d47be:	6013      	str	r3, [r2, #0]
        cont_tiempo_emergencia = 0;
   d47c0:	4a63      	ldr	r2, [pc, #396]	; (d4950 <loop+0x6c0>)
   d47c2:	6013      	str	r3, [r2, #0]
    if(corriente_final>=100.0 || cont_reinicio_motor == 1)
   d47c4:	eddf 7a65 	vldr	s15, [pc, #404]	; d495c <loop+0x6cc>
   d47c8:	4b65      	ldr	r3, [pc, #404]	; (d4960 <loop+0x6d0>)
   d47ca:	eef4 8ae7 	vcmpe.f32	s17, s15
   d47ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47d2:	da02      	bge.n	d47da <loop+0x54a>
   d47d4:	681a      	ldr	r2, [r3, #0]
   d47d6:	2a01      	cmp	r2, #1
   d47d8:	d135      	bne.n	d4846 <loop+0x5b6>
      cont_reinicio_motor = 1;
   d47da:	2201      	movs	r2, #1
   d47dc:	601a      	str	r2, [r3, #0]
      analogWrite(red,255);
   d47de:	4b50      	ldr	r3, [pc, #320]	; (d4920 <loop+0x690>)
   d47e0:	21ff      	movs	r1, #255	; 0xff
   d47e2:	8818      	ldrh	r0, [r3, #0]
   d47e4:	f002 f994 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(green,0);
   d47e8:	4b4f      	ldr	r3, [pc, #316]	; (d4928 <loop+0x698>)
   d47ea:	2100      	movs	r1, #0
   d47ec:	8818      	ldrh	r0, [r3, #0]
   d47ee:	f002 f98f 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(blue,0);
   d47f2:	4b4e      	ldr	r3, [pc, #312]	; (d492c <loop+0x69c>)
   d47f4:	2100      	movs	r1, #0
   d47f6:	8818      	ldrh	r0, [r3, #0]
   d47f8:	f002 f98a 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(pwm, 0);
   d47fc:	4b4d      	ldr	r3, [pc, #308]	; (d4934 <loop+0x6a4>)
   d47fe:	2100      	movs	r1, #0
   d4800:	8818      	ldrh	r0, [r3, #0]
   d4802:	f002 f985 	bl	d6b10 <_Z11analogWritetm>
      analogWrite(servo, 200);
   d4806:	4b4c      	ldr	r3, [pc, #304]	; (d4938 <loop+0x6a8>)
   d4808:	21c8      	movs	r1, #200	; 0xc8
   d480a:	8818      	ldrh	r0, [r3, #0]
   d480c:	f002 f980 	bl	d6b10 <_Z11analogWritetm>
      transporte = 2; //Usamos la variable de transporte para definir que carril se esta usando.
   d4810:	4b4a      	ldr	r3, [pc, #296]	; (d493c <loop+0x6ac>)
   d4812:	2202      	movs	r2, #2
      velocidad = 0; //Se usa la variable para mostrar que la velocidad es cero.
   d4814:	2500      	movs	r5, #0
      vel_final = velocidad; //Ponemos el valor de la velocidad en la variable de vel_final
   d4816:	6035      	str	r5, [r6, #0]
      transporte = 2; //Usamos la variable de transporte para definir que carril se esta usando.
   d4818:	601a      	str	r2, [r3, #0]
      cont_tiempo_alto++; //Aumentamos en uno el contador.
   d481a:	4e4c      	ldr	r6, [pc, #304]	; (d494c <loop+0x6bc>)
      velocidad = 0; //Se usa la variable para mostrar que la velocidad es cero.
   d481c:	4b48      	ldr	r3, [pc, #288]	; (d4940 <loop+0x6b0>)
   d481e:	601d      	str	r5, [r3, #0]
      cont_tiempo_alto++; //Aumentamos en uno el contador.
   d4820:	6833      	ldr	r3, [r6, #0]
   d4822:	3301      	adds	r3, #1
      if (cont_tiempo_alto ==  2) //bajamos el contador debido a que es importante que se avise cuando el motor esta parado
   d4824:	4293      	cmp	r3, r2
      cont_tiempo_alto++; //Aumentamos en uno el contador.
   d4826:	6033      	str	r3, [r6, #0]
      if (cont_tiempo_alto ==  2) //bajamos el contador debido a que es importante que se avise cuando el motor esta parado
   d4828:	d10d      	bne.n	d4846 <loop+0x5b6>
        Particle.publish("TEMP_ALTO"); //Publicamos en SLACK que la temperatura del motor tiene riesgo alto. Por lo que se paro el motor.
   d482a:	494e      	ldr	r1, [pc, #312]	; (d4964 <loop+0x6d4>)
   d482c:	a80e      	add	r0, sp, #56	; 0x38
   d482e:	f7ff fc57 	bl	d40e0 <_ZN10CloudClass7publishEPKc.isra.0>
   d4832:	a80f      	add	r0, sp, #60	; 0x3c
   d4834:	f7ff fcf4 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        cont_tiempo_normal = 0;
   d4838:	4b3a      	ldr	r3, [pc, #232]	; (d4924 <loop+0x694>)
        cont_tiempo_alto = 0;
   d483a:	6035      	str	r5, [r6, #0]
        cont_tiempo_normal = 0;
   d483c:	601d      	str	r5, [r3, #0]
        cont_tiempo_medio = 0;
   d483e:	4b42      	ldr	r3, [pc, #264]	; (d4948 <loop+0x6b8>)
   d4840:	601d      	str	r5, [r3, #0]
        cont_tiempo_emergencia = 0;
   d4842:	4b43      	ldr	r3, [pc, #268]	; (d4950 <loop+0x6c0>)
   d4844:	601d      	str	r5, [r3, #0]
    temp_nube = t; //Usamos este temporizador para que la publicacion de la informacion en slack y en el data set no sea tan seguida
   d4846:	4b48      	ldr	r3, [pc, #288]	; (d4968 <loop+0x6d8>)
    cont_tiempo_nube++; //Aumentamos en uno el contador de la variable anterior.
   d4848:	4d48      	ldr	r5, [pc, #288]	; (d496c <loop+0x6dc>)
    temp_nube = t; //Usamos este temporizador para que la publicacion de la informacion en slack y en el data set no sea tan seguida
   d484a:	ed83 8a00 	vstr	s16, [r3]
    cont_tiempo_nube++; //Aumentamos en uno el contador de la variable anterior.
   d484e:	682b      	ldr	r3, [r5, #0]
   d4850:	3301      	adds	r3, #1
    if (cont_tiempo_nube == 4) //Contador para publicarlo en Google Sheets
   d4852:	2b04      	cmp	r3, #4
    cont_tiempo_nube++; //Aumentamos en uno el contador de la variable anterior.
   d4854:	602b      	str	r3, [r5, #0]
    if (cont_tiempo_nube == 4) //Contador para publicarlo en Google Sheets
   d4856:	f47f ad23 	bne.w	d42a0 <loop+0x10>
      String temperature = String(temp_nube); // guardamos el dato de la temperatura en un string
   d485a:	4e45      	ldr	r6, [pc, #276]	; (d4970 <loop+0x6e0>)
   d485c:	eeb0 0a48 	vmov.f32	s0, s16
   d4860:	2106      	movs	r1, #6
   d4862:	a806      	add	r0, sp, #24
   d4864:	f001 f8cf 	bl	d5a06 <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4868:	7833      	ldrb	r3, [r6, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d486a:	9a06      	ldr	r2, [sp, #24]
   d486c:	4941      	ldr	r1, [pc, #260]	; (d4974 <loop+0x6e4>)
   d486e:	f88d 3000 	strb.w	r3, [sp]
   d4872:	a80e      	add	r0, sp, #56	; 0x38
   d4874:	233c      	movs	r3, #60	; 0x3c
   d4876:	f001 fc43 	bl	d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d487a:	a80f      	add	r0, sp, #60	; 0x3c
   d487c:	f7ff fcd0 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      String corriente_str = String(corriente_final); // guardamos el dato de la corriente en un string
   d4880:	eeb0 0a68 	vmov.f32	s0, s17
   d4884:	2106      	movs	r1, #6
   d4886:	a80a      	add	r0, sp, #40	; 0x28
   d4888:	f001 f8bd 	bl	d5a06 <_ZN6StringC1Efi>
   d488c:	7833      	ldrb	r3, [r6, #0]
   d488e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4890:	4939      	ldr	r1, [pc, #228]	; (d4978 <loop+0x6e8>)
   d4892:	f88d 3000 	strb.w	r3, [sp]
   d4896:	a80e      	add	r0, sp, #56	; 0x38
   d4898:	233c      	movs	r3, #60	; 0x3c
   d489a:	f001 fc31 	bl	d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d489e:	a80f      	add	r0, sp, #60	; 0x3c
   d48a0:	f7ff fcbe 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      String nube_final_acc_gx = String(final_acc_gx); // guardamos el dato del giroscopio en x en un string
   d48a4:	eeb0 0a69 	vmov.f32	s0, s19
   d48a8:	2106      	movs	r1, #6
   d48aa:	a80e      	add	r0, sp, #56	; 0x38
   d48ac:	f001 f8ab 	bl	d5a06 <_ZN6StringC1Efi>
   d48b0:	7833      	ldrb	r3, [r6, #0]
   d48b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d48b4:	4931      	ldr	r1, [pc, #196]	; (d497c <loop+0x6ec>)
   d48b6:	f88d 3000 	strb.w	r3, [sp]
   d48ba:	a804      	add	r0, sp, #16
   d48bc:	233c      	movs	r3, #60	; 0x3c
   d48be:	f001 fc1f 	bl	d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d48c2:	a805      	add	r0, sp, #20
   d48c4:	f7ff fcac 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Serial.print(" -------------- Se publico dato en la nube (contador_nube: ) "); 
   d48c8:	f001 fe64 	bl	d6594 <_Z16_fetch_usbserialv>
   d48cc:	492c      	ldr	r1, [pc, #176]	; (d4980 <loop+0x6f0>)
   d48ce:	f001 f91b 	bl	d5b08 <_ZN5Print5printEPKc>
      Serial.println(cont_tiempo_nube); 
   d48d2:	f001 fe5f 	bl	d6594 <_Z16_fetch_usbserialv>
   d48d6:	6829      	ldr	r1, [r5, #0]
   d48d8:	220a      	movs	r2, #10
   d48da:	f7ff fcb7 	bl	d424c <_ZN5Print7printlnIiLi0EEEjT_i>
      cont_tiempo_normal = 0;
   d48de:	4a11      	ldr	r2, [pc, #68]	; (d4924 <loop+0x694>)
   d48e0:	2300      	movs	r3, #0
   d48e2:	6013      	str	r3, [r2, #0]
      cont_tiempo_medio = 0;
   d48e4:	4a18      	ldr	r2, [pc, #96]	; (d4948 <loop+0x6b8>)
      cont_tiempo_nube = 0;
   d48e6:	602b      	str	r3, [r5, #0]
      cont_tiempo_medio = 0;
   d48e8:	6013      	str	r3, [r2, #0]
      cont_tiempo_alto = 0;
   d48ea:	4a18      	ldr	r2, [pc, #96]	; (d494c <loop+0x6bc>)
   d48ec:	6013      	str	r3, [r2, #0]
      cont_tiempo_emergencia = 0;
   d48ee:	4a18      	ldr	r2, [pc, #96]	; (d4950 <loop+0x6c0>)
      String nube_final_acc_gx = String(final_acc_gx); // guardamos el dato del giroscopio en x en un string
   d48f0:	a80e      	add	r0, sp, #56	; 0x38
   d48f2:	e047      	b.n	d4984 <loop+0x6f4>
   d48f4:	000d7a3f 	.word	0x000d7a3f
   d48f8:	2003e634 	.word	0x2003e634
   d48fc:	000d7a47 	.word	0x000d7a47
   d4900:	000d7a4c 	.word	0x000d7a4c
   d4904:	000d7a53 	.word	0x000d7a53
   d4908:	000d7a57 	.word	0x000d7a57
   d490c:	000d7a74 	.word	0x000d7a74
   d4910:	000d7a76 	.word	0x000d7a76
   d4914:	2003e548 	.word	0x2003e548
   d4918:	2003e54c 	.word	0x2003e54c
   d491c:	42480000 	.word	0x42480000
   d4920:	2003e544 	.word	0x2003e544
   d4924:	2003e5f4 	.word	0x2003e5f4
   d4928:	2003e538 	.word	0x2003e538
   d492c:	2003e530 	.word	0x2003e530
   d4930:	2003e554 	.word	0x2003e554
   d4934:	2003e540 	.word	0x2003e540
   d4938:	2003e550 	.word	0x2003e550
   d493c:	2003e630 	.word	0x2003e630
   d4940:	2003e638 	.word	0x2003e638
   d4944:	000d7a97 	.word	0x000d7a97
   d4948:	2003e5f0 	.word	0x2003e5f0
   d494c:	2003e5e8 	.word	0x2003e5e8
   d4950:	2003e5ec 	.word	0x2003e5ec
   d4954:	3fe80000 	.word	0x3fe80000
   d4958:	000d7aa3 	.word	0x000d7aa3
   d495c:	42c80000 	.word	0x42c80000
   d4960:	2003e5e4 	.word	0x2003e5e4
   d4964:	000d7aae 	.word	0x000d7aae
   d4968:	2003e628 	.word	0x2003e628
   d496c:	2003e5f8 	.word	0x2003e5f8
   d4970:	2003e5c9 	.word	0x2003e5c9
   d4974:	000d7ab8 	.word	0x000d7ab8
   d4978:	000d7ac1 	.word	0x000d7ac1
   d497c:	000d7ac6 	.word	0x000d7ac6
   d4980:	000d7ad1 	.word	0x000d7ad1
      cont_tiempo_emergencia = 0;
   d4984:	6013      	str	r3, [r2, #0]
      String nube_final_acc_gx = String(final_acc_gx); // guardamos el dato del giroscopio en x en un string
   d4986:	f000 ffe1 	bl	d594c <_ZN6StringD1Ev>
      String corriente_str = String(corriente_final); // guardamos el dato de la corriente en un string
   d498a:	a80a      	add	r0, sp, #40	; 0x28
   d498c:	f000 ffde 	bl	d594c <_ZN6StringD1Ev>
      String temperature = String(temp_nube); // guardamos el dato de la temperatura en un string
   d4990:	a806      	add	r0, sp, #24
   d4992:	f000 ffdb 	bl	d594c <_ZN6StringD1Ev>
   d4996:	e483      	b.n	d42a0 <loop+0x10>
            val = n;
   d4998:	4629      	mov	r1, r5
   d499a:	e672      	b.n	d4682 <loop+0x3f2>

000d499c <_GLOBAL__sub_I_ina219>:
   d499c:	b508      	push	{r3, lr}
        val_(val) {
   d499e:	4b0a      	ldr	r3, [pc, #40]	; (d49c8 <_GLOBAL__sub_I_ina219+0x2c>)
Adafruit_INA219 ina219;
   d49a0:	480a      	ldr	r0, [pc, #40]	; (d49cc <_GLOBAL__sub_I_ina219+0x30>)
   d49a2:	2200      	movs	r2, #0
   d49a4:	701a      	strb	r2, [r3, #0]
   d49a6:	4b0a      	ldr	r3, [pc, #40]	; (d49d0 <_GLOBAL__sub_I_ina219+0x34>)
   d49a8:	2201      	movs	r2, #1
   d49aa:	701a      	strb	r2, [r3, #0]
   d49ac:	2140      	movs	r1, #64	; 0x40
   d49ae:	f000 fc29 	bl	d5204 <_ZN15Adafruit_INA219C1Eh>
DHT dht(DHTPIN, DHTTYPE); //Se configura el tipo de sensor de temperatura y el pin del mismo
   d49b2:	2306      	movs	r3, #6
   d49b4:	4807      	ldr	r0, [pc, #28]	; (d49d4 <_GLOBAL__sub_I_ina219+0x38>)
   d49b6:	2216      	movs	r2, #22
   d49b8:	2107      	movs	r1, #7
   d49ba:	f000 f998 	bl	d4cee <_ZN3DHTC1Ehhh>
   d49be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
MPU6050 accelgyro;
   d49c2:	4805      	ldr	r0, [pc, #20]	; (d49d8 <_GLOBAL__sub_I_ina219+0x3c>)
   d49c4:	f000 b80a 	b.w	d49dc <_ZN7MPU6050C1Ev>
   d49c8:	2003e5c8 	.word	0x2003e5c8
   d49cc:	2003e618 	.word	0x2003e618
   d49d0:	2003e5c9 	.word	0x2003e5c9
   d49d4:	2003e5fc 	.word	0x2003e5fc
   d49d8:	2003e5ca 	.word	0x2003e5ca

000d49dc <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
   d49dc:	2368      	movs	r3, #104	; 0x68
   d49de:	7003      	strb	r3, [r0, #0]
}
   d49e0:	4770      	bx	lr

000d49e2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
   d49e2:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
   d49e4:	2302      	movs	r3, #2
   d49e6:	7800      	ldrb	r0, [r0, #0]
   d49e8:	9100      	str	r1, [sp, #0]
   d49ea:	2204      	movs	r2, #4
   d49ec:	211b      	movs	r1, #27
   d49ee:	f000 f923 	bl	d4c38 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d49f2:	b003      	add	sp, #12
   d49f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d49f8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
   d49f8:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
   d49fa:	2302      	movs	r3, #2
   d49fc:	7800      	ldrb	r0, [r0, #0]
   d49fe:	9100      	str	r1, [sp, #0]
   d4a00:	2204      	movs	r2, #4
   d4a02:	211c      	movs	r1, #28
   d4a04:	f000 f918 	bl	d4c38 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d4a08:	b003      	add	sp, #12
   d4a0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a10 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a12:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4a14:	4a17      	ldr	r2, [pc, #92]	; (d4a74 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4a16:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4a18:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4a1a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4a1c:	8812      	ldrh	r2, [r2, #0]
   d4a1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d4a22:	9200      	str	r2, [sp, #0]
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4a24:	460f      	mov	r7, r1
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4a26:	220e      	movs	r2, #14
   d4a28:	213b      	movs	r1, #59	; 0x3b
   d4a2a:	f000 f849 	bl	d4ac0 <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
   d4a2e:	7862      	ldrb	r2, [r4, #1]
   d4a30:	78a3      	ldrb	r3, [r4, #2]
   d4a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a36:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
   d4a38:	78e2      	ldrb	r2, [r4, #3]
   d4a3a:	7923      	ldrb	r3, [r4, #4]
   d4a3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a40:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
   d4a42:	7962      	ldrb	r2, [r4, #5]
   d4a44:	79a3      	ldrb	r3, [r4, #6]
   d4a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a4a:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
   d4a4c:	7a62      	ldrb	r2, [r4, #9]
   d4a4e:	7aa3      	ldrb	r3, [r4, #10]
   d4a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a54:	9a08      	ldr	r2, [sp, #32]
   d4a56:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
   d4a58:	7ae2      	ldrb	r2, [r4, #11]
   d4a5a:	7b23      	ldrb	r3, [r4, #12]
   d4a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4a62:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
   d4a64:	7b62      	ldrb	r2, [r4, #13]
   d4a66:	7ba3      	ldrb	r3, [r4, #14]
   d4a68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4a6e:	8013      	strh	r3, [r2, #0]
}
   d4a70:	b003      	add	sp, #12
   d4a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a74:	2003e558 	.word	0x2003e558

000d4a78 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
   d4a78:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
   d4a7a:	7800      	ldrb	r0, [r0, #0]
   d4a7c:	2206      	movs	r2, #6
   d4a7e:	216b      	movs	r1, #107	; 0x6b
   d4a80:	f000 b8b6 	b.w	d4bf0 <_ZN6I2Cdev8writeBitEhhhh>

000d4a84 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
   d4a84:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
   d4a86:	2303      	movs	r3, #3
   d4a88:	7800      	ldrb	r0, [r0, #0]
   d4a8a:	9100      	str	r1, [sp, #0]
   d4a8c:	2202      	movs	r2, #2
   d4a8e:	216b      	movs	r1, #107	; 0x6b
   d4a90:	f000 f8d2 	bl	d4c38 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d4a94:	b003      	add	sp, #12
   d4a96:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a9a <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
   d4a9a:	b510      	push	{r4, lr}
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d4a9c:	2101      	movs	r1, #1
void MPU6050::initialize() {
   d4a9e:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d4aa0:	f7ff fff0 	bl	d4a84 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	2100      	movs	r1, #0
   d4aa8:	f7ff ff9b 	bl	d49e2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
   d4aac:	4620      	mov	r0, r4
   d4aae:	2100      	movs	r1, #0
   d4ab0:	f7ff ffa2 	bl	d49f8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	2100      	movs	r1, #0
}
   d4ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d4abc:	f7ff bfdc 	b.w	d4a78 <_ZN7MPU605015setSleepEnabledEb>

000d4ac0 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
   d4ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ac4:	4616      	mov	r6, r2
   d4ac6:	469b      	mov	fp, r3
   d4ac8:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   d4acc:	4607      	mov	r7, r0
   d4ace:	468a      	mov	sl, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ad0:	f000 fc40 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4ad4:	2e20      	cmp	r6, #32
   d4ad6:	4633      	mov	r3, r6
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4ad8:	f04f 0500 	mov.w	r5, #0
   d4adc:	bfa8      	it	ge
   d4ade:	2320      	movge	r3, #32
   d4ae0:	4681      	mov	r9, r0
    int8_t count = 0;
   d4ae2:	462c      	mov	r4, r5
   d4ae4:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4ae6:	42b5      	cmp	r5, r6
   d4ae8:	d23a      	bcs.n	d4b60 <_ZN6I2Cdev9readBytesEhhhPht+0xa0>
                Wire.beginTransmission(devAddr);
   d4aea:	f002 f84f 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4aee:	4639      	mov	r1, r7
   d4af0:	f001 feac 	bl	d684c <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
   d4af4:	f002 f84a 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4af8:	6803      	ldr	r3, [r0, #0]
   d4afa:	4651      	mov	r1, sl
   d4afc:	689b      	ldr	r3, [r3, #8]
   d4afe:	4798      	blx	r3
                Wire.endTransmission();
   d4b00:	f002 f844 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4b04:	f001 feaa 	bl	d685c <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
   d4b08:	f002 f840 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4b0c:	4639      	mov	r1, r7
   d4b0e:	f001 fe9d 	bl	d684c <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
   d4b12:	f002 f83b 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4b16:	1b72      	subs	r2, r6, r5
   d4b18:	2a20      	cmp	r2, #32
   d4b1a:	bfa8      	it	ge
   d4b1c:	2220      	movge	r2, #32
   d4b1e:	b2d2      	uxtb	r2, r2
   d4b20:	4639      	mov	r1, r7
   d4b22:	f001 fe90 	bl	d6846 <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d4b26:	f002 f831 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4b2a:	6803      	ldr	r3, [r0, #0]
   d4b2c:	691b      	ldr	r3, [r3, #16]
   d4b2e:	4798      	blx	r3
   d4b30:	b190      	cbz	r0, d4b58 <_ZN6I2Cdev9readBytesEhhhPht+0x98>
   d4b32:	f1b8 0f00 	cmp.w	r8, #0
   d4b36:	d109      	bne.n	d4b4c <_ZN6I2Cdev9readBytesEhhhPht+0x8c>
                    data[count] = Wire.read();
   d4b38:	f002 f828 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4b3c:	6803      	ldr	r3, [r0, #0]
   d4b3e:	695b      	ldr	r3, [r3, #20]
   d4b40:	4798      	blx	r3
   d4b42:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d4b46:	3401      	adds	r4, #1
   d4b48:	b264      	sxtb	r4, r4
   d4b4a:	e7ec      	b.n	d4b26 <_ZN6I2Cdev9readBytesEhhhPht+0x66>
   d4b4c:	f000 fc02 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
   d4b50:	eba0 0009 	sub.w	r0, r0, r9
   d4b54:	4540      	cmp	r0, r8
   d4b56:	d3ef      	bcc.n	d4b38 <_ZN6I2Cdev9readBytesEhhhPht+0x78>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4b58:	9b01      	ldr	r3, [sp, #4]
   d4b5a:	441d      	add	r5, r3
   d4b5c:	b2ed      	uxtb	r5, r5
   d4b5e:	e7c2      	b.n	d4ae6 <_ZN6I2Cdev9readBytesEhhhPht+0x26>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
   d4b60:	f1b8 0f00 	cmp.w	r8, #0
   d4b64:	d009      	beq.n	d4b7a <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d4b66:	f000 fbf5 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
   d4b6a:	eba0 0009 	sub.w	r0, r0, r9
   d4b6e:	4540      	cmp	r0, r8
   d4b70:	d303      	bcc.n	d4b7a <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d4b72:	42b4      	cmp	r4, r6
   d4b74:	bfb8      	it	lt
   d4b76:	f04f 34ff 	movlt.w	r4, #4294967295
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	b003      	add	sp, #12
   d4b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4b82 <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
   d4b82:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
   d4b84:	9300      	str	r3, [sp, #0]
   d4b86:	4613      	mov	r3, r2
   d4b88:	2201      	movs	r2, #1
   d4b8a:	f7ff ff99 	bl	d4ac0 <_ZN6I2Cdev9readBytesEhhhPht>
}
   d4b8e:	b003      	add	sp, #12
   d4b90:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b94 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
   d4b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b96:	4607      	mov	r7, r0
   d4b98:	4615      	mov	r5, r2
   d4b9a:	461c      	mov	r4, r3
   d4b9c:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
   d4b9e:	f001 fff5 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4ba2:	4639      	mov	r1, r7
   d4ba4:	f001 fe52 	bl	d684c <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
   d4ba8:	f001 fff0 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4bac:	6803      	ldr	r3, [r0, #0]
   d4bae:	4631      	mov	r1, r6
   d4bb0:	689b      	ldr	r3, [r3, #8]
   d4bb2:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
   d4bb4:	4425      	add	r5, r4
   d4bb6:	42ac      	cmp	r4, r5
   d4bb8:	d007      	beq.n	d4bca <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
   d4bba:	f001 ffe7 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4bbe:	6803      	ldr	r3, [r0, #0]
   d4bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4bc4:	689b      	ldr	r3, [r3, #8]
   d4bc6:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
   d4bc8:	e7f5      	b.n	d4bb6 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
   d4bca:	f001 ffdf 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d4bce:	f001 fe45 	bl	d685c <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
   d4bd2:	fab0 f080 	clz	r0, r0
   d4bd6:	0940      	lsrs	r0, r0, #5
   d4bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bda <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
   d4bda:	b507      	push	{r0, r1, r2, lr}
   d4bdc:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
   d4be0:	f10d 0307 	add.w	r3, sp, #7
   d4be4:	2201      	movs	r2, #1
   d4be6:	f7ff ffd5 	bl	d4b94 <_ZN6I2Cdev10writeBytesEhhhPh>
}
   d4bea:	b003      	add	sp, #12
   d4bec:	f85d fb04 	ldr.w	pc, [sp], #4

000d4bf0 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d4bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4bf4:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
   d4bf6:	4b0f      	ldr	r3, [pc, #60]	; (d4c34 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d4bf8:	4690      	mov	r8, r2
   d4bfa:	2401      	movs	r4, #1
    readByte(devAddr, regAddr, &b);
   d4bfc:	f10d 0207 	add.w	r2, sp, #7
   d4c00:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d4c02:	4605      	mov	r5, r0
   d4c04:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
   d4c06:	f7ff ffbc 	bl	d4b82 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d4c0a:	fa04 f208 	lsl.w	r2, r4, r8
   d4c0e:	b252      	sxtb	r2, r2
   d4c10:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4c14:	b157      	cbz	r7, d4c2c <_ZN6I2Cdev8writeBitEhhhh+0x3c>
   d4c16:	4322      	orrs	r2, r4
   d4c18:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
   d4c1a:	4631      	mov	r1, r6
   d4c1c:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d4c1e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
   d4c22:	f7ff ffda 	bl	d4bda <_ZN6I2Cdev9writeByteEhhh>
}
   d4c26:	b002      	add	sp, #8
   d4c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d4c2c:	ea24 0202 	bic.w	r2, r4, r2
   d4c30:	e7f3      	b.n	d4c1a <_ZN6I2Cdev8writeBitEhhhh+0x2a>
   d4c32:	bf00      	nop
   d4c34:	2003e558 	.word	0x2003e558

000d4c38 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4c3a:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4c3c:	4b11      	ldr	r3, [pc, #68]	; (d4c84 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4c3e:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4c40:	881b      	ldrh	r3, [r3, #0]
   d4c42:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4c46:	4604      	mov	r4, r0
   d4c48:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4c4a:	f7ff ff9a 	bl	d4b82 <_ZN6I2Cdev8readByteEhhPht>
   d4c4e:	b1b8      	cbz	r0, d4c80 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4c50:	2201      	movs	r2, #1
   d4c52:	fa02 f307 	lsl.w	r3, r2, r7
   d4c56:	1bf1      	subs	r1, r6, r7
        data <<= (bitStart - length + 1); // shift data into correct position
   d4c58:	f89d 2020 	ldrb.w	r2, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4c5c:	3101      	adds	r1, #1
   d4c5e:	3b01      	subs	r3, #1
   d4c60:	408b      	lsls	r3, r1
        data <<= (bitStart - length + 1); // shift data into correct position
   d4c62:	fa02 f101 	lsl.w	r1, r2, r1
        b &= ~(mask); // zero all important bits in existing byte
   d4c66:	f89d 2007 	ldrb.w	r2, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
   d4c6a:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
   d4c6c:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
   d4c70:	400b      	ands	r3, r1
        b |= data; // combine data with existing byte
   d4c72:	431a      	orrs	r2, r3
        return writeByte(devAddr, regAddr, b);
   d4c74:	4629      	mov	r1, r5
   d4c76:	4620      	mov	r0, r4
        b |= data; // combine data with existing byte
   d4c78:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
   d4c7c:	f7ff ffad 	bl	d4bda <_ZN6I2Cdev9writeByteEhhh>
}
   d4c80:	b003      	add	sp, #12
   d4c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c84:	2003e558 	.word	0x2003e558

000d4c88 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c88:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c8a:	6803      	ldr	r3, [r0, #0]
   d4c8c:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4c8e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c90:	d904      	bls.n	d4c9c <nrf_gpio_pin_port_decode+0x14>
   d4c92:	4a07      	ldr	r2, [pc, #28]	; (d4cb0 <nrf_gpio_pin_port_decode+0x28>)
   d4c94:	2100      	movs	r1, #0
   d4c96:	200a      	movs	r0, #10
   d4c98:	f000 fc5c 	bl	d5554 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4c9c:	6823      	ldr	r3, [r4, #0]
   d4c9e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4ca0:	bf83      	ittte	hi
   d4ca2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4ca6:	4803      	ldrhi	r0, [pc, #12]	; (d4cb4 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4ca8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4caa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4cae:	bd10      	pop	{r4, pc}
   d4cb0:	000d5345 	.word	0x000d5345
   d4cb4:	50000300 	.word	0x50000300

000d4cb8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4cb8:	b507      	push	{r0, r1, r2, lr}
   d4cba:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4cbc:	a801      	add	r0, sp, #4
   d4cbe:	f7ff ffe3 	bl	d4c88 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4cc2:	9a01      	ldr	r2, [sp, #4]
   d4cc4:	2301      	movs	r3, #1
   d4cc6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4cc8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4ccc:	b003      	add	sp, #12
   d4cce:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cd2 <nrf_gpio_pin_read>:
{
   d4cd2:	b507      	push	{r0, r1, r2, lr}
   d4cd4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4cd6:	a801      	add	r0, sp, #4
   d4cd8:	f7ff ffd6 	bl	d4c88 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4cdc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4cde:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4ce2:	40d8      	lsrs	r0, r3
}
   d4ce4:	f000 0001 	and.w	r0, r0, #1
   d4ce8:	b003      	add	sp, #12
   d4cea:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cee <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4cee:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4cf0:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4cf2:	2301      	movs	r3, #1
	_pin = pin;
   d4cf4:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4cf6:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4cf8:	7403      	strb	r3, [r0, #16]
}
   d4cfa:	bd10      	pop	{r4, pc}

000d4cfc <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d00:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d02:	4c1e      	ldr	r4, [pc, #120]	; (d4d7c <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4d04:	7980      	ldrb	r0, [r0, #6]
   d4d06:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4d80 <_ZN3DHT5beginEv+0x84>
   d4d0a:	2100      	movs	r1, #0
   d4d0c:	f001 fed6 	bl	d6abc <pinMode>
	pinSetFast(_pin);
   d4d10:	79ae      	ldrb	r6, [r5, #6]
   d4d12:	7823      	ldrb	r3, [r4, #0]
   d4d14:	f3bf 8f5b 	dmb	ish
   d4d18:	f013 0f01 	tst.w	r3, #1
   d4d1c:	d10a      	bne.n	d4d34 <_ZN3DHT5beginEv+0x38>
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f7ff f9bd 	bl	d409e <__cxa_guard_acquire>
   d4d24:	b130      	cbz	r0, d4d34 <_ZN3DHT5beginEv+0x38>
   d4d26:	f000 faad 	bl	d5284 <HAL_Pin_Map>
   d4d2a:	f8c8 0000 	str.w	r0, [r8]
   d4d2e:	4620      	mov	r0, r4
   d4d30:	f7ff f9ba 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d34:	f8d8 3000 	ldr.w	r3, [r8]
   d4d38:	0136      	lsls	r6, r6, #4
   d4d3a:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d3c:	7823      	ldrb	r3, [r4, #0]
   d4d3e:	f3bf 8f5b 	dmb	ish
   d4d42:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d44:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d48:	d40a      	bmi.n	d4d60 <_ZN3DHT5beginEv+0x64>
   d4d4a:	480c      	ldr	r0, [pc, #48]	; (d4d7c <_ZN3DHT5beginEv+0x80>)
   d4d4c:	f7ff f9a7 	bl	d409e <__cxa_guard_acquire>
   d4d50:	b130      	cbz	r0, d4d60 <_ZN3DHT5beginEv+0x64>
   d4d52:	f000 fa97 	bl	d5284 <HAL_Pin_Map>
   d4d56:	f8c8 0000 	str.w	r0, [r8]
   d4d5a:	4808      	ldr	r0, [pc, #32]	; (d4d7c <_ZN3DHT5beginEv+0x80>)
   d4d5c:	f7ff f9a4 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d60:	f8d8 3000 	ldr.w	r3, [r8]
   d4d64:	4433      	add	r3, r6
   d4d66:	785b      	ldrb	r3, [r3, #1]
   d4d68:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4d6c:	ea43 0007 	orr.w	r0, r3, r7
   d4d70:	f7ff ffa2 	bl	d4cb8 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4d74:	2300      	movs	r3, #0
   d4d76:	60eb      	str	r3, [r5, #12]
}
   d4d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d7c:	2003e63c 	.word	0x2003e63c
   d4d80:	2003e640 	.word	0x2003e640

000d4d84 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d88:	4604      	mov	r4, r0
   d4d8a:	b085      	sub	sp, #20
   d4d8c:	f000 fae2 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4d90:	68e3      	ldr	r3, [r4, #12]
   d4d92:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4d94:	bf84      	itt	hi
   d4d96:	2300      	movhi	r3, #0
   d4d98:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4d9a:	7c23      	ldrb	r3, [r4, #16]
   d4d9c:	b92b      	cbnz	r3, d4daa <_ZN3DHT4readEv+0x26>
   d4d9e:	68e3      	ldr	r3, [r4, #12]
   d4da0:	1ac0      	subs	r0, r0, r3
   d4da2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4da6:	f0c0 8160 	bcc.w	d506a <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4daa:	2500      	movs	r5, #0
   d4dac:	7425      	strb	r5, [r4, #16]
   d4dae:	f000 fad1 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4db2:	4eb0      	ldr	r6, [pc, #704]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4db4:	6025      	str	r5, [r4, #0]
   d4db6:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4db8:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4dba:	79a7      	ldrb	r7, [r4, #6]
   d4dbc:	7833      	ldrb	r3, [r6, #0]
   d4dbe:	4dae      	ldr	r5, [pc, #696]	; (d5078 <_ZN3DHT4readEv+0x2f4>)
   d4dc0:	f3bf 8f5b 	dmb	ish
   d4dc4:	f013 0f01 	tst.w	r3, #1
   d4dc8:	d109      	bne.n	d4dde <_ZN3DHT4readEv+0x5a>
   d4dca:	4630      	mov	r0, r6
   d4dcc:	f7ff f967 	bl	d409e <__cxa_guard_acquire>
   d4dd0:	b128      	cbz	r0, d4dde <_ZN3DHT4readEv+0x5a>
   d4dd2:	f000 fa57 	bl	d5284 <HAL_Pin_Map>
   d4dd6:	6028      	str	r0, [r5, #0]
   d4dd8:	4630      	mov	r0, r6
   d4dda:	f7ff f965 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4dde:	682b      	ldr	r3, [r5, #0]
   d4de0:	013f      	lsls	r7, r7, #4
   d4de2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4de6:	7833      	ldrb	r3, [r6, #0]
   d4de8:	f3bf 8f5b 	dmb	ish
   d4dec:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4dee:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4df2:	d409      	bmi.n	d4e08 <_ZN3DHT4readEv+0x84>
   d4df4:	489f      	ldr	r0, [pc, #636]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4df6:	f7ff f952 	bl	d409e <__cxa_guard_acquire>
   d4dfa:	b128      	cbz	r0, d4e08 <_ZN3DHT4readEv+0x84>
   d4dfc:	f000 fa42 	bl	d5284 <HAL_Pin_Map>
   d4e00:	6028      	str	r0, [r5, #0]
   d4e02:	489c      	ldr	r0, [pc, #624]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4e04:	f7ff f950 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4e08:	682b      	ldr	r3, [r5, #0]
   d4e0a:	441f      	add	r7, r3
   d4e0c:	7878      	ldrb	r0, [r7, #1]
   d4e0e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4e12:	ea40 0008 	orr.w	r0, r0, r8
   d4e16:	f7ff ff4f 	bl	d4cb8 <nrf_gpio_pin_set>
	delay(250);
   d4e1a:	20fa      	movs	r0, #250	; 0xfa
   d4e1c:	f000 ffa0 	bl	d5d60 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4e20:	79a0      	ldrb	r0, [r4, #6]
   d4e22:	2101      	movs	r1, #1
   d4e24:	f001 fe4a 	bl	d6abc <pinMode>
	pinResetFast(_pin);
   d4e28:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4e2a:	7833      	ldrb	r3, [r6, #0]
   d4e2c:	f3bf 8f5b 	dmb	ish
   d4e30:	07da      	lsls	r2, r3, #31
   d4e32:	d409      	bmi.n	d4e48 <_ZN3DHT4readEv+0xc4>
   d4e34:	488f      	ldr	r0, [pc, #572]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4e36:	f7ff f932 	bl	d409e <__cxa_guard_acquire>
   d4e3a:	b128      	cbz	r0, d4e48 <_ZN3DHT4readEv+0xc4>
   d4e3c:	f000 fa22 	bl	d5284 <HAL_Pin_Map>
   d4e40:	6028      	str	r0, [r5, #0]
   d4e42:	488c      	ldr	r0, [pc, #560]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4e44:	f7ff f930 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4e48:	682b      	ldr	r3, [r5, #0]
   d4e4a:	013f      	lsls	r7, r7, #4
   d4e4c:	5ddb      	ldrb	r3, [r3, r7]
   d4e4e:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4e52:	7833      	ldrb	r3, [r6, #0]
   d4e54:	f3bf 8f5b 	dmb	ish
   d4e58:	07db      	lsls	r3, r3, #31
   d4e5a:	d409      	bmi.n	d4e70 <_ZN3DHT4readEv+0xec>
   d4e5c:	4885      	ldr	r0, [pc, #532]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4e5e:	f7ff f91e 	bl	d409e <__cxa_guard_acquire>
   d4e62:	b128      	cbz	r0, d4e70 <_ZN3DHT4readEv+0xec>
   d4e64:	f000 fa0e 	bl	d5284 <HAL_Pin_Map>
   d4e68:	6028      	str	r0, [r5, #0]
   d4e6a:	4882      	ldr	r0, [pc, #520]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4e6c:	f7ff f91c 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4e70:	682b      	ldr	r3, [r5, #0]
   d4e72:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4e74:	a803      	add	r0, sp, #12
   d4e76:	787b      	ldrb	r3, [r7, #1]
   d4e78:	f003 031f 	and.w	r3, r3, #31
   d4e7c:	ea43 0308 	orr.w	r3, r3, r8
   d4e80:	9303      	str	r3, [sp, #12]
   d4e82:	f7ff ff01 	bl	d4c88 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4e86:	9a03      	ldr	r2, [sp, #12]
   d4e88:	2301      	movs	r3, #1
   d4e8a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4e8c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4e90:	2014      	movs	r0, #20
   d4e92:	f000 ff65 	bl	d5d60 <delay>
	noInterrupts();
   d4e96:	f001 fbd3 	bl	d6640 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4e9a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4e9c:	7833      	ldrb	r3, [r6, #0]
   d4e9e:	f3bf 8f5b 	dmb	ish
   d4ea2:	07d8      	lsls	r0, r3, #31
   d4ea4:	d409      	bmi.n	d4eba <_ZN3DHT4readEv+0x136>
   d4ea6:	4873      	ldr	r0, [pc, #460]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4ea8:	f7ff f8f9 	bl	d409e <__cxa_guard_acquire>
   d4eac:	b128      	cbz	r0, d4eba <_ZN3DHT4readEv+0x136>
   d4eae:	f000 f9e9 	bl	d5284 <HAL_Pin_Map>
   d4eb2:	6028      	str	r0, [r5, #0]
   d4eb4:	486f      	ldr	r0, [pc, #444]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4eb6:	f7ff f8f7 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4eba:	682b      	ldr	r3, [r5, #0]
   d4ebc:	013f      	lsls	r7, r7, #4
   d4ebe:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ec2:	7833      	ldrb	r3, [r6, #0]
   d4ec4:	f3bf 8f5b 	dmb	ish
   d4ec8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4eca:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ece:	d409      	bmi.n	d4ee4 <_ZN3DHT4readEv+0x160>
   d4ed0:	4868      	ldr	r0, [pc, #416]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4ed2:	f7ff f8e4 	bl	d409e <__cxa_guard_acquire>
   d4ed6:	b128      	cbz	r0, d4ee4 <_ZN3DHT4readEv+0x160>
   d4ed8:	f000 f9d4 	bl	d5284 <HAL_Pin_Map>
   d4edc:	6028      	str	r0, [r5, #0]
   d4ede:	4865      	ldr	r0, [pc, #404]	; (d5074 <_ZN3DHT4readEv+0x2f0>)
   d4ee0:	f7ff f8e2 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ee4:	682b      	ldr	r3, [r5, #0]
   d4ee6:	441f      	add	r7, r3
   d4ee8:	7878      	ldrb	r0, [r7, #1]
   d4eea:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4eee:	ea40 0008 	orr.w	r0, r0, r8
   d4ef2:	f7ff fee1 	bl	d4cb8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ef6:	2028      	movs	r0, #40	; 0x28
   d4ef8:	f000 fa24 	bl	d5344 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4efc:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4efe:	f8df 8174 	ldr.w	r8, [pc, #372]	; d5074 <_ZN3DHT4readEv+0x2f0>
   d4f02:	2100      	movs	r1, #0
   d4f04:	f001 fdda 	bl	d6abc <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4f08:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4f0a:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4f0c:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4f0e:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4f10:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4f14:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4f18:	7833      	ldrb	r3, [r6, #0]
   d4f1a:	f3bf 8f5b 	dmb	ish
   d4f1e:	07da      	lsls	r2, r3, #31
   d4f20:	d409      	bmi.n	d4f36 <_ZN3DHT4readEv+0x1b2>
   d4f22:	4640      	mov	r0, r8
   d4f24:	f7ff f8bb 	bl	d409e <__cxa_guard_acquire>
   d4f28:	b128      	cbz	r0, d4f36 <_ZN3DHT4readEv+0x1b2>
   d4f2a:	f000 f9ab 	bl	d5284 <HAL_Pin_Map>
   d4f2e:	6028      	str	r0, [r5, #0]
   d4f30:	4640      	mov	r0, r8
   d4f32:	f7ff f8b9 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4f36:	682b      	ldr	r3, [r5, #0]
   d4f38:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4f3c:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4f40:	015b      	lsls	r3, r3, #5
   d4f42:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4f44:	7833      	ldrb	r3, [r6, #0]
   d4f46:	f3bf 8f5b 	dmb	ish
   d4f4a:	07db      	lsls	r3, r3, #31
   d4f4c:	d409      	bmi.n	d4f62 <_ZN3DHT4readEv+0x1de>
   d4f4e:	4640      	mov	r0, r8
   d4f50:	f7ff f8a5 	bl	d409e <__cxa_guard_acquire>
   d4f54:	b128      	cbz	r0, d4f62 <_ZN3DHT4readEv+0x1de>
   d4f56:	f000 f995 	bl	d5284 <HAL_Pin_Map>
   d4f5a:	6028      	str	r0, [r5, #0]
   d4f5c:	4640      	mov	r0, r8
   d4f5e:	f7ff f8a3 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4f62:	682b      	ldr	r3, [r5, #0]
   d4f64:	445b      	add	r3, fp
   d4f66:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4f6a:	9b01      	ldr	r3, [sp, #4]
   d4f6c:	f00b 0b1f 	and.w	fp, fp, #31
   d4f70:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4f74:	4658      	mov	r0, fp
   d4f76:	f7ff feac 	bl	d4cd2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4f7a:	4658      	mov	r0, fp
   d4f7c:	f7ff fea9 	bl	d4cd2 <nrf_gpio_pin_read>
   d4f80:	9b00      	ldr	r3, [sp, #0]
   d4f82:	4283      	cmp	r3, r0
   d4f84:	d109      	bne.n	d4f9a <_ZN3DHT4readEv+0x216>
			counter++;
   d4f86:	f109 0901 	add.w	r9, r9, #1
   d4f8a:	fa5f f989 	uxtb.w	r9, r9
   d4f8e:	2001      	movs	r0, #1
   d4f90:	f000 f9d8 	bl	d5344 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4f94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4f98:	d1bc      	bne.n	d4f14 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4f9a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4f9e:	7833      	ldrb	r3, [r6, #0]
   d4fa0:	f3bf 8f5b 	dmb	ish
   d4fa4:	07d8      	lsls	r0, r3, #31
   d4fa6:	d409      	bmi.n	d4fbc <_ZN3DHT4readEv+0x238>
   d4fa8:	4640      	mov	r0, r8
   d4faa:	f7ff f878 	bl	d409e <__cxa_guard_acquire>
   d4fae:	b128      	cbz	r0, d4fbc <_ZN3DHT4readEv+0x238>
   d4fb0:	f000 f968 	bl	d5284 <HAL_Pin_Map>
   d4fb4:	6028      	str	r0, [r5, #0]
   d4fb6:	4640      	mov	r0, r8
   d4fb8:	f7ff f876 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4fbc:	682b      	ldr	r3, [r5, #0]
   d4fbe:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4fc2:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4fc6:	015b      	lsls	r3, r3, #5
   d4fc8:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4fca:	7833      	ldrb	r3, [r6, #0]
   d4fcc:	f3bf 8f5b 	dmb	ish
   d4fd0:	07d9      	lsls	r1, r3, #31
   d4fd2:	d409      	bmi.n	d4fe8 <_ZN3DHT4readEv+0x264>
   d4fd4:	4640      	mov	r0, r8
   d4fd6:	f7ff f862 	bl	d409e <__cxa_guard_acquire>
   d4fda:	b128      	cbz	r0, d4fe8 <_ZN3DHT4readEv+0x264>
   d4fdc:	f000 f952 	bl	d5284 <HAL_Pin_Map>
   d4fe0:	6028      	str	r0, [r5, #0]
   d4fe2:	4640      	mov	r0, r8
   d4fe4:	f7ff f860 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4fe8:	682b      	ldr	r3, [r5, #0]
   d4fea:	445b      	add	r3, fp
   d4fec:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4ff0:	9b00      	ldr	r3, [sp, #0]
   d4ff2:	f00b 0b1f 	and.w	fp, fp, #31
   d4ff6:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4ffa:	4658      	mov	r0, fp
   d4ffc:	f7ff fe69 	bl	d4cd2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d5000:	4658      	mov	r0, fp
   d5002:	f7ff fe66 	bl	d4cd2 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d5006:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d500a:	b2c3      	uxtb	r3, r0
   d500c:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d500e:	d018      	beq.n	d5042 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d5010:	2f03      	cmp	r7, #3
   d5012:	d911      	bls.n	d5038 <_ZN3DHT4readEv+0x2b4>
   d5014:	07fa      	lsls	r2, r7, #31
   d5016:	d40f      	bmi.n	d5038 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d5018:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d501c:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d5020:	5ca3      	ldrb	r3, [r4, r2]
   d5022:	005b      	lsls	r3, r3, #1
   d5024:	b2db      	uxtb	r3, r3
   d5026:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d5028:	7a21      	ldrb	r1, [r4, #8]
   d502a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d502c:	bf3c      	itt	cc
   d502e:	f043 0301 	orrcc.w	r3, r3, #1
   d5032:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d5034:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d5038:	3701      	adds	r7, #1
   d503a:	b2ff      	uxtb	r7, r7
   d503c:	2f55      	cmp	r7, #85	; 0x55
   d503e:	f47f af67 	bne.w	d4f10 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d5042:	f001 faff 	bl	d6644 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d5046:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d504a:	d910      	bls.n	d506e <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d504c:	7863      	ldrb	r3, [r4, #1]
   d504e:	7820      	ldrb	r0, [r4, #0]
   d5050:	4418      	add	r0, r3
   d5052:	78a3      	ldrb	r3, [r4, #2]
   d5054:	4418      	add	r0, r3
   d5056:	78e3      	ldrb	r3, [r4, #3]
   d5058:	4418      	add	r0, r3
   d505a:	7923      	ldrb	r3, [r4, #4]
   d505c:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d505e:	1ac3      	subs	r3, r0, r3
   d5060:	4258      	negs	r0, r3
   d5062:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d5064:	b005      	add	sp, #20
   d5066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d506a:	2001      	movs	r0, #1
   d506c:	e7fa      	b.n	d5064 <_ZN3DHT4readEv+0x2e0>
	return false;
   d506e:	2000      	movs	r0, #0
   d5070:	e7f8      	b.n	d5064 <_ZN3DHT4readEv+0x2e0>
   d5072:	bf00      	nop
   d5074:	2003e63c 	.word	0x2003e63c
   d5078:	2003e640 	.word	0x2003e640

000d507c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
	if (read()) {
   d5080:	f7ff fe80 	bl	d4d84 <_ZN3DHT4readEv>
   d5084:	b320      	cbz	r0, d50d0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d5086:	79e3      	ldrb	r3, [r4, #7]
   d5088:	2b0b      	cmp	r3, #11
   d508a:	d01b      	beq.n	d50c4 <_ZN3DHT15readTemperatureEv+0x48>
   d508c:	3b15      	subs	r3, #21
   d508e:	2b01      	cmp	r3, #1
   d5090:	d81e      	bhi.n	d50d0 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d5092:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d5094:	eddf 6a10 	vldr	s13, [pc, #64]	; d50d8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d5098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d509c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d50a0:	78e2      	ldrb	r2, [r4, #3]
   d50a2:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d50a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d50aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d50ae:	061b      	lsls	r3, r3, #24
				f += data[3];
   d50b0:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d50b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d50b8:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d50bc:	d507      	bpl.n	d50ce <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d50be:	eeb1 0a40 	vneg.f32	s0, s0
   d50c2:	e004      	b.n	d50ce <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d50c4:	78a3      	ldrb	r3, [r4, #2]
   d50c6:	ee00 3a10 	vmov	s0, r3
   d50ca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d50ce:	bd10      	pop	{r4, pc}
		switch (_type) {
   d50d0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d50dc <_ZN3DHT15readTemperatureEv+0x60>
   d50d4:	e7fb      	b.n	d50ce <_ZN3DHT15readTemperatureEv+0x52>
   d50d6:	bf00      	nop
   d50d8:	43800000 	.word	0x43800000
   d50dc:	7fc00000 	.word	0x7fc00000

000d50e0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d50e0:	f7ff bfcc 	b.w	d507c <_ZN3DHT15readTemperatureEv>

000d50e4 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d50e4:	b510      	push	{r4, lr}
   d50e6:	4604      	mov	r4, r0
	if (read()) {
   d50e8:	f7ff fe4c 	bl	d4d84 <_ZN3DHT4readEv>
   d50ec:	b1f0      	cbz	r0, d512c <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d50ee:	79e3      	ldrb	r3, [r4, #7]
   d50f0:	2b0b      	cmp	r3, #11
   d50f2:	d015      	beq.n	d5120 <_ZN3DHT12readHumidityEv+0x3c>
   d50f4:	3b15      	subs	r3, #21
   d50f6:	2b01      	cmp	r3, #1
   d50f8:	d818      	bhi.n	d512c <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d50fa:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d50fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; d5134 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d5100:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d5104:	7863      	ldrb	r3, [r4, #1]
   d5106:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d510a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d510e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5112:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d5116:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d511a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d511e:	bd10      	pop	{r4, pc}
				f = data[0];
   d5120:	7823      	ldrb	r3, [r4, #0]
   d5122:	ee00 3a10 	vmov	s0, r3
   d5126:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d512a:	e7f8      	b.n	d511e <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d512c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5138 <_ZN3DHT12readHumidityEv+0x54>
   d5130:	e7f5      	b.n	d511e <_ZN3DHT12readHumidityEv+0x3a>
   d5132:	bf00      	nop
   d5134:	43800000 	.word	0x43800000
   d5138:	7fc00000 	.word	0x7fc00000

000d513c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d513c:	f7ff bfd2 	b.w	d50e4 <_ZN3DHT12readHumidityEv>

000d5140 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5140:	6803      	ldr	r3, [r0, #0]
   d5142:	b2c9      	uxtb	r1, r1
   d5144:	689b      	ldr	r3, [r3, #8]
   d5146:	4718      	bx	r3

000d5148 <_ZN15Adafruit_INA21917wireWriteRegisterEht>:
/*! 
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireWriteRegister (uint8_t reg, uint16_t value)
{
   d5148:	b570      	push	{r4, r5, r6, lr}
   d514a:	4606      	mov	r6, r0
   d514c:	4614      	mov	r4, r2
   d514e:	460d      	mov	r5, r1
  Wire.beginTransmission(ina219_i2caddr);
   d5150:	f001 fd1c 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d5154:	7831      	ldrb	r1, [r6, #0]
   d5156:	f001 fb79 	bl	d684c <_ZN7TwoWire17beginTransmissionEh>
  #if defined (SPARK)
      Wire.write(reg);                       // Register
   d515a:	f001 fd17 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d515e:	6803      	ldr	r3, [r0, #0]
   d5160:	4629      	mov	r1, r5
   d5162:	689b      	ldr	r3, [r3, #8]
   d5164:	4798      	blx	r3
      Wire.write((value >> 8) & 0xFF);       // Upper 8-bits
   d5166:	f001 fd11 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d516a:	0a21      	lsrs	r1, r4, #8
   d516c:	f7ff ffe8 	bl	d5140 <_ZN7TwoWire5writeEi>
      Wire.write(value & 0xFF);              // Lower 8-bits
   d5170:	f001 fd0c 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d5174:	b2e1      	uxtb	r1, r4
   d5176:	f7ff ffe3 	bl	d5140 <_ZN7TwoWire5writeEi>
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d517a:	f001 fd07 	bl	d6b8c <_Z19__fetch_global_Wirev>
}
   d517e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d5182:	f001 bb6b 	b.w	d685c <_ZN7TwoWire15endTransmissionEv>

000d5186 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>:
/*! 
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value)
{
   d5186:	b570      	push	{r4, r5, r6, lr}
   d5188:	4604      	mov	r4, r0
   d518a:	4615      	mov	r5, r2
   d518c:	460e      	mov	r6, r1

  Wire.beginTransmission(ina219_i2caddr);
   d518e:	f001 fcfd 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d5192:	7821      	ldrb	r1, [r4, #0]
   d5194:	f001 fb5a 	bl	d684c <_ZN7TwoWire17beginTransmissionEh>
    #if defined (SPARK)
      Wire.write(reg);
   d5198:	f001 fcf8 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d519c:	6803      	ldr	r3, [r0, #0]
   d519e:	4631      	mov	r1, r6
   d51a0:	689b      	ldr	r3, [r3, #8]
   d51a2:	4798      	blx	r3
        Wire.write(reg);                       // Register
      #else
        Wire.send(reg);                        // Register
      #endif
    #endif
  Wire.endTransmission();
   d51a4:	f001 fcf2 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d51a8:	f001 fb58 	bl	d685c <_ZN7TwoWire15endTransmissionEv>
  
  delay(1); // Max 12-bit conversion time is 586us per sample
   d51ac:	2001      	movs	r0, #1
   d51ae:	f000 fdd7 	bl	d5d60 <delay>

  Wire.requestFrom(ina219_i2caddr, (uint8_t)2);  
   d51b2:	f001 fceb 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d51b6:	7821      	ldrb	r1, [r4, #0]
   d51b8:	2202      	movs	r2, #2
   d51ba:	f001 fb44 	bl	d6846 <_ZN7TwoWire11requestFromEhj>
  #if defined (SPARK)
      *value = ((Wire.read() << 8) | Wire.read());
   d51be:	f001 fce5 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d51c2:	6803      	ldr	r3, [r0, #0]
   d51c4:	695b      	ldr	r3, [r3, #20]
   d51c6:	4798      	blx	r3
   d51c8:	4604      	mov	r4, r0
   d51ca:	f001 fcdf 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d51ce:	6803      	ldr	r3, [r0, #0]
   d51d0:	695b      	ldr	r3, [r3, #20]
   d51d2:	4798      	blx	r3
   d51d4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d51d8:	8028      	strh	r0, [r5, #0]
    #else
      // Shift values to create properly formed integer
      *value = ((Wire.receive() << 8) | Wire.receive());
    #endif
  #endif
}
   d51da:	bd70      	pop	{r4, r5, r6, pc}

000d51dc <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d51dc:	b510      	push	{r4, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d51de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d51e2:	230a      	movs	r3, #10
   d51e4:	e9c0 2301 	strd	r2, r3, [r0, #4]
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d51e8:	2302      	movs	r3, #2
{
   d51ea:	4604      	mov	r4, r0
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d51ec:	60c3      	str	r3, [r0, #12]

  // Set Calibration register to 'Cal' calculated above	
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d51ee:	2105      	movs	r1, #5
   d51f0:	f7ff ffaa 	bl	d5148 <_ZN15Adafruit_INA21917wireWriteRegisterEht>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d51f4:	4620      	mov	r0, r4
   d51f6:	f643 421f 	movw	r2, #15391	; 0x3c1f
}
   d51fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  wireWriteRegister(INA219_REG_CONFIG, config);
   d51fe:	2100      	movs	r1, #0
   d5200:	f7ff bfa2 	b.w	d5148 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

000d5204 <_ZN15Adafruit_INA219C1Eh>:
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d5204:	2200      	movs	r2, #0
  ina219_powerDivider_mW = 0;
   d5206:	e9c0 2202 	strd	r2, r2, [r0, #8]
  ina219_i2caddr = addr;
   d520a:	7001      	strb	r1, [r0, #0]
}
   d520c:	4770      	bx	lr

000d520e <_ZN15Adafruit_INA2195beginEv>:
void Adafruit_INA219::begin(uint8_t addr) {
  ina219_i2caddr = addr;
  begin();
}

void Adafruit_INA219::begin(void) {
   d520e:	b510      	push	{r4, lr}
   d5210:	4604      	mov	r4, r0
  Wire.begin();    
   d5212:	f001 fcbb 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d5216:	f001 fae7 	bl	d67e8 <_ZN7TwoWire5beginEv>
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d521a:	4620      	mov	r0, r4
}
   d521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setCalibration_32V_2A();
   d5220:	f7ff bfdc 	b.w	d51dc <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>

000d5224 <_ZN15Adafruit_INA21914getCurrent_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getCurrent_raw() {
   d5224:	b513      	push	{r0, r1, r4, lr}
   d5226:	4604      	mov	r4, r0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d5228:	8882      	ldrh	r2, [r0, #4]
   d522a:	2105      	movs	r1, #5
   d522c:	f7ff ff8c 	bl	d5148 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
   d5230:	4620      	mov	r0, r4
   d5232:	f10d 0206 	add.w	r2, sp, #6
   d5236:	2104      	movs	r1, #4
   d5238:	f7ff ffa5 	bl	d5186 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>
  
  return (int16_t)value;
}
   d523c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   d5240:	b002      	add	sp, #8
   d5242:	bd10      	pop	{r4, pc}

000d5244 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*! 
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d5248:	f7ff ffec 	bl	d5224 <_ZN15Adafruit_INA21914getCurrent_rawEv>
   d524c:	ee07 0a90 	vmov	s15, r0
   d5250:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   d5254:	edd4 7a02 	vldr	s15, [r4, #8]
   d5258:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   d525c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5260:	bd10      	pop	{r4, pc}
	...

000d5264 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <netdb_freeaddrinfo+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	689b      	ldr	r3, [r3, #8]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030268 	.word	0x00030268

000d5274 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <netdb_getaddrinfo+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	68db      	ldr	r3, [r3, #12]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030268 	.word	0x00030268

000d5284 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_Pin_Map+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	681b      	ldr	r3, [r3, #0]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003022c 	.word	0x0003022c

000d5294 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_Validate_Pin_Function+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	685b      	ldr	r3, [r3, #4]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003022c 	.word	0x0003022c

000d52a4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_Pin_Mode+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	689b      	ldr	r3, [r3, #8]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003022c 	.word	0x0003022c

000d52b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_Get_Pin_Mode+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	68db      	ldr	r3, [r3, #12]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003022c 	.word	0x0003022c

000d52c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_GPIO_Write+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	691b      	ldr	r3, [r3, #16]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003022c 	.word	0x0003022c

000d52d4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <HAL_Interrupts_Attach+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	699b      	ldr	r3, [r3, #24]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003022c 	.word	0x0003022c

000d52e4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <HAL_Interrupts_Detach+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	69db      	ldr	r3, [r3, #28]
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	0003022c 	.word	0x0003022c

000d52f4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <HAL_Interrupts_Enable_All+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6a1b      	ldr	r3, [r3, #32]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	0003022c 	.word	0x0003022c

000d5304 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <HAL_Interrupts_Disable_All+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	0003022c 	.word	0x0003022c

000d5314 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <HAL_DAC_Write+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	0003022c 	.word	0x0003022c

000d5324 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <hal_pwm_write_ext+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	0003022c 	.word	0x0003022c

000d5334 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <HAL_RNG_GetRandomNumber+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	685b      	ldr	r3, [r3, #4]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030218 	.word	0x00030218

000d5344 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <HAL_Delay_Microseconds+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	68db      	ldr	r3, [r3, #12]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030218 	.word	0x00030218

000d5354 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	695b      	ldr	r3, [r3, #20]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030218 	.word	0x00030218

000d5364 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <os_mutex_recursive_create+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030248 	.word	0x00030248

000d5374 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <os_mutex_recursive_destroy+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030248 	.word	0x00030248

000d5384 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <inet_inet_ntop+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	695b      	ldr	r3, [r3, #20]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030264 	.word	0x00030264

000d5394 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <hal_usart_init+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	681b      	ldr	r3, [r3, #0]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	0003023c 	.word	0x0003023c

000d53a4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <hal_usart_write+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	68db      	ldr	r3, [r3, #12]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	0003023c 	.word	0x0003023c

000d53b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <hal_usart_available+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	691b      	ldr	r3, [r3, #16]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003023c 	.word	0x0003023c

000d53c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <hal_usart_read+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	695b      	ldr	r3, [r3, #20]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003023c 	.word	0x0003023c

000d53d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <hal_usart_peek+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	699b      	ldr	r3, [r3, #24]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003023c 	.word	0x0003023c

000d53e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <hal_usart_flush+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	69db      	ldr	r3, [r3, #28]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003023c 	.word	0x0003023c

000d53f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <hal_usart_is_enabled+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	6a1b      	ldr	r3, [r3, #32]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	0003023c 	.word	0x0003023c

000d5404 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <hal_usart_available_data_for_write+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	0003023c 	.word	0x0003023c

000d5414 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <hal_i2c_begin+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	68db      	ldr	r3, [r3, #12]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030228 	.word	0x00030228

000d5424 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <hal_i2c_begin_transmission+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	699b      	ldr	r3, [r3, #24]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030228 	.word	0x00030228

000d5434 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <hal_i2c_end_transmission+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	69db      	ldr	r3, [r3, #28]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030228 	.word	0x00030228

000d5444 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <hal_i2c_write+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6a1b      	ldr	r3, [r3, #32]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030228 	.word	0x00030228

000d5454 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <hal_i2c_available+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030228 	.word	0x00030228

000d5464 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <hal_i2c_read+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030228 	.word	0x00030228

000d5474 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <hal_i2c_peek+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030228 	.word	0x00030228

000d5484 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <hal_i2c_flush+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030228 	.word	0x00030228

000d5494 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <hal_i2c_is_enabled+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030228 	.word	0x00030228

000d54a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <hal_i2c_init+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030228 	.word	0x00030228

000d54b4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <hal_i2c_request_ex+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030228 	.word	0x00030228

000d54c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <hal_spi_init+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	69db      	ldr	r3, [r3, #28]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030230 	.word	0x00030230

000d54d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <hal_spi_is_enabled+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6a1b      	ldr	r3, [r3, #32]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030230 	.word	0x00030230

000d54e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_USB_USART_Init+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	681b      	ldr	r3, [r3, #0]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	0003024c 	.word	0x0003024c

000d54f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_USB_USART_Begin+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	685b      	ldr	r3, [r3, #4]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	0003024c 	.word	0x0003024c

000d5504 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_USB_USART_Available_Data+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	691b      	ldr	r3, [r3, #16]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	0003024c 	.word	0x0003024c

000d5514 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	695b      	ldr	r3, [r3, #20]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003024c 	.word	0x0003024c

000d5524 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <HAL_USB_USART_Receive_Data+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	699b      	ldr	r3, [r3, #24]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	0003024c 	.word	0x0003024c

000d5534 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_USB_USART_Send_Data+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	69db      	ldr	r3, [r3, #28]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003024c 	.word	0x0003024c

000d5544 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_USB_USART_Flush_Data+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6a1b      	ldr	r3, [r3, #32]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003024c 	.word	0x0003024c

000d5554 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <panic_+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030260 	.word	0x00030260

000d5564 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <set_system_mode+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	685b      	ldr	r3, [r3, #4]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030220 	.word	0x00030220

000d5574 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <system_delay_ms+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	695b      	ldr	r3, [r3, #20]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030220 	.word	0x00030220

000d5584 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <application_thread_current+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030220 	.word	0x00030220

000d5594 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <application_thread_invoke+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030220 	.word	0x00030220

000d55a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b03      	ldr	r3, [pc, #12]	; (d55b4 <system_ctrl_set_app_request_handler+0x10>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55ae:	9301      	str	r3, [sp, #4]
   d55b0:	bd08      	pop	{r3, pc}
   d55b2:	0000      	.short	0x0000
   d55b4:	00030220 	.word	0x00030220

000d55b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b03      	ldr	r3, [pc, #12]	; (d55c8 <system_ctrl_set_result+0x10>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55c2:	9301      	str	r3, [sp, #4]
   d55c4:	bd08      	pop	{r3, pc}
   d55c6:	0000      	.short	0x0000
   d55c8:	00030220 	.word	0x00030220

000d55cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <network_connect+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	685b      	ldr	r3, [r3, #4]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030240 	.word	0x00030240

000d55dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <network_connecting+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	689b      	ldr	r3, [r3, #8]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030240 	.word	0x00030240

000d55ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <network_disconnect+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	68db      	ldr	r3, [r3, #12]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030240 	.word	0x00030240

000d55fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <network_ready+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	691b      	ldr	r3, [r3, #16]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030240 	.word	0x00030240

000d560c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <network_on+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	695b      	ldr	r3, [r3, #20]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030240 	.word	0x00030240

000d561c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <network_off+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	699b      	ldr	r3, [r3, #24]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030240 	.word	0x00030240

000d562c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <network_listen+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	69db      	ldr	r3, [r3, #28]
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030240 	.word	0x00030240

000d563c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <network_listening+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	6a1b      	ldr	r3, [r3, #32]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030240 	.word	0x00030240

000d564c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <network_set_listen_timeout+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030240 	.word	0x00030240

000d565c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <network_get_listen_timeout+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030240 	.word	0x00030240

000d566c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <network_is_on+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030240 	.word	0x00030240

000d567c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <network_is_off+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030240 	.word	0x00030240

000d568c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <spark_variable+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	681b      	ldr	r3, [r3, #0]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030244 	.word	0x00030244

000d569c <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <spark_cloud_flag_connected+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	695b      	ldr	r3, [r3, #20]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030244 	.word	0x00030244

000d56ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <spark_send_event+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	6a1b      	ldr	r3, [r3, #32]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030244 	.word	0x00030244

000d56bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030244 	.word	0x00030244

000d56cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <malloc+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	681b      	ldr	r3, [r3, #0]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	0003021c 	.word	0x0003021c

000d56dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <free+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	685b      	ldr	r3, [r3, #4]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	0003021c 	.word	0x0003021c

000d56ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <realloc+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	689b      	ldr	r3, [r3, #8]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	0003021c 	.word	0x0003021c

000d56fc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <abort+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	0003021c 	.word	0x0003021c

000d570c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <_malloc_r+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	0003021c 	.word	0x0003021c

000d571c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <newlib_impure_ptr_callback+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	0003021c 	.word	0x0003021c

000d572c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d572c:	2200      	movs	r2, #0
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	4611      	mov	r1, r2
   d5732:	f7ff bf83 	b.w	d563c <network_listening>

000d5736 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5736:	2200      	movs	r2, #0
   d5738:	6840      	ldr	r0, [r0, #4]
   d573a:	4611      	mov	r1, r2
   d573c:	f7ff bf8e 	b.w	d565c <network_get_listen_timeout>

000d5740 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	2200      	movs	r2, #0
   d5744:	f7ff bf82 	b.w	d564c <network_set_listen_timeout>

000d5748 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5748:	6840      	ldr	r0, [r0, #4]
   d574a:	2200      	movs	r2, #0
   d574c:	f081 0101 	eor.w	r1, r1, #1
   d5750:	f7ff bf6c 	b.w	d562c <network_listen>

000d5754 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5754:	2300      	movs	r3, #0
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	461a      	mov	r2, r3
   d575a:	4619      	mov	r1, r3
   d575c:	f7ff bf5e 	b.w	d561c <network_off>

000d5760 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5760:	2300      	movs	r3, #0
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	461a      	mov	r2, r3
   d5766:	4619      	mov	r1, r3
   d5768:	f7ff bf50 	b.w	d560c <network_on>

000d576c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d576c:	2200      	movs	r2, #0
   d576e:	6840      	ldr	r0, [r0, #4]
   d5770:	4611      	mov	r1, r2
   d5772:	f7ff bf43 	b.w	d55fc <network_ready>

000d5776 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5776:	2200      	movs	r2, #0
   d5778:	6840      	ldr	r0, [r0, #4]
   d577a:	4611      	mov	r1, r2
   d577c:	f7ff bf2e 	b.w	d55dc <network_connecting>

000d5780 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	2200      	movs	r2, #0
   d5784:	2102      	movs	r1, #2
   d5786:	f7ff bf31 	b.w	d55ec <network_disconnect>

000d578a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d578a:	2300      	movs	r3, #0
   d578c:	6840      	ldr	r0, [r0, #4]
   d578e:	461a      	mov	r2, r3
   d5790:	f7ff bf1c 	b.w	d55cc <network_connect>

000d5794 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5794:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5796:	2203      	movs	r2, #3
   d5798:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d579a:	4a02      	ldr	r2, [pc, #8]	; (d57a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d579c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d579e:	4770      	bx	lr
   d57a0:	2003e644 	.word	0x2003e644
   d57a4:	000d7b40 	.word	0x000d7b40

000d57a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d57a8:	b510      	push	{r4, lr}
   d57aa:	4604      	mov	r4, r0
   d57ac:	4608      	mov	r0, r1
{
    _spi = spi;
   d57ae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d57b0:	f7ff fe88 	bl	d54c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d57b4:	2300      	movs	r3, #0
   d57b6:	6063      	str	r3, [r4, #4]
}
   d57b8:	4620      	mov	r0, r4
   d57ba:	bd10      	pop	{r4, pc}

000d57bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d57bc:	b510      	push	{r4, lr}
   d57be:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d57c0:	6800      	ldr	r0, [r0, #0]
   d57c2:	b118      	cbz	r0, d57cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d57c4:	f7ff ff8a 	bl	d56dc <free>
            wakeupSource_ = nullptr;
   d57c8:	2300      	movs	r3, #0
   d57ca:	6023      	str	r3, [r4, #0]
        }
    }
   d57cc:	bd10      	pop	{r4, pc}

000d57ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d57ce:	b510      	push	{r4, lr}
   d57d0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d57d2:	f7ff fff3 	bl	d57bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d57d6:	4620      	mov	r0, r4
   d57d8:	bd10      	pop	{r4, pc}
	...

000d57dc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d57dc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d57de:	4b09      	ldr	r3, [pc, #36]	; (d5804 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d57e0:	4c09      	ldr	r4, [pc, #36]	; (d5808 <_GLOBAL__sub_I_System+0x2c>)
   d57e2:	2202      	movs	r2, #2
   d57e4:	2000      	movs	r0, #0
   d57e6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d57e8:	4b08      	ldr	r3, [pc, #32]	; (d580c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d57ea:	6020      	str	r0, [r4, #0]
   d57ec:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d57ee:	71a0      	strb	r0, [r4, #6]
   d57f0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57f2:	f7ff feb7 	bl	d5564 <set_system_mode>
SystemClass System;
   d57f6:	4620      	mov	r0, r4
   d57f8:	4a05      	ldr	r2, [pc, #20]	; (d5810 <_GLOBAL__sub_I_System+0x34>)
   d57fa:	4906      	ldr	r1, [pc, #24]	; (d5814 <_GLOBAL__sub_I_System+0x38>)
   d57fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5800:	f001 b9ec 	b.w	d6bdc <__aeabi_atexit>
   d5804:	2003e658 	.word	0x2003e658
   d5808:	2003e64c 	.word	0x2003e64c
   d580c:	ffff0000 	.word	0xffff0000
   d5810:	2003e5c4 	.word	0x2003e5c4
   d5814:	000d57cf 	.word	0x000d57cf

000d5818 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5818:	b510      	push	{r4, lr}
   d581a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d581c:	f002 f89d 	bl	d795a <strlen>
   d5820:	3801      	subs	r0, #1
   d5822:	1823      	adds	r3, r4, r0
   d5824:	4620      	mov	r0, r4
	while(i<j){
   d5826:	4283      	cmp	r3, r0
   d5828:	d906      	bls.n	d5838 <_Z11str_reversePc+0x20>
		c = *i;
   d582a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d582c:	7819      	ldrb	r1, [r3, #0]
   d582e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5832:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5836:	e7f6      	b.n	d5826 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5838:	bd10      	pop	{r4, pc}

000d583a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d583a:	b570      	push	{r4, r5, r6, lr}
   d583c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d583e:	1e91      	subs	r1, r2, #2
   d5840:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5842:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5844:	d822      	bhi.n	d588c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5846:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5848:	b16d      	cbz	r5, d5866 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d584a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d584e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5852:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5854:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5856:	bf94      	ite	ls
   d5858:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d585a:	3157      	addhi	r1, #87	; 0x57
   d585c:	b2c9      	uxtb	r1, r1
   d585e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5862:	4635      	mov	r5, r6
	while(a){
   d5864:	e7f0      	b.n	d5848 <ultoa+0xe>
   d5866:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5868:	4423      	add	r3, r4
            *ptr++ = '0';
   d586a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d586c:	4293      	cmp	r3, r2
   d586e:	d902      	bls.n	d5876 <ultoa+0x3c>
            *ptr++ = '0';
   d5870:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5874:	e7fa      	b.n	d586c <ultoa+0x32>
   d5876:	1a1a      	subs	r2, r3, r0
   d5878:	4283      	cmp	r3, r0
   d587a:	bf38      	it	cc
   d587c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d587e:	2300      	movs	r3, #0
   d5880:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5882:	4620      	mov	r0, r4
   d5884:	f7ff ffc8 	bl	d5818 <_Z11str_reversePc>
	return buffer;
   d5888:	4620      	mov	r0, r4
}
   d588a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d588c:	2000      	movs	r0, #0
   d588e:	e7fc      	b.n	d588a <ultoa+0x50>

000d5890 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5894:	ec57 6b10 	vmov	r6, r7, d0
   d5898:	4680      	mov	r8, r0
   d589a:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d589c:	ee10 0a10 	vmov	r0, s0
   d58a0:	2200      	movs	r2, #0
   d58a2:	2300      	movs	r3, #0
   d58a4:	4639      	mov	r1, r7
   d58a6:	f001 fdd3 	bl	d7450 <__aeabi_dcmplt>
   d58aa:	b128      	cbz	r0, d58b8 <_Z4dtoadhPc+0x28>
        val = -val;
   d58ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d58b0:	461f      	mov	r7, r3
        *sout++ = '-';
   d58b2:	232d      	movs	r3, #45	; 0x2d
   d58b4:	f804 3b01 	strb.w	r3, [r4], #1
   d58b8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d58ba:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d58be:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d58c0:	b2d9      	uxtb	r1, r3
   d58c2:	4588      	cmp	r8, r1
   d58c4:	d903      	bls.n	d58ce <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d58c6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d58ca:	3301      	adds	r3, #1
   d58cc:	e7f8      	b.n	d58c0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d58ce:	4648      	mov	r0, r9
   d58d0:	f001 fae2 	bl	d6e98 <__aeabi_i2d>
   d58d4:	4632      	mov	r2, r6
   d58d6:	463b      	mov	r3, r7
   d58d8:	f001 fb48 	bl	d6f6c <__aeabi_dmul>
   d58dc:	4606      	mov	r6, r0
   d58de:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d58e0:	f001 fe54 	bl	d758c <__aeabi_d2ulz>
   d58e4:	4605      	mov	r5, r0
   d58e6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d58e8:	f001 fb0a 	bl	d6f00 <__aeabi_ul2d>
   d58ec:	4602      	mov	r2, r0
   d58ee:	460b      	mov	r3, r1
   d58f0:	4630      	mov	r0, r6
   d58f2:	4639      	mov	r1, r7
   d58f4:	f001 f982 	bl	d6bfc <__aeabi_dsub>
   d58f8:	4b13      	ldr	r3, [pc, #76]	; (d5948 <_Z4dtoadhPc+0xb8>)
   d58fa:	2200      	movs	r2, #0
   d58fc:	f001 fdbc 	bl	d7478 <__aeabi_dcmpge>
   d5900:	b110      	cbz	r0, d5908 <_Z4dtoadhPc+0x78>
        fixed++;
   d5902:	3501      	adds	r5, #1
   d5904:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5908:	464a      	mov	r2, r9
   d590a:	4628      	mov	r0, r5
   d590c:	17d3      	asrs	r3, r2, #31
   d590e:	4651      	mov	r1, sl
   d5910:	f001 fe24 	bl	d755c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5914:	2301      	movs	r3, #1
   d5916:	4615      	mov	r5, r2
   d5918:	4621      	mov	r1, r4
   d591a:	220a      	movs	r2, #10
   d591c:	f7ff ff8d 	bl	d583a <ultoa>
    if (prec) {
   d5920:	f1b8 0f00 	cmp.w	r8, #0
   d5924:	d00d      	beq.n	d5942 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5926:	4620      	mov	r0, r4
   d5928:	f002 f817 	bl	d795a <strlen>
        *sout++ = '.';
   d592c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d592e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5930:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5932:	220a      	movs	r2, #10
   d5934:	4643      	mov	r3, r8
   d5936:	4628      	mov	r0, r5
   d5938:	3101      	adds	r1, #1
    }
}
   d593a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d593e:	f7ff bf7c 	b.w	d583a <ultoa>
}
   d5942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5946:	bf00      	nop
   d5948:	3fe00000 	.word	0x3fe00000

000d594c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d594c:	b510      	push	{r4, lr}
   d594e:	4604      	mov	r4, r0
{
	free(buffer);
   d5950:	6800      	ldr	r0, [r0, #0]
   d5952:	f7ff fec3 	bl	d56dc <free>
}
   d5956:	4620      	mov	r0, r4
   d5958:	bd10      	pop	{r4, pc}

000d595a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d595a:	b510      	push	{r4, lr}
   d595c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d595e:	6800      	ldr	r0, [r0, #0]
   d5960:	b108      	cbz	r0, d5966 <_ZN6String10invalidateEv+0xc>
   d5962:	f7ff febb 	bl	d56dc <free>
	buffer = NULL;
   d5966:	2300      	movs	r3, #0
	capacity = len = 0;
   d5968:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d596c:	6023      	str	r3, [r4, #0]
}
   d596e:	bd10      	pop	{r4, pc}

000d5970 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5970:	b538      	push	{r3, r4, r5, lr}
   d5972:	4604      	mov	r4, r0
   d5974:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5976:	6800      	ldr	r0, [r0, #0]
   d5978:	3101      	adds	r1, #1
   d597a:	f7ff feb7 	bl	d56ec <realloc>
	if (newbuffer) {
   d597e:	b110      	cbz	r0, d5986 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5980:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5984:	2001      	movs	r0, #1
	}
	return 0;
}
   d5986:	bd38      	pop	{r3, r4, r5, pc}

000d5988 <_ZN6String7reserveEj>:
{
   d5988:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d598a:	6803      	ldr	r3, [r0, #0]
{
   d598c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d598e:	b123      	cbz	r3, d599a <_ZN6String7reserveEj+0x12>
   d5990:	6843      	ldr	r3, [r0, #4]
   d5992:	428b      	cmp	r3, r1
   d5994:	d301      	bcc.n	d599a <_ZN6String7reserveEj+0x12>
   d5996:	2001      	movs	r0, #1
}
   d5998:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff ffe8 	bl	d5970 <_ZN6String12changeBufferEj>
   d59a0:	2800      	cmp	r0, #0
   d59a2:	d0f9      	beq.n	d5998 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d59a4:	68a3      	ldr	r3, [r4, #8]
   d59a6:	2b00      	cmp	r3, #0
   d59a8:	d1f5      	bne.n	d5996 <_ZN6String7reserveEj+0xe>
   d59aa:	6822      	ldr	r2, [r4, #0]
   d59ac:	7013      	strb	r3, [r2, #0]
   d59ae:	e7f2      	b.n	d5996 <_ZN6String7reserveEj+0xe>

000d59b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d59b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d59b4:	4611      	mov	r1, r2
   d59b6:	9201      	str	r2, [sp, #4]
{
   d59b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d59ba:	f7ff ffe5 	bl	d5988 <_ZN6String7reserveEj>
   d59be:	9a01      	ldr	r2, [sp, #4]
   d59c0:	b928      	cbnz	r0, d59ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d59c2:	4620      	mov	r0, r4
   d59c4:	f7ff ffc9 	bl	d595a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d59c8:	4620      	mov	r0, r4
   d59ca:	b003      	add	sp, #12
   d59cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d59ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d59d0:	4629      	mov	r1, r5
   d59d2:	6820      	ldr	r0, [r4, #0]
   d59d4:	f001 ff6a 	bl	d78ac <memcpy>
	buffer[len] = 0;
   d59d8:	6822      	ldr	r2, [r4, #0]
   d59da:	68a3      	ldr	r3, [r4, #8]
   d59dc:	2100      	movs	r1, #0
   d59de:	54d1      	strb	r1, [r2, r3]
	return *this;
   d59e0:	e7f2      	b.n	d59c8 <_ZN6String4copyEPKcj+0x18>

000d59e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d59e2:	b513      	push	{r0, r1, r4, lr}
   d59e4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d59e6:	b159      	cbz	r1, d5a00 <_ZN6StringaSEPKc+0x1e>
   d59e8:	4608      	mov	r0, r1
   d59ea:	9101      	str	r1, [sp, #4]
   d59ec:	f001 ffb5 	bl	d795a <strlen>
   d59f0:	9901      	ldr	r1, [sp, #4]
   d59f2:	4602      	mov	r2, r0
   d59f4:	4620      	mov	r0, r4
   d59f6:	f7ff ffdb 	bl	d59b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	b002      	add	sp, #8
   d59fe:	bd10      	pop	{r4, pc}
	else invalidate();
   d5a00:	f7ff ffab 	bl	d595a <_ZN6String10invalidateEv>
   d5a04:	e7f9      	b.n	d59fa <_ZN6StringaSEPKc+0x18>

000d5a06 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d5a06:	b530      	push	{r4, r5, lr}
   d5a08:	4604      	mov	r4, r0
	buffer = NULL;
   d5a0a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d5a0c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d5a0e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5a12:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5a14:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d5a16:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d5a1a:	b2cd      	uxtb	r5, r1
   d5a1c:	f001 fa4e 	bl	d6ebc <__aeabi_f2d>
   d5a20:	ec41 0b10 	vmov	d0, r0, r1
   d5a24:	a901      	add	r1, sp, #4
   d5a26:	4628      	mov	r0, r5
   d5a28:	f7ff ff32 	bl	d5890 <_Z4dtoadhPc>
        *this = buf;
   d5a2c:	a901      	add	r1, sp, #4
   d5a2e:	4620      	mov	r0, r4
   d5a30:	f7ff ffd7 	bl	d59e2 <_ZN6StringaSEPKc>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	b00b      	add	sp, #44	; 0x2c
   d5a38:	bd30      	pop	{r4, r5, pc}

000d5a3a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5a3e:	6800      	ldr	r0, [r0, #0]
   d5a40:	b108      	cbz	r0, d5a46 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5a42:	f7ff fc97 	bl	d5374 <os_mutex_recursive_destroy>
    }
   d5a46:	4620      	mov	r0, r4
   d5a48:	bd10      	pop	{r4, pc}

000d5a4a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a4a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a4c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5a4e:	4604      	mov	r4, r0
      if (_M_manager)
   d5a50:	b113      	cbz	r3, d5a58 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a52:	2203      	movs	r2, #3
   d5a54:	4601      	mov	r1, r0
   d5a56:	4798      	blx	r3
    }
   d5a58:	4620      	mov	r0, r4
   d5a5a:	bd10      	pop	{r4, pc}

000d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5a5c:	680b      	ldr	r3, [r1, #0]
   d5a5e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5a60:	b113      	cbz	r3, d5a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5a62:	685a      	ldr	r2, [r3, #4]
   d5a64:	3201      	adds	r2, #1
   d5a66:	605a      	str	r2, [r3, #4]
      }
   d5a68:	4770      	bx	lr

000d5a6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5a6a:	b513      	push	{r0, r1, r4, lr}
   d5a6c:	460b      	mov	r3, r1
   d5a6e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a70:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5a74:	466c      	mov	r4, sp
   d5a76:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5a7e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5a82:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5a86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5a8a:	b002      	add	sp, #8
   d5a8c:	bd10      	pop	{r4, pc}
	...

000d5a90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5a90:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5a92:	4c06      	ldr	r4, [pc, #24]	; (d5aac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a94:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5a96:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5a98:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5a9a:	f7ff fc63 	bl	d5364 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	4a03      	ldr	r2, [pc, #12]	; (d5ab0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5aa2:	4904      	ldr	r1, [pc, #16]	; (d5ab4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5aa8:	f001 b898 	b.w	d6bdc <__aeabi_atexit>
   d5aac:	2003e65c 	.word	0x2003e65c
   d5ab0:	2003e5c4 	.word	0x2003e5c4
   d5ab4:	000d5a3b 	.word	0x000d5a3b

000d5ab8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5aba:	4606      	mov	r6, r0
   d5abc:	460d      	mov	r5, r1
  size_t n = 0;
   d5abe:	188f      	adds	r7, r1, r2
   d5ac0:	2400      	movs	r4, #0
  while (size--) {
   d5ac2:	42bd      	cmp	r5, r7
   d5ac4:	d00c      	beq.n	d5ae0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5ac6:	6833      	ldr	r3, [r6, #0]
   d5ac8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5acc:	689b      	ldr	r3, [r3, #8]
   d5ace:	4630      	mov	r0, r6
   d5ad0:	4798      	blx	r3
     if (chunk>=0)
   d5ad2:	1e03      	subs	r3, r0, #0
   d5ad4:	db01      	blt.n	d5ada <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ad6:	441c      	add	r4, r3
  while (size--) {
   d5ad8:	e7f3      	b.n	d5ac2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ada:	2c00      	cmp	r4, #0
   d5adc:	bf08      	it	eq
   d5ade:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ae4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5ae4:	b513      	push	{r0, r1, r4, lr}
   d5ae6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5ae8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5aea:	b159      	cbz	r1, d5b04 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5aec:	9101      	str	r1, [sp, #4]
   d5aee:	f001 ff34 	bl	d795a <strlen>
   d5af2:	6823      	ldr	r3, [r4, #0]
   d5af4:	9901      	ldr	r1, [sp, #4]
   d5af6:	68db      	ldr	r3, [r3, #12]
   d5af8:	4602      	mov	r2, r0
   d5afa:	4620      	mov	r0, r4
    }
   d5afc:	b002      	add	sp, #8
   d5afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5b02:	4718      	bx	r3
    }
   d5b04:	b002      	add	sp, #8
   d5b06:	bd10      	pop	{r4, pc}

000d5b08 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5b08:	b508      	push	{r3, lr}
  return write(str);
   d5b0a:	f7ff ffeb 	bl	d5ae4 <_ZN5Print5writeEPKc>
}
   d5b0e:	bd08      	pop	{r3, pc}

000d5b10 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5b10:	6803      	ldr	r3, [r0, #0]
   d5b12:	689b      	ldr	r3, [r3, #8]
   d5b14:	4718      	bx	r3

000d5b16 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5b16:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5b18:	210d      	movs	r1, #13
{
   d5b1a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5b1c:	f7ff fff8 	bl	d5b10 <_ZN5Print5printEc>
  n += print('\n');
   d5b20:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5b22:	4604      	mov	r4, r0
  n += print('\n');
   d5b24:	4628      	mov	r0, r5
   d5b26:	f7ff fff3 	bl	d5b10 <_ZN5Print5printEc>
  return n;
}
   d5b2a:	4420      	add	r0, r4
   d5b2c:	bd38      	pop	{r3, r4, r5, pc}

000d5b2e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5b2e:	b538      	push	{r3, r4, r5, lr}
   d5b30:	4605      	mov	r5, r0
  return write(str);
   d5b32:	f7ff ffd7 	bl	d5ae4 <_ZN5Print5writeEPKc>
   d5b36:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5b38:	4628      	mov	r0, r5
   d5b3a:	f7ff ffec 	bl	d5b16 <_ZN5Print7printlnEv>
  return n;
}
   d5b3e:	4420      	add	r0, r4
   d5b40:	bd38      	pop	{r3, r4, r5, pc}

000d5b42 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5b42:	b530      	push	{r4, r5, lr}
   d5b44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5b46:	2300      	movs	r3, #0
   d5b48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5b4c:	2a01      	cmp	r2, #1
   d5b4e:	bf98      	it	ls
   d5b50:	220a      	movls	r2, #10
   d5b52:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5b54:	460d      	mov	r5, r1
   d5b56:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5b5a:	fb01 5312 	mls	r3, r1, r2, r5
   d5b5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b62:	2b09      	cmp	r3, #9
   d5b64:	bf94      	ite	ls
   d5b66:	3330      	addls	r3, #48	; 0x30
   d5b68:	3337      	addhi	r3, #55	; 0x37
   d5b6a:	b2db      	uxtb	r3, r3
  } while(n);
   d5b6c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5b72:	d9ef      	bls.n	d5b54 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5b74:	4621      	mov	r1, r4
   d5b76:	f7ff ffb5 	bl	d5ae4 <_ZN5Print5writeEPKc>
}
   d5b7a:	b00b      	add	sp, #44	; 0x2c
   d5b7c:	bd30      	pop	{r4, r5, pc}
	...

000d5b80 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b84:	ec55 4b10 	vmov	r4, r5, d0
   d5b88:	4606      	mov	r6, r0
   d5b8a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5b8c:	ee10 2a10 	vmov	r2, s0
   d5b90:	ee10 0a10 	vmov	r0, s0
   d5b94:	462b      	mov	r3, r5
   d5b96:	4629      	mov	r1, r5
   d5b98:	f001 fc82 	bl	d74a0 <__aeabi_dcmpun>
   d5b9c:	b140      	cbz	r0, d5bb0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5b9e:	4953      	ldr	r1, [pc, #332]	; (d5cec <_ZN5Print10printFloatEdh+0x16c>)
   d5ba0:	4630      	mov	r0, r6
   d5ba2:	f7ff ff9f 	bl	d5ae4 <_ZN5Print5writeEPKc>
   d5ba6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5ba8:	4650      	mov	r0, sl
   d5baa:	b003      	add	sp, #12
   d5bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5bb0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5bb4:	4b4e      	ldr	r3, [pc, #312]	; (d5cf0 <_ZN5Print10printFloatEdh+0x170>)
   d5bb6:	f04f 32ff 	mov.w	r2, #4294967295
   d5bba:	4620      	mov	r0, r4
   d5bbc:	4649      	mov	r1, r9
   d5bbe:	f001 fc6f 	bl	d74a0 <__aeabi_dcmpun>
   d5bc2:	b948      	cbnz	r0, d5bd8 <_ZN5Print10printFloatEdh+0x58>
   d5bc4:	4b4a      	ldr	r3, [pc, #296]	; (d5cf0 <_ZN5Print10printFloatEdh+0x170>)
   d5bc6:	f04f 32ff 	mov.w	r2, #4294967295
   d5bca:	4620      	mov	r0, r4
   d5bcc:	4649      	mov	r1, r9
   d5bce:	f001 fc49 	bl	d7464 <__aeabi_dcmple>
   d5bd2:	b908      	cbnz	r0, d5bd8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5bd4:	4947      	ldr	r1, [pc, #284]	; (d5cf4 <_ZN5Print10printFloatEdh+0x174>)
   d5bd6:	e7e3      	b.n	d5ba0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5bd8:	4b47      	ldr	r3, [pc, #284]	; (d5cf8 <_ZN5Print10printFloatEdh+0x178>)
   d5bda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5bde:	4620      	mov	r0, r4
   d5be0:	4629      	mov	r1, r5
   d5be2:	f001 fc53 	bl	d748c <__aeabi_dcmpgt>
   d5be6:	b108      	cbz	r0, d5bec <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5be8:	4944      	ldr	r1, [pc, #272]	; (d5cfc <_ZN5Print10printFloatEdh+0x17c>)
   d5bea:	e7d9      	b.n	d5ba0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5bec:	4b44      	ldr	r3, [pc, #272]	; (d5d00 <_ZN5Print10printFloatEdh+0x180>)
   d5bee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	4629      	mov	r1, r5
   d5bf6:	f001 fc2b 	bl	d7450 <__aeabi_dcmplt>
   d5bfa:	2800      	cmp	r0, #0
   d5bfc:	d1f4      	bne.n	d5be8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5bfe:	2200      	movs	r2, #0
   d5c00:	2300      	movs	r3, #0
   d5c02:	4620      	mov	r0, r4
   d5c04:	4629      	mov	r1, r5
   d5c06:	f001 fc23 	bl	d7450 <__aeabi_dcmplt>
   d5c0a:	b1d0      	cbz	r0, d5c42 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5c0c:	212d      	movs	r1, #45	; 0x2d
   d5c0e:	4630      	mov	r0, r6
   d5c10:	f7ff ff7e 	bl	d5b10 <_ZN5Print5printEc>
     number = -number;
   d5c14:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5c18:	4682      	mov	sl, r0
     number = -number;
   d5c1a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5c1c:	4939      	ldr	r1, [pc, #228]	; (d5d04 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5c1e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5d0c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5c22:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5c26:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5c28:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5c2c:	fa5f f38b 	uxtb.w	r3, fp
   d5c30:	429f      	cmp	r7, r3
   d5c32:	d908      	bls.n	d5c46 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5c34:	4642      	mov	r2, r8
   d5c36:	464b      	mov	r3, r9
   d5c38:	f001 fac2 	bl	d71c0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5c3c:	f10b 0b01 	add.w	fp, fp, #1
   d5c40:	e7f4      	b.n	d5c2c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5c42:	4682      	mov	sl, r0
   d5c44:	e7ea      	b.n	d5c1c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5c46:	4622      	mov	r2, r4
   d5c48:	462b      	mov	r3, r5
   d5c4a:	f000 ffd9 	bl	d6c00 <__adddf3>
   d5c4e:	460d      	mov	r5, r1
   d5c50:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5c52:	f001 fc63 	bl	d751c <__aeabi_d2uiz>
   d5c56:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5c58:	f001 f90e 	bl	d6e78 <__aeabi_ui2d>
   d5c5c:	4602      	mov	r2, r0
   d5c5e:	460b      	mov	r3, r1
   d5c60:	4620      	mov	r0, r4
   d5c62:	4629      	mov	r1, r5
   d5c64:	f000 ffca 	bl	d6bfc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5c68:	220a      	movs	r2, #10
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	460d      	mov	r5, r1
   d5c6e:	4630      	mov	r0, r6
   d5c70:	4641      	mov	r1, r8
   d5c72:	f7ff ff66 	bl	d5b42 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5c76:	4482      	add	sl, r0
  if (digits > 0) {
   d5c78:	b127      	cbz	r7, d5c84 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5c7a:	4923      	ldr	r1, [pc, #140]	; (d5d08 <_ZN5Print10printFloatEdh+0x188>)
   d5c7c:	4630      	mov	r0, r6
   d5c7e:	f7ff ff31 	bl	d5ae4 <_ZN5Print5writeEPKc>
    n += print(".");
   d5c82:	4482      	add	sl, r0
    remainder *= 10.0;
   d5c84:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5d0c <_ZN5Print10printFloatEdh+0x18c>
   d5c88:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5c8c:	3f01      	subs	r7, #1
   d5c8e:	b2ff      	uxtb	r7, r7
   d5c90:	2fff      	cmp	r7, #255	; 0xff
   d5c92:	d089      	beq.n	d5ba8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5c94:	4642      	mov	r2, r8
   d5c96:	464b      	mov	r3, r9
   d5c98:	4620      	mov	r0, r4
   d5c9a:	4629      	mov	r1, r5
   d5c9c:	f001 f966 	bl	d6f6c <__aeabi_dmul>
   d5ca0:	4604      	mov	r4, r0
   d5ca2:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5ca4:	f001 fc12 	bl	d74cc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5ca8:	f1b0 0b00 	subs.w	fp, r0, #0
   d5cac:	da1a      	bge.n	d5ce4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5cae:	212d      	movs	r1, #45	; 0x2d
   d5cb0:	4630      	mov	r0, r6
   d5cb2:	f7ff ff2d 	bl	d5b10 <_ZN5Print5printEc>
            val = -n;
   d5cb6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5cba:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5cbc:	220a      	movs	r2, #10
   d5cbe:	4630      	mov	r0, r6
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	f7ff ff3e 	bl	d5b42 <_ZN5Print11printNumberEmh>
   d5cc6:	9b01      	ldr	r3, [sp, #4]
   d5cc8:	4418      	add	r0, r3
    n += print(toPrint);
   d5cca:	4482      	add	sl, r0
    remainder -= toPrint;
   d5ccc:	4658      	mov	r0, fp
   d5cce:	f001 f8e3 	bl	d6e98 <__aeabi_i2d>
   d5cd2:	4602      	mov	r2, r0
   d5cd4:	460b      	mov	r3, r1
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	4629      	mov	r1, r5
   d5cda:	f000 ff8f 	bl	d6bfc <__aeabi_dsub>
   d5cde:	4604      	mov	r4, r0
   d5ce0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5ce2:	e7d3      	b.n	d5c8c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5ce4:	4659      	mov	r1, fp
        size_t t = 0;
   d5ce6:	2300      	movs	r3, #0
   d5ce8:	e7e8      	b.n	d5cbc <_ZN5Print10printFloatEdh+0x13c>
   d5cea:	bf00      	nop
   d5cec:	000d7b74 	.word	0x000d7b74
   d5cf0:	7fefffff 	.word	0x7fefffff
   d5cf4:	000d7b78 	.word	0x000d7b78
   d5cf8:	41efffff 	.word	0x41efffff
   d5cfc:	000d7b7c 	.word	0x000d7b7c
   d5d00:	c1efffff 	.word	0xc1efffff
   d5d04:	3fe00000 	.word	0x3fe00000
   d5d08:	000d7b80 	.word	0x000d7b80
   d5d0c:	40240000 	.word	0x40240000

000d5d10 <_ZN5Print5printEfi>:
{
   d5d10:	b538      	push	{r3, r4, r5, lr}
   d5d12:	4604      	mov	r4, r0
   d5d14:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d5d18:	b2cd      	uxtb	r5, r1
   d5d1a:	f001 f8cf 	bl	d6ebc <__aeabi_f2d>
   d5d1e:	ec41 0b10 	vmov	d0, r0, r1
   d5d22:	4629      	mov	r1, r5
   d5d24:	4620      	mov	r0, r4
}
   d5d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d5d2a:	f7ff bf29 	b.w	d5b80 <_ZN5Print10printFloatEdh>

000d5d2e <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5d2e:	2300      	movs	r3, #0
   d5d30:	6840      	ldr	r0, [r0, #4]
   d5d32:	461a      	mov	r2, r3
   d5d34:	4619      	mov	r1, r3
   d5d36:	f7ff bc69 	b.w	d560c <network_on>
	...

000d5d3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d3c:	4b01      	ldr	r3, [pc, #4]	; (d5d44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d3e:	4a02      	ldr	r2, [pc, #8]	; (d5d48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d40:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5d42:	4770      	bx	lr
   d5d44:	2003e660 	.word	0x2003e660
   d5d48:	000d7b82 	.word	0x000d7b82

000d5d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d4c:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d4e:	681a      	ldr	r2, [r3, #0]
   d5d50:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5d54:	4770      	bx	lr
   d5d56:	bf00      	nop
   d5d58:	2003e55c 	.word	0x2003e55c
   d5d5c:	2003e664 	.word	0x2003e664

000d5d60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5d60:	2100      	movs	r1, #0
   d5d62:	f7ff bc07 	b.w	d5574 <system_delay_ms>

000d5d66 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d66:	b510      	push	{r4, lr}
   d5d68:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d6a:	f7ff fe6e 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
   d5d6e:	4620      	mov	r0, r4
   d5d70:	bd10      	pop	{r4, pc}
	...

000d5d74 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5d74:	4803      	ldr	r0, [pc, #12]	; (d5d84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d76:	4a04      	ldr	r2, [pc, #16]	; (d5d88 <_GLOBAL__sub_I_RGB+0x14>)
   d5d78:	4904      	ldr	r1, [pc, #16]	; (d5d8c <_GLOBAL__sub_I_RGB+0x18>)
   d5d7a:	2300      	movs	r3, #0
   d5d7c:	6083      	str	r3, [r0, #8]
   d5d7e:	f000 bf2d 	b.w	d6bdc <__aeabi_atexit>
   d5d82:	bf00      	nop
   d5d84:	2003e668 	.word	0x2003e668
   d5d88:	2003e5c4 	.word	0x2003e5c4
   d5d8c:	000d5d67 	.word	0x000d5d67

000d5d90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5d90:	4b01      	ldr	r3, [pc, #4]	; (d5d98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5d92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5d94:	4770      	bx	lr
   d5d96:	bf00      	nop
   d5d98:	2003e560 	.word	0x2003e560

000d5d9c <serialEventRun>:
{
   d5d9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d9e:	4b0b      	ldr	r3, [pc, #44]	; (d5dcc <serialEventRun+0x30>)
   d5da0:	b143      	cbz	r3, d5db4 <serialEventRun+0x18>
   d5da2:	f000 fbf7 	bl	d6594 <_Z16_fetch_usbserialv>
   d5da6:	6803      	ldr	r3, [r0, #0]
   d5da8:	691b      	ldr	r3, [r3, #16]
   d5daa:	4798      	blx	r3
   d5dac:	2800      	cmp	r0, #0
   d5dae:	dd01      	ble.n	d5db4 <serialEventRun+0x18>
        serialEvent();
   d5db0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5db4:	4b06      	ldr	r3, [pc, #24]	; (d5dd0 <serialEventRun+0x34>)
   d5db6:	b143      	cbz	r3, d5dca <serialEventRun+0x2e>
   d5db8:	f000 fc9a 	bl	d66f0 <_Z22__fetch_global_Serial1v>
   d5dbc:	6803      	ldr	r3, [r0, #0]
   d5dbe:	691b      	ldr	r3, [r3, #16]
   d5dc0:	4798      	blx	r3
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	dd01      	ble.n	d5dca <serialEventRun+0x2e>
        serialEvent1();
   d5dc6:	f3af 8000 	nop.w
}
   d5dca:	bd08      	pop	{r3, pc}
	...

000d5dd4 <_post_loop>:
{
   d5dd4:	b508      	push	{r3, lr}
	serialEventRun();
   d5dd6:	f7ff ffe1 	bl	d5d9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5dda:	f7ff fabb 	bl	d5354 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dde:	4b01      	ldr	r3, [pc, #4]	; (d5de4 <_post_loop+0x10>)
   d5de0:	6018      	str	r0, [r3, #0]
}
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	2003e7d4 	.word	0x2003e7d4

000d5de8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5de8:	4802      	ldr	r0, [pc, #8]	; (d5df4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5dea:	4a03      	ldr	r2, [pc, #12]	; (d5df8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5dec:	4903      	ldr	r1, [pc, #12]	; (d5dfc <_Z33system_initialize_user_backup_ramv+0x14>)
   d5dee:	1a12      	subs	r2, r2, r0
   d5df0:	f001 bd5c 	b.w	d78ac <memcpy>
   d5df4:	2003f400 	.word	0x2003f400
   d5df8:	2003f404 	.word	0x2003f404
   d5dfc:	000d7d08 	.word	0x000d7d08

000d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e02:	2300      	movs	r3, #0
   d5e04:	9300      	str	r3, [sp, #0]
   d5e06:	461a      	mov	r2, r3
   d5e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e0c:	f7ff fbd4 	bl	d55b8 <system_ctrl_set_result>
}
   d5e10:	b003      	add	sp, #12
   d5e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5e18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e1a:	8843      	ldrh	r3, [r0, #2]
   d5e1c:	2b0a      	cmp	r3, #10
   d5e1e:	d008      	beq.n	d5e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e20:	2b50      	cmp	r3, #80	; 0x50
   d5e22:	d10b      	bne.n	d5e3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5e24:	4b09      	ldr	r3, [pc, #36]	; (d5e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e26:	681b      	ldr	r3, [r3, #0]
   d5e28:	b14b      	cbz	r3, d5e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5e2a:	b003      	add	sp, #12
   d5e2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5e30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5e32:	f7ff ffe5 	bl	d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5e36:	b003      	add	sp, #12
   d5e38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e3c:	2300      	movs	r3, #0
   d5e3e:	9300      	str	r3, [sp, #0]
   d5e40:	461a      	mov	r2, r3
   d5e42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e46:	f7ff fbb7 	bl	d55b8 <system_ctrl_set_result>
}
   d5e4a:	e7f4      	b.n	d5e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5e4c:	2003e67c 	.word	0x2003e67c

000d5e50 <module_user_init_hook>:
{
   d5e50:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e52:	4c12      	ldr	r4, [pc, #72]	; (d5e9c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e54:	4812      	ldr	r0, [pc, #72]	; (d5ea0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e56:	4d13      	ldr	r5, [pc, #76]	; (d5ea4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e58:	2100      	movs	r1, #0
   d5e5a:	f7ff fc5f 	bl	d571c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e5e:	6823      	ldr	r3, [r4, #0]
   d5e60:	42ab      	cmp	r3, r5
   d5e62:	4b11      	ldr	r3, [pc, #68]	; (d5ea8 <module_user_init_hook+0x58>)
   d5e64:	bf0c      	ite	eq
   d5e66:	2201      	moveq	r2, #1
   d5e68:	2200      	movne	r2, #0
   d5e6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e6c:	d002      	beq.n	d5e74 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5e6e:	f7ff ffbb 	bl	d5de8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e72:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e74:	f7ff fa5e 	bl	d5334 <HAL_RNG_GetRandomNumber>
   d5e78:	4604      	mov	r4, r0
    srand(seed);
   d5e7a:	f001 fd2d 	bl	d78d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e7e:	4b0b      	ldr	r3, [pc, #44]	; (d5eac <module_user_init_hook+0x5c>)
   d5e80:	b113      	cbz	r3, d5e88 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5e82:	4620      	mov	r0, r4
   d5e84:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e88:	2100      	movs	r1, #0
   d5e8a:	4808      	ldr	r0, [pc, #32]	; (d5eac <module_user_init_hook+0x5c>)
   d5e8c:	f7ff fc16 	bl	d56bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e94:	4806      	ldr	r0, [pc, #24]	; (d5eb0 <module_user_init_hook+0x60>)
   d5e96:	2100      	movs	r1, #0
   d5e98:	f7ff bb84 	b.w	d55a4 <system_ctrl_set_app_request_handler>
   d5e9c:	2003f400 	.word	0x2003f400
   d5ea0:	000d5d91 	.word	0x000d5d91
   d5ea4:	9a271c1e 	.word	0x9a271c1e
   d5ea8:	2003e678 	.word	0x2003e678
   d5eac:	00000000 	.word	0x00000000
   d5eb0:	000d5e19 	.word	0x000d5e19

000d5eb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5eb4:	4770      	bx	lr

000d5eb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5eb6:	2000      	movs	r0, #0
   d5eb8:	4770      	bx	lr

000d5eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5eba:	b510      	push	{r4, lr}
   d5ebc:	2110      	movs	r1, #16
   d5ebe:	4604      	mov	r4, r0
   d5ec0:	f000 fe91 	bl	d6be6 <_ZdlPvj>
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	bd10      	pop	{r4, pc}

000d5ec8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5ec8:	b508      	push	{r3, lr}
      { delete this; }
   d5eca:	f7ff fff6 	bl	d5eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5ece:	bd08      	pop	{r3, pc}

000d5ed0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5ed0:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5ed8:	6002      	str	r2, [r0, #0]
   d5eda:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5edc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ede:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5ee0:	680c      	ldr	r4, [r1, #0]
   d5ee2:	8085      	strh	r5, [r0, #4]
   d5ee4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ee6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5ee8:	bd30      	pop	{r4, r5, pc}

000d5eea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5eea:	b510      	push	{r4, lr}
   d5eec:	4604      	mov	r4, r0
    free((void*)msg_);
   d5eee:	6800      	ldr	r0, [r0, #0]
   d5ef0:	f7ff fbf4 	bl	d56dc <free>
}
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	bd10      	pop	{r4, pc}

000d5ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ef8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5efa:	68c4      	ldr	r4, [r0, #12]
   d5efc:	b1f4      	cbz	r4, d5f3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5efe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5f00:	2b02      	cmp	r3, #2
   d5f02:	d103      	bne.n	d5f0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5f04:	f104 000c 	add.w	r0, r4, #12
   d5f08:	f7ff ffef 	bl	d5eea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5f0c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5f0e:	b135      	cbz	r5, d5f1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5f10:	4628      	mov	r0, r5
   d5f12:	f7ff fd9a 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
   d5f16:	2110      	movs	r1, #16
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f000 fe64 	bl	d6be6 <_ZdlPvj>
   d5f1e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5f20:	b135      	cbz	r5, d5f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5f22:	4628      	mov	r0, r5
   d5f24:	f7ff fd91 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
   d5f28:	2110      	movs	r1, #16
   d5f2a:	4628      	mov	r0, r5
   d5f2c:	f000 fe5b 	bl	d6be6 <_ZdlPvj>
   d5f30:	4620      	mov	r0, r4
   d5f32:	2114      	movs	r1, #20
   d5f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5f38:	f000 be55 	b.w	d6be6 <_ZdlPvj>
   d5f3c:	bd38      	pop	{r3, r4, r5, pc}

000d5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f40:	460e      	mov	r6, r1
   d5f42:	4604      	mov	r4, r0
   d5f44:	f856 3b04 	ldr.w	r3, [r6], #4
   d5f48:	9300      	str	r3, [sp, #0]
   d5f4a:	460d      	mov	r5, r1
   d5f4c:	a801      	add	r0, sp, #4
   d5f4e:	4631      	mov	r1, r6
   d5f50:	f7ff fd84 	bl	d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f54:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f56:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5f58:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f5a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5f5c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5f5e:	2300      	movs	r3, #0
   d5f60:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5f62:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5f64:	f7fe f95c 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f68:	4630      	mov	r0, r6
   d5f6a:	f7fe f959 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5f6e:	4628      	mov	r0, r5
   d5f70:	2108      	movs	r1, #8
   d5f72:	f000 fe38 	bl	d6be6 <_ZdlPvj>
        return p;
    }
   d5f76:	4620      	mov	r0, r4
   d5f78:	b002      	add	sp, #8
   d5f7a:	bd70      	pop	{r4, r5, r6, pc}

000d5f7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5f7c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f7e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5f80:	b90a      	cbnz	r2, d5f86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5f82:	f000 fe34 	bl	d6bee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f8a:	68c3      	ldr	r3, [r0, #12]
   d5f8c:	4718      	bx	r3

000d5f8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f8e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f90:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5f92:	f100 0110 	add.w	r1, r0, #16
   d5f96:	f7ff fff1 	bl	d5f7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5f9a:	bd08      	pop	{r3, pc}

000d5f9c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5f9c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f9e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5fa0:	b90a      	cbnz	r2, d5fa6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5fa2:	f000 fe24 	bl	d6bee <_ZSt25__throw_bad_function_callv>
    }
   d5fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5faa:	68c3      	ldr	r3, [r0, #12]
   d5fac:	4718      	bx	r3

000d5fae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5fae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5fb0:	6800      	ldr	r0, [r0, #0]
   d5fb2:	f100 0110 	add.w	r1, r0, #16
   d5fb6:	f7ff fff1 	bl	d5f9c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5fba:	bd08      	pop	{r3, pc}

000d5fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5fbc:	b538      	push	{r3, r4, r5, lr}
   d5fbe:	2300      	movs	r3, #0
   d5fc0:	4604      	mov	r4, r0
   d5fc2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fc4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5fc6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fc8:	f7fe f863 	bl	d4092 <_Znwj>
   d5fcc:	b128      	cbz	r0, d5fda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5fce:	2301      	movs	r3, #1
   d5fd0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5fd4:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5fd6:	6003      	str	r3, [r0, #0]
   d5fd8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fda:	6020      	str	r0, [r4, #0]
	}
   d5fdc:	4620      	mov	r0, r4
   d5fde:	bd38      	pop	{r3, r4, r5, pc}
   d5fe0:	000d7bac 	.word	0x000d7bac

000d5fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5fe4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5fe6:	2300      	movs	r3, #0
   d5fe8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5fea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5fec:	4604      	mov	r4, r0
   d5fee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5ff0:	b12b      	cbz	r3, d5ffe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ff2:	2202      	movs	r2, #2
   d5ff4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ff6:	68eb      	ldr	r3, [r5, #12]
   d5ff8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ffa:	68ab      	ldr	r3, [r5, #8]
   d5ffc:	60a3      	str	r3, [r4, #8]
    }
   d5ffe:	4620      	mov	r0, r4
   d6000:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6004:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6006:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6008:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d600a:	4668      	mov	r0, sp
   d600c:	f7ff ff60 	bl	d5ed0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6010:	f04f 0302 	mov.w	r3, #2
   d6014:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6018:	2a00      	cmp	r2, #0
   d601a:	d103      	bne.n	d6024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d601c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6020:	2900      	cmp	r1, #0
   d6022:	d1f7      	bne.n	d6014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6024:	d125      	bne.n	d6072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6026:	f104 050c 	add.w	r5, r4, #12
   d602a:	4669      	mov	r1, sp
   d602c:	4628      	mov	r0, r5
   d602e:	f7ff ff4f 	bl	d5ed0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6032:	f3bf 8f5b 	dmb	ish
   d6036:	2301      	movs	r3, #1
   d6038:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d603a:	2000      	movs	r0, #0
   d603c:	f104 0308 	add.w	r3, r4, #8
   d6040:	f3bf 8f5b 	dmb	ish
   d6044:	e853 6f00 	ldrex	r6, [r3]
   d6048:	e843 0200 	strex	r2, r0, [r3]
   d604c:	2a00      	cmp	r2, #0
   d604e:	d1f9      	bne.n	d6044 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6050:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6054:	b16e      	cbz	r6, d6072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6056:	f7ff fa95 	bl	d5584 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d605a:	b178      	cbz	r0, d607c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d605c:	4629      	mov	r1, r5
   d605e:	4630      	mov	r0, r6
   d6060:	f7ff ff8c 	bl	d5f7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6064:	4630      	mov	r0, r6
   d6066:	f7ff fcf0 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d606a:	2110      	movs	r1, #16
   d606c:	4630      	mov	r0, r6
   d606e:	f000 fdba 	bl	d6be6 <_ZdlPvj>
        p_->setError(std::move(error));
   d6072:	4668      	mov	r0, sp
   d6074:	f7ff ff39 	bl	d5eea <_ZN8particle5ErrorD1Ev>
    }
   d6078:	b009      	add	sp, #36	; 0x24
   d607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d607c:	4631      	mov	r1, r6
   d607e:	a802      	add	r0, sp, #8
   d6080:	f7ff ffb0 	bl	d5fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6084:	68e0      	ldr	r0, [r4, #12]
   d6086:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d608a:	b108      	cbz	r0, d6090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d608c:	f001 fc48 	bl	d7920 <strdup>
        type_(type) {
   d6090:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6092:	2010      	movs	r0, #16
   d6094:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6098:	f7fd fffb 	bl	d4092 <_Znwj>
   d609c:	4605      	mov	r5, r0
   d609e:	b1e8      	cbz	r0, d60dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d60a0:	2700      	movs	r7, #0
   d60a2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60a4:	2018      	movs	r0, #24
   d60a6:	f7fd fff4 	bl	d4092 <_Znwj>
   d60aa:	4604      	mov	r4, r0
   d60ac:	b188      	cbz	r0, d60d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d60ae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d60b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d60b2:	a802      	add	r0, sp, #8
   d60b4:	f7ff fcd9 	bl	d5a6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d60ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d60bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d60c0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d60c2:	a906      	add	r1, sp, #24
   d60c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d60c6:	60e3      	str	r3, [r4, #12]
   d60c8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d60cc:	9205      	str	r2, [sp, #20]
   d60ce:	f7ff feff 	bl	d5ed0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d60d2:	4b08      	ldr	r3, [pc, #32]	; (d60f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d60d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d60d6:	4b08      	ldr	r3, [pc, #32]	; (d60f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60d8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d60da:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d60dc:	a806      	add	r0, sp, #24
   d60de:	f7ff ff04 	bl	d5eea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d60e2:	a802      	add	r0, sp, #8
   d60e4:	f7ff fcb1 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d60e8:	2200      	movs	r2, #0
   d60ea:	4629      	mov	r1, r5
   d60ec:	4803      	ldr	r0, [pc, #12]	; (d60fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d60ee:	f7ff fa51 	bl	d5594 <application_thread_invoke>
   d60f2:	e7b7      	b.n	d6064 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d60f4:	000d5f8f 	.word	0x000d5f8f
   d60f8:	000d6225 	.word	0x000d6225
   d60fc:	000d6745 	.word	0x000d6745

000d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6104:	b08a      	sub	sp, #40	; 0x28
   d6106:	4605      	mov	r5, r0
   d6108:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d610c:	460c      	mov	r4, r1
   d610e:	4617      	mov	r7, r2
   d6110:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6112:	f7ff fac3 	bl	d569c <spark_cloud_flag_connected>
   d6116:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6118:	4682      	mov	sl, r0
   d611a:	bb38      	cbnz	r0, d616c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d611c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6120:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6122:	a905      	add	r1, sp, #20
   d6124:	4630      	mov	r0, r6
   d6126:	f8ad 3018 	strh.w	r3, [sp, #24]
   d612a:	f7ff fed1 	bl	d5ed0 <_ZN8particle5ErrorC1EOS0_>
   d612e:	2014      	movs	r0, #20
   d6130:	f7fd ffaf 	bl	d4092 <_Znwj>
   d6134:	4604      	mov	r4, r0
   d6136:	b148      	cbz	r0, d614c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6138:	2302      	movs	r3, #2
   d613a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d613c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d613e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6142:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6144:	4631      	mov	r1, r6
   d6146:	300c      	adds	r0, #12
   d6148:	f7ff fec2 	bl	d5ed0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d614c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d614e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6150:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6154:	f7ff ff32 	bl	d5fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6158:	4630      	mov	r0, r6
   d615a:	f7ff fec6 	bl	d5eea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d615e:	a805      	add	r0, sp, #20
   d6160:	f7ff fec3 	bl	d5eea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6164:	4628      	mov	r0, r5
   d6166:	b00a      	add	sp, #40	; 0x28
   d6168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d616c:	230c      	movs	r3, #12
   d616e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6172:	2014      	movs	r0, #20
   d6174:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6178:	9307      	str	r3, [sp, #28]
   d617a:	f7fd ff8a 	bl	d4092 <_Znwj>
   d617e:	4601      	mov	r1, r0
   d6180:	b128      	cbz	r0, d618e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6182:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6186:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d618a:	f880 a001 	strb.w	sl, [r0, #1]
   d618e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6190:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6192:	f7ff ff13 	bl	d5fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6196:	4b22      	ldr	r3, [pc, #136]	; (d6220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6198:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d619a:	2008      	movs	r0, #8
   d619c:	f7fd ff79 	bl	d4092 <_Znwj>
   d61a0:	4682      	mov	sl, r0
   d61a2:	b128      	cbz	r0, d61b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61a4:	9b03      	ldr	r3, [sp, #12]
   d61a6:	f840 3b04 	str.w	r3, [r0], #4
   d61aa:	a904      	add	r1, sp, #16
   d61ac:	f7ff fc56 	bl	d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61b0:	9600      	str	r6, [sp, #0]
   d61b2:	fa5f f389 	uxtb.w	r3, r9
   d61b6:	4642      	mov	r2, r8
   d61b8:	4639      	mov	r1, r7
   d61ba:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d61bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61c0:	f7ff fa74 	bl	d56ac <spark_send_event>
   d61c4:	b9b8      	cbnz	r0, d61f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d61c6:	9b03      	ldr	r3, [sp, #12]
   d61c8:	785b      	ldrb	r3, [r3, #1]
   d61ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d61ce:	b993      	cbnz	r3, d61f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d61d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d61d4:	a905      	add	r1, sp, #20
   d61d6:	a803      	add	r0, sp, #12
   d61d8:	9205      	str	r2, [sp, #20]
   d61da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d61de:	f7ff ff11 	bl	d6004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d61e2:	a805      	add	r0, sp, #20
   d61e4:	f7ff fe81 	bl	d5eea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d61e8:	a805      	add	r0, sp, #20
   d61ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d61ec:	f7ff fea7 	bl	d5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d61f0:	a806      	add	r0, sp, #24
   d61f2:	f7fe f815 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61f6:	9b03      	ldr	r3, [sp, #12]
   d61f8:	9305      	str	r3, [sp, #20]
   d61fa:	a904      	add	r1, sp, #16
   d61fc:	a806      	add	r0, sp, #24
   d61fe:	f7ff fc2d 	bl	d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6202:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6204:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6206:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6208:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d620a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d620c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d620e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6210:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6212:	f7fe f805 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6216:	a804      	add	r0, sp, #16
   d6218:	f7fe f802 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d621c:	e7a2      	b.n	d6164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d621e:	bf00      	nop
   d6220:	000d62e9 	.word	0x000d62e9

000d6224 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6224:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6228:	4605      	mov	r5, r0
	  switch (__op)
   d622a:	d007      	beq.n	d623c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d622c:	2a03      	cmp	r2, #3
   d622e:	d018      	beq.n	d6262 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6230:	2a01      	cmp	r2, #1
   d6232:	d101      	bne.n	d6238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6234:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6236:	6003      	str	r3, [r0, #0]
	}
   d6238:	2000      	movs	r0, #0
   d623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d623c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d623e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6240:	f7fd ff27 	bl	d4092 <_Znwj>
   d6244:	4604      	mov	r4, r0
   d6246:	b150      	cbz	r0, d625e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6248:	4631      	mov	r1, r6
   d624a:	f7ff fecb 	bl	d5fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d624e:	6930      	ldr	r0, [r6, #16]
   d6250:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6254:	b108      	cbz	r0, d625a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6256:	f001 fb63 	bl	d7920 <strdup>
        type_(type) {
   d625a:	6120      	str	r0, [r4, #16]
   d625c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d625e:	602c      	str	r4, [r5, #0]
	}
   d6260:	e7ea      	b.n	d6238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6262:	6804      	ldr	r4, [r0, #0]
   d6264:	2c00      	cmp	r4, #0
   d6266:	d0e7      	beq.n	d6238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6268:	f104 0010 	add.w	r0, r4, #16
   d626c:	f7ff fe3d 	bl	d5eea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff fbea 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6276:	2118      	movs	r1, #24
   d6278:	4620      	mov	r0, r4
   d627a:	f000 fcb4 	bl	d6be6 <_ZdlPvj>
   d627e:	e7db      	b.n	d6238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6280 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6280:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6282:	2300      	movs	r3, #0
   d6284:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6286:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6288:	4604      	mov	r4, r0
   d628a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d628c:	b12b      	cbz	r3, d629a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d628e:	2202      	movs	r2, #2
   d6290:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6292:	68eb      	ldr	r3, [r5, #12]
   d6294:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6296:	68ab      	ldr	r3, [r5, #8]
   d6298:	60a3      	str	r3, [r4, #8]
    }
   d629a:	4620      	mov	r0, r4
   d629c:	bd38      	pop	{r3, r4, r5, pc}

000d629e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d629e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d62a0:	b570      	push	{r4, r5, r6, lr}
   d62a2:	4604      	mov	r4, r0
	  switch (__op)
   d62a4:	d007      	beq.n	d62b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d62a6:	2a03      	cmp	r2, #3
   d62a8:	d012      	beq.n	d62d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d62aa:	2a01      	cmp	r2, #1
   d62ac:	d101      	bne.n	d62b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d62ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d62b0:	6003      	str	r3, [r0, #0]
	}
   d62b2:	2000      	movs	r0, #0
   d62b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d62b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d62b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d62ba:	f7fd feea 	bl	d4092 <_Znwj>
   d62be:	4605      	mov	r5, r0
   d62c0:	b120      	cbz	r0, d62cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d62c2:	4631      	mov	r1, r6
   d62c4:	f7ff ffdc 	bl	d6280 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d62c8:	7c33      	ldrb	r3, [r6, #16]
   d62ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d62cc:	6025      	str	r5, [r4, #0]
	}
   d62ce:	e7f0      	b.n	d62b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d62d0:	6804      	ldr	r4, [r0, #0]
   d62d2:	2c00      	cmp	r4, #0
   d62d4:	d0ed      	beq.n	d62b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d62d6:	4620      	mov	r0, r4
   d62d8:	f7ff fbb7 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d62dc:	2114      	movs	r1, #20
   d62de:	4620      	mov	r0, r4
   d62e0:	f000 fc81 	bl	d6be6 <_ZdlPvj>
   d62e4:	e7e5      	b.n	d62b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d62e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d62e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ea:	b089      	sub	sp, #36	; 0x24
   d62ec:	4604      	mov	r4, r0
   d62ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d62f0:	a801      	add	r0, sp, #4
   d62f2:	4611      	mov	r1, r2
   d62f4:	f7ff fe23 	bl	d5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d62f8:	b1a4      	cbz	r4, d6324 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d62fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d62fc:	b11d      	cbz	r5, d6306 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d62fe:	4628      	mov	r0, r5
   d6300:	f001 fb0e 	bl	d7920 <strdup>
   d6304:	4605      	mov	r5, r0
   d6306:	a801      	add	r0, sp, #4
   d6308:	a903      	add	r1, sp, #12
        type_(type) {
   d630a:	9503      	str	r5, [sp, #12]
   d630c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6310:	f7ff fe78 	bl	d6004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6314:	a803      	add	r0, sp, #12
   d6316:	f7ff fde8 	bl	d5eea <_ZN8particle5ErrorD1Ev>
   d631a:	a802      	add	r0, sp, #8
   d631c:	f7fd ff80 	bl	d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6320:	b009      	add	sp, #36	; 0x24
   d6322:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6324:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6326:	2301      	movs	r3, #1
   d6328:	e8d5 2f4f 	ldrexb	r2, [r5]
   d632c:	2a00      	cmp	r2, #0
   d632e:	d103      	bne.n	d6338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6330:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6334:	2900      	cmp	r1, #0
   d6336:	d1f7      	bne.n	d6328 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6338:	d1ef      	bne.n	d631a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d633a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d633c:	f3bf 8f5b 	dmb	ish
   d6340:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6342:	1d2b      	adds	r3, r5, #4
   d6344:	f3bf 8f5b 	dmb	ish
   d6348:	e853 6f00 	ldrex	r6, [r3]
   d634c:	e843 4200 	strex	r2, r4, [r3]
   d6350:	2a00      	cmp	r2, #0
   d6352:	d1f9      	bne.n	d6348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6354:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6358:	2e00      	cmp	r6, #0
   d635a:	d0de      	beq.n	d631a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d635c:	4620      	mov	r0, r4
   d635e:	f7ff f911 	bl	d5584 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6362:	4607      	mov	r7, r0
   d6364:	b160      	cbz	r0, d6380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6366:	f105 010c 	add.w	r1, r5, #12
   d636a:	4630      	mov	r0, r6
   d636c:	f7ff fe16 	bl	d5f9c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6370:	4630      	mov	r0, r6
   d6372:	f7ff fb6a 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6376:	2110      	movs	r1, #16
   d6378:	4630      	mov	r0, r6
   d637a:	f000 fc34 	bl	d6be6 <_ZdlPvj>
   d637e:	e7cc      	b.n	d631a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6380:	4631      	mov	r1, r6
   d6382:	a803      	add	r0, sp, #12
   d6384:	f7ff ff7c 	bl	d6280 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6388:	7b2b      	ldrb	r3, [r5, #12]
   d638a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d638e:	2010      	movs	r0, #16
   d6390:	f7fd fe7f 	bl	d4092 <_Znwj>
   d6394:	4605      	mov	r5, r0
   d6396:	b1d0      	cbz	r0, d63ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6398:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d639a:	2014      	movs	r0, #20
   d639c:	f7fd fe79 	bl	d4092 <_Znwj>
   d63a0:	4604      	mov	r4, r0
   d63a2:	b178      	cbz	r0, d63c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d63a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d63a6:	4601      	mov	r1, r0
   d63a8:	a803      	add	r0, sp, #12
   d63aa:	f7ff fb5e 	bl	d5a6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d63b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d63b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d63b6:	9205      	str	r2, [sp, #20]
   d63b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d63ba:	60e3      	str	r3, [r4, #12]
   d63bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d63c0:	9206      	str	r2, [sp, #24]
   d63c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d63c4:	4b06      	ldr	r3, [pc, #24]	; (d63e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d63c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d63c8:	4b06      	ldr	r3, [pc, #24]	; (d63e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63ca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d63cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d63ce:	a803      	add	r0, sp, #12
   d63d0:	f7ff fb3b 	bl	d5a4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d63d4:	2200      	movs	r2, #0
   d63d6:	4629      	mov	r1, r5
   d63d8:	4803      	ldr	r0, [pc, #12]	; (d63e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d63da:	f7ff f8db 	bl	d5594 <application_thread_invoke>
   d63de:	e7c7      	b.n	d6370 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d63e0:	000d5faf 	.word	0x000d5faf
   d63e4:	000d629f 	.word	0x000d629f
   d63e8:	000d6745 	.word	0x000d6745

000d63ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d63ec:	4770      	bx	lr

000d63ee <_ZN9IPAddressD0Ev>:
   d63ee:	b510      	push	{r4, lr}
   d63f0:	2118      	movs	r1, #24
   d63f2:	4604      	mov	r4, r0
   d63f4:	f000 fbf7 	bl	d6be6 <_ZdlPvj>
   d63f8:	4620      	mov	r0, r4
   d63fa:	bd10      	pop	{r4, pc}

000d63fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d63fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d63fe:	7d03      	ldrb	r3, [r0, #20]
   d6400:	2b06      	cmp	r3, #6
{
   d6402:	b08d      	sub	sp, #52	; 0x34
   d6404:	460e      	mov	r6, r1
   d6406:	f100 0704 	add.w	r7, r0, #4
   d640a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d640e:	d012      	beq.n	d6436 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6410:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d6414:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6418:	220a      	movs	r2, #10
   d641a:	4630      	mov	r0, r6
   d641c:	f7ff fb91 	bl	d5b42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6420:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6422:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6424:	d019      	beq.n	d645a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6426:	2c00      	cmp	r4, #0
   d6428:	d0f4      	beq.n	d6414 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d642a:	212e      	movs	r1, #46	; 0x2e
   d642c:	4630      	mov	r0, r6
   d642e:	f7ff fb6f 	bl	d5b10 <_ZN5Print5printEc>
   d6432:	4404      	add	r4, r0
   d6434:	e7ee      	b.n	d6414 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6436:	232f      	movs	r3, #47	; 0x2f
   d6438:	466a      	mov	r2, sp
   d643a:	4639      	mov	r1, r7
   d643c:	200a      	movs	r0, #10
		buf[0] = 0;
   d643e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6442:	f7fe ff9f 	bl	d5384 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6446:	4668      	mov	r0, sp
   d6448:	f001 fa87 	bl	d795a <strlen>
   d644c:	6833      	ldr	r3, [r6, #0]
   d644e:	4602      	mov	r2, r0
   d6450:	68db      	ldr	r3, [r3, #12]
   d6452:	4669      	mov	r1, sp
   d6454:	4630      	mov	r0, r6
   d6456:	4798      	blx	r3
   d6458:	4604      	mov	r4, r0
    }
    return n;
}
   d645a:	4620      	mov	r0, r4
   d645c:	b00d      	add	sp, #52	; 0x34
   d645e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6460 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6460:	b510      	push	{r4, lr}
   d6462:	4b05      	ldr	r3, [pc, #20]	; (d6478 <_ZN9IPAddressC1Ev+0x18>)
   d6464:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6466:	2211      	movs	r2, #17
   d6468:	f840 3b04 	str.w	r3, [r0], #4
   d646c:	2100      	movs	r1, #0
   d646e:	f001 fa2b 	bl	d78c8 <memset>
}
   d6472:	4620      	mov	r0, r4
   d6474:	bd10      	pop	{r4, pc}
   d6476:	bf00      	nop
   d6478:	000d7bc8 	.word	0x000d7bc8

000d647c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d647c:	4603      	mov	r3, r0
   d647e:	4a07      	ldr	r2, [pc, #28]	; (d649c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6480:	b510      	push	{r4, lr}
   d6482:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6486:	f101 0210 	add.w	r2, r1, #16
   d648a:	f851 4b04 	ldr.w	r4, [r1], #4
   d648e:	f843 4b04 	str.w	r4, [r3], #4
   d6492:	4291      	cmp	r1, r2
   d6494:	d1f9      	bne.n	d648a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6496:	780a      	ldrb	r2, [r1, #0]
   d6498:	701a      	strb	r2, [r3, #0]
}
   d649a:	bd10      	pop	{r4, pc}
   d649c:	000d7bc8 	.word	0x000d7bc8

000d64a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d64a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d64a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d64a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d64aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d64ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d64b2:	2304      	movs	r3, #4
   d64b4:	6041      	str	r1, [r0, #4]
   d64b6:	7503      	strb	r3, [r0, #20]
}
   d64b8:	bd10      	pop	{r4, pc}
	...

000d64bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d64bc:	b513      	push	{r0, r1, r4, lr}
   d64be:	4b05      	ldr	r3, [pc, #20]	; (d64d4 <_ZN9IPAddressC1EPKh+0x18>)
   d64c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d64c2:	78cb      	ldrb	r3, [r1, #3]
   d64c4:	9300      	str	r3, [sp, #0]
   d64c6:	788b      	ldrb	r3, [r1, #2]
   d64c8:	784a      	ldrb	r2, [r1, #1]
   d64ca:	7809      	ldrb	r1, [r1, #0]
   d64cc:	f7ff ffe8 	bl	d64a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d64d0:	b002      	add	sp, #8
   d64d2:	bd10      	pop	{r4, pc}
   d64d4:	000d7bc8 	.word	0x000d7bc8

000d64d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64d8:	7441      	strb	r1, [r0, #17]
}
   d64da:	4770      	bx	lr

000d64dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d64dc:	4770      	bx	lr

000d64de <_ZN9USBSerial4readEv>:
{
   d64de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d64e0:	2100      	movs	r1, #0
   d64e2:	7c00      	ldrb	r0, [r0, #16]
   d64e4:	f7ff f81e 	bl	d5524 <HAL_USB_USART_Receive_Data>
}
   d64e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64ec:	bd08      	pop	{r3, pc}

000d64ee <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d64ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d64f0:	2101      	movs	r1, #1
   d64f2:	7c00      	ldrb	r0, [r0, #16]
   d64f4:	f7ff f816 	bl	d5524 <HAL_USB_USART_Receive_Data>
}
   d64f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64fc:	bd08      	pop	{r3, pc}

000d64fe <_ZN9USBSerial17availableForWriteEv>:
{
   d64fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6500:	7c00      	ldrb	r0, [r0, #16]
   d6502:	f7ff f807 	bl	d5514 <HAL_USB_USART_Available_Data_For_Write>
}
   d6506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650a:	bd08      	pop	{r3, pc}

000d650c <_ZN9USBSerial9availableEv>:
{
   d650c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d650e:	7c00      	ldrb	r0, [r0, #16]
   d6510:	f7fe fff8 	bl	d5504 <HAL_USB_USART_Available_Data>
}
   d6514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6518:	bd08      	pop	{r3, pc}

000d651a <_ZN9USBSerial5writeEh>:
{
   d651a:	b513      	push	{r0, r1, r4, lr}
   d651c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d651e:	7c00      	ldrb	r0, [r0, #16]
{
   d6520:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6522:	f7fe fff7 	bl	d5514 <HAL_USB_USART_Available_Data_For_Write>
   d6526:	2800      	cmp	r0, #0
   d6528:	9901      	ldr	r1, [sp, #4]
   d652a:	dc01      	bgt.n	d6530 <_ZN9USBSerial5writeEh+0x16>
   d652c:	7c60      	ldrb	r0, [r4, #17]
   d652e:	b120      	cbz	r0, d653a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6530:	7c20      	ldrb	r0, [r4, #16]
   d6532:	f7fe ffff 	bl	d5534 <HAL_USB_USART_Send_Data>
   d6536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d653a:	b002      	add	sp, #8
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d653e:	7c00      	ldrb	r0, [r0, #16]
   d6540:	f7ff b800 	b.w	d5544 <HAL_USB_USART_Flush_Data>

000d6544 <_ZN9USBSerialD0Ev>:
   d6544:	b510      	push	{r4, lr}
   d6546:	2114      	movs	r1, #20
   d6548:	4604      	mov	r4, r0
   d654a:	f000 fb4c 	bl	d6be6 <_ZdlPvj>
   d654e:	4620      	mov	r0, r4
   d6550:	bd10      	pop	{r4, pc}
	...

000d6554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6554:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d655a:	4604      	mov	r4, r0
   d655c:	4608      	mov	r0, r1
   d655e:	2100      	movs	r1, #0
   d6560:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6564:	4b04      	ldr	r3, [pc, #16]	; (d6578 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6566:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6568:	2301      	movs	r3, #1
  _serial = serial;
   d656a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d656c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d656e:	4611      	mov	r1, r2
   d6570:	f7fe ffb8 	bl	d54e4 <HAL_USB_USART_Init>
}
   d6574:	4620      	mov	r0, r4
   d6576:	bd10      	pop	{r4, pc}
   d6578:	000d7bdc 	.word	0x000d7bdc

000d657c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d657c:	7c00      	ldrb	r0, [r0, #16]
   d657e:	2200      	movs	r2, #0
   d6580:	f7fe bfb8 	b.w	d54f4 <HAL_USB_USART_Begin>

000d6584 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6584:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6586:	2214      	movs	r2, #20
{
   d6588:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d658a:	2100      	movs	r1, #0
   d658c:	f001 f99c 	bl	d78c8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6590:	4620      	mov	r0, r4
   d6592:	bd10      	pop	{r4, pc}

000d6594 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6594:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6596:	4c10      	ldr	r4, [pc, #64]	; (d65d8 <_Z16_fetch_usbserialv+0x44>)
{
   d6598:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d659a:	a803      	add	r0, sp, #12
   d659c:	f7ff fff2 	bl	d6584 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65a0:	7821      	ldrb	r1, [r4, #0]
   d65a2:	f3bf 8f5b 	dmb	ish
   d65a6:	f011 0101 	ands.w	r1, r1, #1
   d65aa:	d111      	bne.n	d65d0 <_Z16_fetch_usbserialv+0x3c>
   d65ac:	4620      	mov	r0, r4
   d65ae:	9101      	str	r1, [sp, #4]
   d65b0:	f7fd fd75 	bl	d409e <__cxa_guard_acquire>
   d65b4:	9901      	ldr	r1, [sp, #4]
   d65b6:	b158      	cbz	r0, d65d0 <_Z16_fetch_usbserialv+0x3c>
   d65b8:	aa03      	add	r2, sp, #12
   d65ba:	4808      	ldr	r0, [pc, #32]	; (d65dc <_Z16_fetch_usbserialv+0x48>)
   d65bc:	f7ff ffca 	bl	d6554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d65c0:	4620      	mov	r0, r4
   d65c2:	f7fd fd71 	bl	d40a8 <__cxa_guard_release>
   d65c6:	4a06      	ldr	r2, [pc, #24]	; (d65e0 <_Z16_fetch_usbserialv+0x4c>)
   d65c8:	4906      	ldr	r1, [pc, #24]	; (d65e4 <_Z16_fetch_usbserialv+0x50>)
   d65ca:	4804      	ldr	r0, [pc, #16]	; (d65dc <_Z16_fetch_usbserialv+0x48>)
   d65cc:	f000 fb06 	bl	d6bdc <__aeabi_atexit>
	return _usbserial;
}
   d65d0:	4802      	ldr	r0, [pc, #8]	; (d65dc <_Z16_fetch_usbserialv+0x48>)
   d65d2:	b008      	add	sp, #32
   d65d4:	bd10      	pop	{r4, pc}
   d65d6:	bf00      	nop
   d65d8:	2003e680 	.word	0x2003e680
   d65dc:	2003e684 	.word	0x2003e684
   d65e0:	2003e5c4 	.word	0x2003e5c4
   d65e4:	000d64dd 	.word	0x000d64dd

000d65e8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d65e8:	4700      	bx	r0
	...

000d65ec <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d65ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d65f0:	2400      	movs	r4, #0
{
   d65f2:	461d      	mov	r5, r3
   d65f4:	460f      	mov	r7, r1
   d65f6:	4690      	mov	r8, r2
   d65f8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d65fa:	f7fe fe73 	bl	d52e4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d65fe:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6600:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6604:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6608:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d660c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6610:	bfa2      	ittt	ge
   d6612:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6616:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d661a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d661c:	4907      	ldr	r1, [pc, #28]	; (d663c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d661e:	9400      	str	r4, [sp, #0]
   d6620:	4643      	mov	r3, r8
   d6622:	463a      	mov	r2, r7
   d6624:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6626:	bfa8      	it	ge
   d6628:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d662c:	f7fe fe52 	bl	d52d4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6630:	fab0 f080 	clz	r0, r0
   d6634:	0940      	lsrs	r0, r0, #5
   d6636:	b004      	add	sp, #16
   d6638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d663c:	000d65e9 	.word	0x000d65e9

000d6640 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6640:	f7fe be60 	b.w	d5304 <HAL_Interrupts_Disable_All>

000d6644 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6644:	f7fe be56 	b.w	d52f4 <HAL_Interrupts_Enable_All>

000d6648 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6648:	4770      	bx	lr

000d664a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d664a:	7441      	strb	r1, [r0, #17]
}
   d664c:	4770      	bx	lr

000d664e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d664e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6650:	7c00      	ldrb	r0, [r0, #16]
   d6652:	f7fe fed7 	bl	d5404 <hal_usart_available_data_for_write>
}
   d6656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d665a:	bd08      	pop	{r3, pc}

000d665c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d665c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7fe fea8 	bl	d53b4 <hal_usart_available>
}
   d6664:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6668:	bd08      	pop	{r3, pc}

000d666a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d666a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d666c:	7c00      	ldrb	r0, [r0, #16]
   d666e:	f7fe feb1 	bl	d53d4 <hal_usart_peek>
}
   d6672:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6676:	bd08      	pop	{r3, pc}

000d6678 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6678:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d667a:	7c00      	ldrb	r0, [r0, #16]
   d667c:	f7fe fea2 	bl	d53c4 <hal_usart_read>
}
   d6680:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6684:	bd08      	pop	{r3, pc}

000d6686 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6686:	7c00      	ldrb	r0, [r0, #16]
   d6688:	f7fe beac 	b.w	d53e4 <hal_usart_flush>

000d668c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d668c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d668e:	7c45      	ldrb	r5, [r0, #17]
{
   d6690:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6692:	b12d      	cbz	r5, d66a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6694:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6696:	b003      	add	sp, #12
   d6698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d669c:	f7fe be82 	b.w	d53a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66a0:	7c00      	ldrb	r0, [r0, #16]
   d66a2:	9101      	str	r1, [sp, #4]
   d66a4:	f7fe feae 	bl	d5404 <hal_usart_available_data_for_write>
   d66a8:	2800      	cmp	r0, #0
   d66aa:	9901      	ldr	r1, [sp, #4]
   d66ac:	dcf2      	bgt.n	d6694 <_ZN11USARTSerial5writeEh+0x8>
}
   d66ae:	4628      	mov	r0, r5
   d66b0:	b003      	add	sp, #12
   d66b2:	bd30      	pop	{r4, r5, pc}

000d66b4 <_ZN11USARTSerialD0Ev>:
   d66b4:	b510      	push	{r4, lr}
   d66b6:	2114      	movs	r1, #20
   d66b8:	4604      	mov	r4, r0
   d66ba:	f000 fa94 	bl	d6be6 <_ZdlPvj>
   d66be:	4620      	mov	r0, r4
   d66c0:	bd10      	pop	{r4, pc}
	...

000d66c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d66c4:	b510      	push	{r4, lr}
   d66c6:	f04f 0c00 	mov.w	ip, #0
   d66ca:	4604      	mov	r4, r0
   d66cc:	4608      	mov	r0, r1
   d66ce:	4611      	mov	r1, r2
   d66d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66d4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d66d8:	4a04      	ldr	r2, [pc, #16]	; (d66ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d66da:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d66dc:	2201      	movs	r2, #1
  _serial = serial;
   d66de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d66e0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d66e2:	461a      	mov	r2, r3
   d66e4:	f7fe fe56 	bl	d5394 <hal_usart_init>
}
   d66e8:	4620      	mov	r0, r4
   d66ea:	bd10      	pop	{r4, pc}
   d66ec:	000d7c0c 	.word	0x000d7c0c

000d66f0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66f0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d66f2:	4c0e      	ldr	r4, [pc, #56]	; (d672c <_Z22__fetch_global_Serial1v+0x3c>)
   d66f4:	7821      	ldrb	r1, [r4, #0]
   d66f6:	f3bf 8f5b 	dmb	ish
   d66fa:	f011 0101 	ands.w	r1, r1, #1
   d66fe:	d112      	bne.n	d6726 <_Z22__fetch_global_Serial1v+0x36>
   d6700:	4620      	mov	r0, r4
   d6702:	9101      	str	r1, [sp, #4]
   d6704:	f7fd fccb 	bl	d409e <__cxa_guard_acquire>
   d6708:	9901      	ldr	r1, [sp, #4]
   d670a:	b160      	cbz	r0, d6726 <_Z22__fetch_global_Serial1v+0x36>
   d670c:	4a08      	ldr	r2, [pc, #32]	; (d6730 <_Z22__fetch_global_Serial1v+0x40>)
   d670e:	4b09      	ldr	r3, [pc, #36]	; (d6734 <_Z22__fetch_global_Serial1v+0x44>)
   d6710:	4809      	ldr	r0, [pc, #36]	; (d6738 <_Z22__fetch_global_Serial1v+0x48>)
   d6712:	f7ff ffd7 	bl	d66c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6716:	4620      	mov	r0, r4
   d6718:	f7fd fcc6 	bl	d40a8 <__cxa_guard_release>
   d671c:	4a07      	ldr	r2, [pc, #28]	; (d673c <_Z22__fetch_global_Serial1v+0x4c>)
   d671e:	4908      	ldr	r1, [pc, #32]	; (d6740 <_Z22__fetch_global_Serial1v+0x50>)
   d6720:	4805      	ldr	r0, [pc, #20]	; (d6738 <_Z22__fetch_global_Serial1v+0x48>)
   d6722:	f000 fa5b 	bl	d6bdc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6726:	4804      	ldr	r0, [pc, #16]	; (d6738 <_Z22__fetch_global_Serial1v+0x48>)
   d6728:	b002      	add	sp, #8
   d672a:	bd10      	pop	{r4, pc}
   d672c:	2003e698 	.word	0x2003e698
   d6730:	2003e69c 	.word	0x2003e69c
   d6734:	2003e720 	.word	0x2003e720
   d6738:	2003e7a4 	.word	0x2003e7a4
   d673c:	2003e5c4 	.word	0x2003e5c4
   d6740:	000d6649 	.word	0x000d6649

000d6744 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6744:	b510      	push	{r4, lr}
      if (_M_empty())
   d6746:	6883      	ldr	r3, [r0, #8]
   d6748:	4604      	mov	r4, r0
   d674a:	b90b      	cbnz	r3, d6750 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d674c:	f000 fa4f 	bl	d6bee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6750:	68c3      	ldr	r3, [r0, #12]
   d6752:	4798      	blx	r3
      if (_M_manager)
   d6754:	68a3      	ldr	r3, [r4, #8]
   d6756:	b11b      	cbz	r3, d6760 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6758:	2203      	movs	r2, #3
   d675a:	4621      	mov	r1, r4
   d675c:	4620      	mov	r0, r4
   d675e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6760:	4620      	mov	r0, r4
   d6762:	2110      	movs	r1, #16
}
   d6764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6768:	f000 ba3d 	b.w	d6be6 <_ZdlPvj>

000d676c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d676c:	4770      	bx	lr

000d676e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d676e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6770:	4606      	mov	r6, r0
   d6772:	4615      	mov	r5, r2
   d6774:	460c      	mov	r4, r1
   d6776:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6778:	42bc      	cmp	r4, r7
   d677a:	d006      	beq.n	d678a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d677c:	6833      	ldr	r3, [r6, #0]
   d677e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6782:	689b      	ldr	r3, [r3, #8]
   d6784:	4630      	mov	r0, r6
   d6786:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6788:	e7f6      	b.n	d6778 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d678a:	4628      	mov	r0, r5
   d678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d678e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d678e:	7c00      	ldrb	r0, [r0, #16]
   d6790:	2200      	movs	r2, #0
   d6792:	f7fe be57 	b.w	d5444 <hal_i2c_write>

000d6796 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6796:	7c00      	ldrb	r0, [r0, #16]
   d6798:	2100      	movs	r1, #0
   d679a:	f7fe be5b 	b.w	d5454 <hal_i2c_available>

000d679e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d679e:	7c00      	ldrb	r0, [r0, #16]
   d67a0:	2100      	movs	r1, #0
   d67a2:	f7fe be5f 	b.w	d5464 <hal_i2c_read>

000d67a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d67a6:	7c00      	ldrb	r0, [r0, #16]
   d67a8:	2100      	movs	r1, #0
   d67aa:	f7fe be63 	b.w	d5474 <hal_i2c_peek>

000d67ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d67ae:	7c00      	ldrb	r0, [r0, #16]
   d67b0:	2100      	movs	r1, #0
   d67b2:	f7fe be67 	b.w	d5484 <hal_i2c_flush>

000d67b6 <_ZN7TwoWireD0Ev>:
   d67b6:	b510      	push	{r4, lr}
   d67b8:	2114      	movs	r1, #20
   d67ba:	4604      	mov	r4, r0
   d67bc:	f000 fa13 	bl	d6be6 <_ZdlPvj>
   d67c0:	4620      	mov	r0, r4
   d67c2:	bd10      	pop	{r4, pc}

000d67c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d67c4:	b510      	push	{r4, lr}
   d67c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67ca:	4604      	mov	r4, r0
   d67cc:	4608      	mov	r0, r1
   d67ce:	2100      	movs	r1, #0
   d67d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d67d4:	4b03      	ldr	r3, [pc, #12]	; (d67e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d67d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d67d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d67da:	4611      	mov	r1, r2
   d67dc:	f7fe fe62 	bl	d54a4 <hal_i2c_init>
}
   d67e0:	4620      	mov	r0, r4
   d67e2:	bd10      	pop	{r4, pc}
   d67e4:	000d7c3c 	.word	0x000d7c3c

000d67e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d67e8:	2300      	movs	r3, #0
   d67ea:	7c00      	ldrb	r0, [r0, #16]
   d67ec:	461a      	mov	r2, r3
   d67ee:	4619      	mov	r1, r3
   d67f0:	f7fe be10 	b.w	d5414 <hal_i2c_begin>

000d67f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d67f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d67f6:	2200      	movs	r2, #0
   d67f8:	2314      	movs	r3, #20
   d67fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d67fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6802:	780b      	ldrb	r3, [r1, #0]
   d6804:	f88d 3008 	strb.w	r3, [sp, #8]
   d6808:	684b      	ldr	r3, [r1, #4]
   d680a:	9303      	str	r3, [sp, #12]
   d680c:	68cb      	ldr	r3, [r1, #12]
   d680e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6810:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6812:	7a0b      	ldrb	r3, [r1, #8]
   d6814:	9305      	str	r3, [sp, #20]
   d6816:	a901      	add	r1, sp, #4
   d6818:	f7fe fe4c 	bl	d54b4 <hal_i2c_request_ex>
}
   d681c:	b007      	add	sp, #28
   d681e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6822 <_ZN7TwoWire11requestFromEhjh>:
{
   d6822:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6824:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6826:	f88d 1000 	strb.w	r1, [sp]
   d682a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d682e:	9103      	str	r1, [sp, #12]
   d6830:	bf18      	it	ne
   d6832:	2301      	movne	r3, #1
   d6834:	4669      	mov	r1, sp
    size_ = size;
   d6836:	9201      	str	r2, [sp, #4]
   d6838:	f88d 3008 	strb.w	r3, [sp, #8]
   d683c:	f7ff ffda 	bl	d67f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6840:	b005      	add	sp, #20
   d6842:	f85d fb04 	ldr.w	pc, [sp], #4

000d6846 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6846:	2301      	movs	r3, #1
   d6848:	f7ff bfeb 	b.w	d6822 <_ZN7TwoWire11requestFromEhjh>

000d684c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d684c:	7c00      	ldrb	r0, [r0, #16]
   d684e:	2200      	movs	r2, #0
   d6850:	f7fe bde8 	b.w	d5424 <hal_i2c_begin_transmission>

000d6854 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6854:	7c00      	ldrb	r0, [r0, #16]
   d6856:	2200      	movs	r2, #0
   d6858:	f7fe bdec 	b.w	d5434 <hal_i2c_end_transmission>

000d685c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d685c:	2101      	movs	r1, #1
   d685e:	f7ff bff9 	b.w	d6854 <_ZN7TwoWire15endTransmissionEh>

000d6862 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6862:	2200      	movs	r2, #0
   d6864:	6840      	ldr	r0, [r0, #4]
   d6866:	4611      	mov	r1, r2
   d6868:	f7fe bec8 	b.w	d55fc <network_ready>

000d686c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d686c:	2200      	movs	r2, #0
   d686e:	6840      	ldr	r0, [r0, #4]
   d6870:	4611      	mov	r1, r2
   d6872:	f7fe bee3 	b.w	d563c <network_listening>

000d6876 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6876:	2200      	movs	r2, #0
   d6878:	6840      	ldr	r0, [r0, #4]
   d687a:	4611      	mov	r1, r2
   d687c:	f7fe beee 	b.w	d565c <network_get_listen_timeout>

000d6880 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6880:	6840      	ldr	r0, [r0, #4]
   d6882:	2200      	movs	r2, #0
   d6884:	f7fe bee2 	b.w	d564c <network_set_listen_timeout>

000d6888 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6888:	6840      	ldr	r0, [r0, #4]
   d688a:	2200      	movs	r2, #0
   d688c:	f081 0101 	eor.w	r1, r1, #1
   d6890:	f7fe becc 	b.w	d562c <network_listen>

000d6894 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6894:	2300      	movs	r3, #0
   d6896:	6840      	ldr	r0, [r0, #4]
   d6898:	461a      	mov	r2, r3
   d689a:	4619      	mov	r1, r3
   d689c:	f7fe bebe 	b.w	d561c <network_off>

000d68a0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68a0:	2200      	movs	r2, #0
   d68a2:	6840      	ldr	r0, [r0, #4]
   d68a4:	4611      	mov	r1, r2
   d68a6:	f7fe be99 	b.w	d55dc <network_connecting>

000d68aa <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68aa:	6840      	ldr	r0, [r0, #4]
   d68ac:	2200      	movs	r2, #0
   d68ae:	2102      	movs	r1, #2
   d68b0:	f7fe be9c 	b.w	d55ec <network_disconnect>

000d68b4 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68b4:	2300      	movs	r3, #0
   d68b6:	6840      	ldr	r0, [r0, #4]
   d68b8:	461a      	mov	r2, r3
   d68ba:	f7fe be87 	b.w	d55cc <network_connect>
	...

000d68c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68c0:	4b02      	ldr	r3, [pc, #8]	; (d68cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68c2:	2204      	movs	r2, #4
   d68c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68c6:	4a02      	ldr	r2, [pc, #8]	; (d68d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d68ca:	4770      	bx	lr
   d68cc:	2003e7b8 	.word	0x2003e7b8
   d68d0:	000d7c64 	.word	0x000d7c64

000d68d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d68d4:	2300      	movs	r3, #0
   d68d6:	6840      	ldr	r0, [r0, #4]
   d68d8:	461a      	mov	r2, r3
   d68da:	f7fe be77 	b.w	d55cc <network_connect>

000d68de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	2200      	movs	r2, #0
   d68e2:	2102      	movs	r1, #2
   d68e4:	f7fe be82 	b.w	d55ec <network_disconnect>

000d68e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d68e8:	2200      	movs	r2, #0
   d68ea:	6840      	ldr	r0, [r0, #4]
   d68ec:	4611      	mov	r1, r2
   d68ee:	f7fe be75 	b.w	d55dc <network_connecting>

000d68f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d68f2:	2200      	movs	r2, #0
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	4611      	mov	r1, r2
   d68f8:	f7fe be80 	b.w	d55fc <network_ready>

000d68fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d68fc:	2300      	movs	r3, #0
   d68fe:	6840      	ldr	r0, [r0, #4]
   d6900:	461a      	mov	r2, r3
   d6902:	4619      	mov	r1, r3
   d6904:	f7fe be82 	b.w	d560c <network_on>

000d6908 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6908:	2300      	movs	r3, #0
   d690a:	6840      	ldr	r0, [r0, #4]
   d690c:	461a      	mov	r2, r3
   d690e:	4619      	mov	r1, r3
   d6910:	f7fe be84 	b.w	d561c <network_off>

000d6914 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6914:	6840      	ldr	r0, [r0, #4]
   d6916:	2100      	movs	r1, #0
   d6918:	f7fe bea8 	b.w	d566c <network_is_on>

000d691c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d691c:	6840      	ldr	r0, [r0, #4]
   d691e:	2100      	movs	r1, #0
   d6920:	f7fe beac 	b.w	d567c <network_is_off>

000d6924 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	2200      	movs	r2, #0
   d6928:	f081 0101 	eor.w	r1, r1, #1
   d692c:	f7fe be7e 	b.w	d562c <network_listen>

000d6930 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6930:	6840      	ldr	r0, [r0, #4]
   d6932:	2200      	movs	r2, #0
   d6934:	f7fe be8a 	b.w	d564c <network_set_listen_timeout>

000d6938 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6938:	2200      	movs	r2, #0
   d693a:	6840      	ldr	r0, [r0, #4]
   d693c:	4611      	mov	r1, r2
   d693e:	f7fe be8d 	b.w	d565c <network_get_listen_timeout>

000d6942 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6942:	2200      	movs	r2, #0
   d6944:	6840      	ldr	r0, [r0, #4]
   d6946:	4611      	mov	r1, r2
   d6948:	f7fe be78 	b.w	d563c <network_listening>

000d694c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d694c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6950:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6952:	b095      	sub	sp, #84	; 0x54
   d6954:	4616      	mov	r6, r2
   d6956:	460d      	mov	r5, r1
   d6958:	4607      	mov	r7, r0
    IPAddress addr;
   d695a:	f7ff fd81 	bl	d6460 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d695e:	4621      	mov	r1, r4
   d6960:	2218      	movs	r2, #24
   d6962:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6964:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6966:	f000 ffaf 	bl	d78c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d696a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d696c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6970:	4621      	mov	r1, r4
   d6972:	466b      	mov	r3, sp
   d6974:	aa0c      	add	r2, sp, #48	; 0x30
   d6976:	4630      	mov	r0, r6
   d6978:	f7fe fc7c 	bl	d5274 <netdb_getaddrinfo>
    if (!r) {
   d697c:	4604      	mov	r4, r0
   d697e:	2800      	cmp	r0, #0
   d6980:	d14c      	bne.n	d6a1c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6982:	4602      	mov	r2, r0
   d6984:	2101      	movs	r1, #1
   d6986:	6868      	ldr	r0, [r5, #4]
   d6988:	f7fe fe38 	bl	d55fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d698c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d698e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6990:	4622      	mov	r2, r4
   d6992:	6868      	ldr	r0, [r5, #4]
   d6994:	f7fe fe32 	bl	d55fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6998:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d699a:	4681      	mov	r9, r0
        bool ok = false;
   d699c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d699e:	2e00      	cmp	r6, #0
   d69a0:	d03c      	beq.n	d6a1c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d69a2:	2900      	cmp	r1, #0
   d69a4:	d13a      	bne.n	d6a1c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d69a6:	6873      	ldr	r3, [r6, #4]
   d69a8:	2b02      	cmp	r3, #2
   d69aa:	d003      	beq.n	d69b4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d69ac:	2b0a      	cmp	r3, #10
   d69ae:	d011      	beq.n	d69d4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69b0:	69f6      	ldr	r6, [r6, #28]
   d69b2:	e7f4      	b.n	d699e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d69b4:	f1b8 0f00 	cmp.w	r8, #0
   d69b8:	d00a      	beq.n	d69d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d69ba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d69bc:	a806      	add	r0, sp, #24
   d69be:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d69c0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d69c2:	f7ff fd7b 	bl	d64bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d69c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69c8:	1d3c      	adds	r4, r7, #4
   d69ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69cc:	682b      	ldr	r3, [r5, #0]
   d69ce:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d69d0:	4641      	mov	r1, r8
   d69d2:	e7ed      	b.n	d69b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d69d4:	f1b9 0f00 	cmp.w	r9, #0
   d69d8:	d101      	bne.n	d69de <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d69da:	4649      	mov	r1, r9
   d69dc:	e7e8      	b.n	d69b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d69de:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d69e0:	2210      	movs	r2, #16
   d69e2:	a801      	add	r0, sp, #4
   d69e4:	f000 ff70 	bl	d78c8 <memset>
                    a.v = 6;
   d69e8:	2306      	movs	r3, #6
   d69ea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d69ee:	ad01      	add	r5, sp, #4
   d69f0:	f104 0308 	add.w	r3, r4, #8
   d69f4:	3418      	adds	r4, #24
   d69f6:	6818      	ldr	r0, [r3, #0]
   d69f8:	6859      	ldr	r1, [r3, #4]
   d69fa:	462a      	mov	r2, r5
   d69fc:	c203      	stmia	r2!, {r0, r1}
   d69fe:	3308      	adds	r3, #8
   d6a00:	42a3      	cmp	r3, r4
   d6a02:	4615      	mov	r5, r2
   d6a04:	d1f7      	bne.n	d69f6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6a06:	a901      	add	r1, sp, #4
   d6a08:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6a0a:	ad07      	add	r5, sp, #28
   d6a0c:	f7ff fd36 	bl	d647c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a12:	1d3c      	adds	r4, r7, #4
   d6a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a16:	682b      	ldr	r3, [r5, #0]
   d6a18:	7023      	strb	r3, [r4, #0]
   d6a1a:	e7de      	b.n	d69da <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6a1c:	9800      	ldr	r0, [sp, #0]
   d6a1e:	f7fe fc21 	bl	d5264 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a22:	4638      	mov	r0, r7
   d6a24:	b015      	add	sp, #84	; 0x54
   d6a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a2c:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a2e:	4a03      	ldr	r2, [pc, #12]	; (d6a3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a30:	601a      	str	r2, [r3, #0]
   d6a32:	2200      	movs	r2, #0
   d6a34:	605a      	str	r2, [r3, #4]

} // spark
   d6a36:	4770      	bx	lr
   d6a38:	2003e7c0 	.word	0x2003e7c0
   d6a3c:	000d7ca0 	.word	0x000d7ca0

000d6a40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a40:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a42:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a44:	d902      	bls.n	d6a4c <pinAvailable+0xc>
    return false;
   d6a46:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a48:	b002      	add	sp, #8
   d6a4a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6a4c:	f1a0 030b 	sub.w	r3, r0, #11
   d6a50:	2b02      	cmp	r3, #2
   d6a52:	d81a      	bhi.n	d6a8a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6a54:	4c17      	ldr	r4, [pc, #92]	; (d6ab4 <pinAvailable+0x74>)
   d6a56:	7821      	ldrb	r1, [r4, #0]
   d6a58:	f3bf 8f5b 	dmb	ish
   d6a5c:	f011 0101 	ands.w	r1, r1, #1
   d6a60:	d10b      	bne.n	d6a7a <pinAvailable+0x3a>
   d6a62:	4620      	mov	r0, r4
   d6a64:	9101      	str	r1, [sp, #4]
   d6a66:	f7fd fb1a 	bl	d409e <__cxa_guard_acquire>
   d6a6a:	9901      	ldr	r1, [sp, #4]
   d6a6c:	b128      	cbz	r0, d6a7a <pinAvailable+0x3a>
   d6a6e:	4812      	ldr	r0, [pc, #72]	; (d6ab8 <pinAvailable+0x78>)
   d6a70:	f7fe fe9a 	bl	d57a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6a74:	4620      	mov	r0, r4
   d6a76:	f7fd fb17 	bl	d40a8 <__cxa_guard_release>
   d6a7a:	4b0f      	ldr	r3, [pc, #60]	; (d6ab8 <pinAvailable+0x78>)
   d6a7c:	7818      	ldrb	r0, [r3, #0]
   d6a7e:	f7fe fd29 	bl	d54d4 <hal_spi_is_enabled>
   d6a82:	2800      	cmp	r0, #0
   d6a84:	d1df      	bne.n	d6a46 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6a86:	2001      	movs	r0, #1
   d6a88:	e7de      	b.n	d6a48 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6a8a:	2801      	cmp	r0, #1
   d6a8c:	d809      	bhi.n	d6aa2 <pinAvailable+0x62>
   d6a8e:	f000 f87d 	bl	d6b8c <_Z19__fetch_global_Wirev>
   d6a92:	2100      	movs	r1, #0
   d6a94:	7c00      	ldrb	r0, [r0, #16]
   d6a96:	f7fe fcfd 	bl	d5494 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6a9a:	f080 0001 	eor.w	r0, r0, #1
   d6a9e:	b2c0      	uxtb	r0, r0
   d6aa0:	e7d2      	b.n	d6a48 <pinAvailable+0x8>
   d6aa2:	3809      	subs	r0, #9
   d6aa4:	2801      	cmp	r0, #1
   d6aa6:	d8ee      	bhi.n	d6a86 <pinAvailable+0x46>
   d6aa8:	f7ff fe22 	bl	d66f0 <_Z22__fetch_global_Serial1v>
   d6aac:	7c00      	ldrb	r0, [r0, #16]
   d6aae:	f7fe fca1 	bl	d53f4 <hal_usart_is_enabled>
   d6ab2:	e7f2      	b.n	d6a9a <pinAvailable+0x5a>
   d6ab4:	2003e7c8 	.word	0x2003e7c8
   d6ab8:	2003e7cc 	.word	0x2003e7cc

000d6abc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6abc:	2823      	cmp	r0, #35	; 0x23
{
   d6abe:	b538      	push	{r3, r4, r5, lr}
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ac4:	d80a      	bhi.n	d6adc <pinMode+0x20>
   d6ac6:	29ff      	cmp	r1, #255	; 0xff
   d6ac8:	d008      	beq.n	d6adc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6aca:	f7ff ffb9 	bl	d6a40 <pinAvailable>
   d6ace:	b128      	cbz	r0, d6adc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ad0:	4629      	mov	r1, r5
   d6ad2:	4620      	mov	r0, r4
}
   d6ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ad8:	f7fe bbe4 	b.w	d52a4 <HAL_Pin_Mode>
}
   d6adc:	bd38      	pop	{r3, r4, r5, pc}

000d6ade <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ade:	b538      	push	{r3, r4, r5, lr}
   d6ae0:	4604      	mov	r4, r0
   d6ae2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ae4:	f7fe fbe6 	bl	d52b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ae8:	28ff      	cmp	r0, #255	; 0xff
   d6aea:	d010      	beq.n	d6b0e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6aec:	2806      	cmp	r0, #6
   d6aee:	d804      	bhi.n	d6afa <digitalWrite+0x1c>
   d6af0:	234d      	movs	r3, #77	; 0x4d
   d6af2:	fa23 f000 	lsr.w	r0, r3, r0
   d6af6:	07c3      	lsls	r3, r0, #31
   d6af8:	d409      	bmi.n	d6b0e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6afa:	4620      	mov	r0, r4
   d6afc:	f7ff ffa0 	bl	d6a40 <pinAvailable>
   d6b00:	b128      	cbz	r0, d6b0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6b02:	4629      	mov	r1, r5
   d6b04:	4620      	mov	r0, r4
}
   d6b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6b0a:	f7fe bbdb 	b.w	d52c4 <HAL_GPIO_Write>
}
   d6b0e:	bd38      	pop	{r3, r4, r5, pc}

000d6b10 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6b10:	b538      	push	{r3, r4, r5, lr}
   d6b12:	4604      	mov	r4, r0
   d6b14:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6b16:	f7ff ff93 	bl	d6a40 <pinAvailable>
   d6b1a:	b1f0      	cbz	r0, d6b5a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6b1c:	2104      	movs	r1, #4
   d6b1e:	4620      	mov	r0, r4
   d6b20:	f7fe fbb8 	bl	d5294 <HAL_Validate_Pin_Function>
   d6b24:	2804      	cmp	r0, #4
   d6b26:	d105      	bne.n	d6b34 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6b28:	b2a9      	uxth	r1, r5
   d6b2a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6b30:	f7fe bbf0 	b.w	d5314 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6b34:	2102      	movs	r1, #2
   d6b36:	4620      	mov	r0, r4
   d6b38:	f7fe fbac 	bl	d5294 <HAL_Validate_Pin_Function>
   d6b3c:	2802      	cmp	r0, #2
   d6b3e:	d10c      	bne.n	d6b5a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b40:	4620      	mov	r0, r4
   d6b42:	f7fe fbb7 	bl	d52b4 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6b46:	2801      	cmp	r0, #1
   d6b48:	d001      	beq.n	d6b4e <_Z11analogWritetm+0x3e>
   d6b4a:	2804      	cmp	r0, #4
   d6b4c:	d105      	bne.n	d6b5a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6b4e:	4629      	mov	r1, r5
   d6b50:	4620      	mov	r0, r4
}
   d6b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d6b56:	f7fe bbe5 	b.w	d5324 <hal_pwm_write_ext>
}
   d6b5a:	bd38      	pop	{r3, r4, r5, pc}

000d6b5c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6b5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6b5e:	2300      	movs	r3, #0
   d6b60:	2520      	movs	r5, #32
   d6b62:	8043      	strh	r3, [r0, #2]
   d6b64:	2314      	movs	r3, #20
{
   d6b66:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6b68:	8003      	strh	r3, [r0, #0]
   d6b6a:	6085      	str	r5, [r0, #8]
   d6b6c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b6e:	4906      	ldr	r1, [pc, #24]	; (d6b88 <_Z17acquireWireBufferv+0x2c>)
   d6b70:	4628      	mov	r0, r5
   d6b72:	f000 f83a 	bl	d6bea <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b76:	4904      	ldr	r1, [pc, #16]	; (d6b88 <_Z17acquireWireBufferv+0x2c>)
	};
   d6b78:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b7a:	4628      	mov	r0, r5
   d6b7c:	f000 f835 	bl	d6bea <_ZnajRKSt9nothrow_t>
	};
   d6b80:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6b82:	4620      	mov	r0, r4
   d6b84:	bd38      	pop	{r3, r4, r5, pc}
   d6b86:	bf00      	nop
   d6b88:	000d7cd4 	.word	0x000d7cd4

000d6b8c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6b8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6b8e:	4d0f      	ldr	r5, [pc, #60]	; (d6bcc <_Z19__fetch_global_Wirev+0x40>)
   d6b90:	7829      	ldrb	r1, [r5, #0]
   d6b92:	f3bf 8f5b 	dmb	ish
   d6b96:	f011 0401 	ands.w	r4, r1, #1
{
   d6b9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6b9c:	d113      	bne.n	d6bc6 <_Z19__fetch_global_Wirev+0x3a>
   d6b9e:	4628      	mov	r0, r5
   d6ba0:	f7fd fa7d 	bl	d409e <__cxa_guard_acquire>
   d6ba4:	b178      	cbz	r0, d6bc6 <_Z19__fetch_global_Wirev+0x3a>
   d6ba6:	a801      	add	r0, sp, #4
   d6ba8:	f7ff ffd8 	bl	d6b5c <_Z17acquireWireBufferv>
   d6bac:	aa01      	add	r2, sp, #4
   d6bae:	4621      	mov	r1, r4
   d6bb0:	4807      	ldr	r0, [pc, #28]	; (d6bd0 <_Z19__fetch_global_Wirev+0x44>)
   d6bb2:	f7ff fe07 	bl	d67c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6bb6:	4628      	mov	r0, r5
   d6bb8:	f7fd fa76 	bl	d40a8 <__cxa_guard_release>
   d6bbc:	4a05      	ldr	r2, [pc, #20]	; (d6bd4 <_Z19__fetch_global_Wirev+0x48>)
   d6bbe:	4906      	ldr	r1, [pc, #24]	; (d6bd8 <_Z19__fetch_global_Wirev+0x4c>)
   d6bc0:	4803      	ldr	r0, [pc, #12]	; (d6bd0 <_Z19__fetch_global_Wirev+0x44>)
   d6bc2:	f000 f80b 	bl	d6bdc <__aeabi_atexit>
	return wire;
}
   d6bc6:	4802      	ldr	r0, [pc, #8]	; (d6bd0 <_Z19__fetch_global_Wirev+0x44>)
   d6bc8:	b007      	add	sp, #28
   d6bca:	bd30      	pop	{r4, r5, pc}
   d6bcc:	2003e7d8 	.word	0x2003e7d8
   d6bd0:	2003e7dc 	.word	0x2003e7dc
   d6bd4:	2003e5c4 	.word	0x2003e5c4
   d6bd8:	000d676d 	.word	0x000d676d

000d6bdc <__aeabi_atexit>:
   d6bdc:	460b      	mov	r3, r1
   d6bde:	4601      	mov	r1, r0
   d6be0:	4618      	mov	r0, r3
   d6be2:	f000 be55 	b.w	d7890 <__cxa_atexit>

000d6be6 <_ZdlPvj>:
   d6be6:	f7fd ba58 	b.w	d409a <_ZdlPv>

000d6bea <_ZnajRKSt9nothrow_t>:
   d6bea:	f7fd ba54 	b.w	d4096 <_Znaj>

000d6bee <_ZSt25__throw_bad_function_callv>:
   d6bee:	b508      	push	{r3, lr}
   d6bf0:	f7fe fd84 	bl	d56fc <abort>

000d6bf4 <__aeabi_drsub>:
   d6bf4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6bf8:	e002      	b.n	d6c00 <__adddf3>
   d6bfa:	bf00      	nop

000d6bfc <__aeabi_dsub>:
   d6bfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c00 <__adddf3>:
   d6c00:	b530      	push	{r4, r5, lr}
   d6c02:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c06:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c0a:	ea94 0f05 	teq	r4, r5
   d6c0e:	bf08      	it	eq
   d6c10:	ea90 0f02 	teqeq	r0, r2
   d6c14:	bf1f      	itttt	ne
   d6c16:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c1a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c26:	f000 80e2 	beq.w	d6dee <__adddf3+0x1ee>
   d6c2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c32:	bfb8      	it	lt
   d6c34:	426d      	neglt	r5, r5
   d6c36:	dd0c      	ble.n	d6c52 <__adddf3+0x52>
   d6c38:	442c      	add	r4, r5
   d6c3a:	ea80 0202 	eor.w	r2, r0, r2
   d6c3e:	ea81 0303 	eor.w	r3, r1, r3
   d6c42:	ea82 0000 	eor.w	r0, r2, r0
   d6c46:	ea83 0101 	eor.w	r1, r3, r1
   d6c4a:	ea80 0202 	eor.w	r2, r0, r2
   d6c4e:	ea81 0303 	eor.w	r3, r1, r3
   d6c52:	2d36      	cmp	r5, #54	; 0x36
   d6c54:	bf88      	it	hi
   d6c56:	bd30      	pophi	{r4, r5, pc}
   d6c58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c68:	d002      	beq.n	d6c70 <__adddf3+0x70>
   d6c6a:	4240      	negs	r0, r0
   d6c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c74:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c7c:	d002      	beq.n	d6c84 <__adddf3+0x84>
   d6c7e:	4252      	negs	r2, r2
   d6c80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c84:	ea94 0f05 	teq	r4, r5
   d6c88:	f000 80a7 	beq.w	d6dda <__adddf3+0x1da>
   d6c8c:	f1a4 0401 	sub.w	r4, r4, #1
   d6c90:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c94:	db0d      	blt.n	d6cb2 <__adddf3+0xb2>
   d6c96:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c9a:	fa22 f205 	lsr.w	r2, r2, r5
   d6c9e:	1880      	adds	r0, r0, r2
   d6ca0:	f141 0100 	adc.w	r1, r1, #0
   d6ca4:	fa03 f20e 	lsl.w	r2, r3, lr
   d6ca8:	1880      	adds	r0, r0, r2
   d6caa:	fa43 f305 	asr.w	r3, r3, r5
   d6cae:	4159      	adcs	r1, r3
   d6cb0:	e00e      	b.n	d6cd0 <__adddf3+0xd0>
   d6cb2:	f1a5 0520 	sub.w	r5, r5, #32
   d6cb6:	f10e 0e20 	add.w	lr, lr, #32
   d6cba:	2a01      	cmp	r2, #1
   d6cbc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6cc0:	bf28      	it	cs
   d6cc2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6cc6:	fa43 f305 	asr.w	r3, r3, r5
   d6cca:	18c0      	adds	r0, r0, r3
   d6ccc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6cd4:	d507      	bpl.n	d6ce6 <__adddf3+0xe6>
   d6cd6:	f04f 0e00 	mov.w	lr, #0
   d6cda:	f1dc 0c00 	rsbs	ip, ip, #0
   d6cde:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6ce2:	eb6e 0101 	sbc.w	r1, lr, r1
   d6ce6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cea:	d31b      	bcc.n	d6d24 <__adddf3+0x124>
   d6cec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6cf0:	d30c      	bcc.n	d6d0c <__adddf3+0x10c>
   d6cf2:	0849      	lsrs	r1, r1, #1
   d6cf4:	ea5f 0030 	movs.w	r0, r0, rrx
   d6cf8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6cfc:	f104 0401 	add.w	r4, r4, #1
   d6d00:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d08:	f080 809a 	bcs.w	d6e40 <__adddf3+0x240>
   d6d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d10:	bf08      	it	eq
   d6d12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d16:	f150 0000 	adcs.w	r0, r0, #0
   d6d1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d1e:	ea41 0105 	orr.w	r1, r1, r5
   d6d22:	bd30      	pop	{r4, r5, pc}
   d6d24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d28:	4140      	adcs	r0, r0
   d6d2a:	eb41 0101 	adc.w	r1, r1, r1
   d6d2e:	3c01      	subs	r4, #1
   d6d30:	bf28      	it	cs
   d6d32:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6d36:	d2e9      	bcs.n	d6d0c <__adddf3+0x10c>
   d6d38:	f091 0f00 	teq	r1, #0
   d6d3c:	bf04      	itt	eq
   d6d3e:	4601      	moveq	r1, r0
   d6d40:	2000      	moveq	r0, #0
   d6d42:	fab1 f381 	clz	r3, r1
   d6d46:	bf08      	it	eq
   d6d48:	3320      	addeq	r3, #32
   d6d4a:	f1a3 030b 	sub.w	r3, r3, #11
   d6d4e:	f1b3 0220 	subs.w	r2, r3, #32
   d6d52:	da0c      	bge.n	d6d6e <__adddf3+0x16e>
   d6d54:	320c      	adds	r2, #12
   d6d56:	dd08      	ble.n	d6d6a <__adddf3+0x16a>
   d6d58:	f102 0c14 	add.w	ip, r2, #20
   d6d5c:	f1c2 020c 	rsb	r2, r2, #12
   d6d60:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d64:	fa21 f102 	lsr.w	r1, r1, r2
   d6d68:	e00c      	b.n	d6d84 <__adddf3+0x184>
   d6d6a:	f102 0214 	add.w	r2, r2, #20
   d6d6e:	bfd8      	it	le
   d6d70:	f1c2 0c20 	rsble	ip, r2, #32
   d6d74:	fa01 f102 	lsl.w	r1, r1, r2
   d6d78:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d7c:	bfdc      	itt	le
   d6d7e:	ea41 010c 	orrle.w	r1, r1, ip
   d6d82:	4090      	lslle	r0, r2
   d6d84:	1ae4      	subs	r4, r4, r3
   d6d86:	bfa2      	ittt	ge
   d6d88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d8c:	4329      	orrge	r1, r5
   d6d8e:	bd30      	popge	{r4, r5, pc}
   d6d90:	ea6f 0404 	mvn.w	r4, r4
   d6d94:	3c1f      	subs	r4, #31
   d6d96:	da1c      	bge.n	d6dd2 <__adddf3+0x1d2>
   d6d98:	340c      	adds	r4, #12
   d6d9a:	dc0e      	bgt.n	d6dba <__adddf3+0x1ba>
   d6d9c:	f104 0414 	add.w	r4, r4, #20
   d6da0:	f1c4 0220 	rsb	r2, r4, #32
   d6da4:	fa20 f004 	lsr.w	r0, r0, r4
   d6da8:	fa01 f302 	lsl.w	r3, r1, r2
   d6dac:	ea40 0003 	orr.w	r0, r0, r3
   d6db0:	fa21 f304 	lsr.w	r3, r1, r4
   d6db4:	ea45 0103 	orr.w	r1, r5, r3
   d6db8:	bd30      	pop	{r4, r5, pc}
   d6dba:	f1c4 040c 	rsb	r4, r4, #12
   d6dbe:	f1c4 0220 	rsb	r2, r4, #32
   d6dc2:	fa20 f002 	lsr.w	r0, r0, r2
   d6dc6:	fa01 f304 	lsl.w	r3, r1, r4
   d6dca:	ea40 0003 	orr.w	r0, r0, r3
   d6dce:	4629      	mov	r1, r5
   d6dd0:	bd30      	pop	{r4, r5, pc}
   d6dd2:	fa21 f004 	lsr.w	r0, r1, r4
   d6dd6:	4629      	mov	r1, r5
   d6dd8:	bd30      	pop	{r4, r5, pc}
   d6dda:	f094 0f00 	teq	r4, #0
   d6dde:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6de2:	bf06      	itte	eq
   d6de4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6de8:	3401      	addeq	r4, #1
   d6dea:	3d01      	subne	r5, #1
   d6dec:	e74e      	b.n	d6c8c <__adddf3+0x8c>
   d6dee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6df2:	bf18      	it	ne
   d6df4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6df8:	d029      	beq.n	d6e4e <__adddf3+0x24e>
   d6dfa:	ea94 0f05 	teq	r4, r5
   d6dfe:	bf08      	it	eq
   d6e00:	ea90 0f02 	teqeq	r0, r2
   d6e04:	d005      	beq.n	d6e12 <__adddf3+0x212>
   d6e06:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e0a:	bf04      	itt	eq
   d6e0c:	4619      	moveq	r1, r3
   d6e0e:	4610      	moveq	r0, r2
   d6e10:	bd30      	pop	{r4, r5, pc}
   d6e12:	ea91 0f03 	teq	r1, r3
   d6e16:	bf1e      	ittt	ne
   d6e18:	2100      	movne	r1, #0
   d6e1a:	2000      	movne	r0, #0
   d6e1c:	bd30      	popne	{r4, r5, pc}
   d6e1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e22:	d105      	bne.n	d6e30 <__adddf3+0x230>
   d6e24:	0040      	lsls	r0, r0, #1
   d6e26:	4149      	adcs	r1, r1
   d6e28:	bf28      	it	cs
   d6e2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e2e:	bd30      	pop	{r4, r5, pc}
   d6e30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e34:	bf3c      	itt	cc
   d6e36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e3a:	bd30      	popcc	{r4, r5, pc}
   d6e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e48:	f04f 0000 	mov.w	r0, #0
   d6e4c:	bd30      	pop	{r4, r5, pc}
   d6e4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e52:	bf1a      	itte	ne
   d6e54:	4619      	movne	r1, r3
   d6e56:	4610      	movne	r0, r2
   d6e58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e5c:	bf1c      	itt	ne
   d6e5e:	460b      	movne	r3, r1
   d6e60:	4602      	movne	r2, r0
   d6e62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e66:	bf06      	itte	eq
   d6e68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e6c:	ea91 0f03 	teqeq	r1, r3
   d6e70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e74:	bd30      	pop	{r4, r5, pc}
   d6e76:	bf00      	nop

000d6e78 <__aeabi_ui2d>:
   d6e78:	f090 0f00 	teq	r0, #0
   d6e7c:	bf04      	itt	eq
   d6e7e:	2100      	moveq	r1, #0
   d6e80:	4770      	bxeq	lr
   d6e82:	b530      	push	{r4, r5, lr}
   d6e84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e8c:	f04f 0500 	mov.w	r5, #0
   d6e90:	f04f 0100 	mov.w	r1, #0
   d6e94:	e750      	b.n	d6d38 <__adddf3+0x138>
   d6e96:	bf00      	nop

000d6e98 <__aeabi_i2d>:
   d6e98:	f090 0f00 	teq	r0, #0
   d6e9c:	bf04      	itt	eq
   d6e9e:	2100      	moveq	r1, #0
   d6ea0:	4770      	bxeq	lr
   d6ea2:	b530      	push	{r4, r5, lr}
   d6ea4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ea8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6eac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6eb0:	bf48      	it	mi
   d6eb2:	4240      	negmi	r0, r0
   d6eb4:	f04f 0100 	mov.w	r1, #0
   d6eb8:	e73e      	b.n	d6d38 <__adddf3+0x138>
   d6eba:	bf00      	nop

000d6ebc <__aeabi_f2d>:
   d6ebc:	0042      	lsls	r2, r0, #1
   d6ebe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6ec2:	ea4f 0131 	mov.w	r1, r1, rrx
   d6ec6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6eca:	bf1f      	itttt	ne
   d6ecc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ed0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ed4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ed8:	4770      	bxne	lr
   d6eda:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6ede:	bf08      	it	eq
   d6ee0:	4770      	bxeq	lr
   d6ee2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6ee6:	bf04      	itt	eq
   d6ee8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6eec:	4770      	bxeq	lr
   d6eee:	b530      	push	{r4, r5, lr}
   d6ef0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6efc:	e71c      	b.n	d6d38 <__adddf3+0x138>
   d6efe:	bf00      	nop

000d6f00 <__aeabi_ul2d>:
   d6f00:	ea50 0201 	orrs.w	r2, r0, r1
   d6f04:	bf08      	it	eq
   d6f06:	4770      	bxeq	lr
   d6f08:	b530      	push	{r4, r5, lr}
   d6f0a:	f04f 0500 	mov.w	r5, #0
   d6f0e:	e00a      	b.n	d6f26 <__aeabi_l2d+0x16>

000d6f10 <__aeabi_l2d>:
   d6f10:	ea50 0201 	orrs.w	r2, r0, r1
   d6f14:	bf08      	it	eq
   d6f16:	4770      	bxeq	lr
   d6f18:	b530      	push	{r4, r5, lr}
   d6f1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f1e:	d502      	bpl.n	d6f26 <__aeabi_l2d+0x16>
   d6f20:	4240      	negs	r0, r0
   d6f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f26:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f32:	f43f aed8 	beq.w	d6ce6 <__adddf3+0xe6>
   d6f36:	f04f 0203 	mov.w	r2, #3
   d6f3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f3e:	bf18      	it	ne
   d6f40:	3203      	addne	r2, #3
   d6f42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f46:	bf18      	it	ne
   d6f48:	3203      	addne	r2, #3
   d6f4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f4e:	f1c2 0320 	rsb	r3, r2, #32
   d6f52:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f56:	fa20 f002 	lsr.w	r0, r0, r2
   d6f5a:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f5e:	ea40 000e 	orr.w	r0, r0, lr
   d6f62:	fa21 f102 	lsr.w	r1, r1, r2
   d6f66:	4414      	add	r4, r2
   d6f68:	e6bd      	b.n	d6ce6 <__adddf3+0xe6>
   d6f6a:	bf00      	nop

000d6f6c <__aeabi_dmul>:
   d6f6c:	b570      	push	{r4, r5, r6, lr}
   d6f6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f7a:	bf1d      	ittte	ne
   d6f7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f80:	ea94 0f0c 	teqne	r4, ip
   d6f84:	ea95 0f0c 	teqne	r5, ip
   d6f88:	f000 f8de 	bleq	d7148 <__aeabi_dmul+0x1dc>
   d6f8c:	442c      	add	r4, r5
   d6f8e:	ea81 0603 	eor.w	r6, r1, r3
   d6f92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f9e:	bf18      	it	ne
   d6fa0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6fac:	d038      	beq.n	d7020 <__aeabi_dmul+0xb4>
   d6fae:	fba0 ce02 	umull	ip, lr, r0, r2
   d6fb2:	f04f 0500 	mov.w	r5, #0
   d6fb6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6fba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6fbe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6fc2:	f04f 0600 	mov.w	r6, #0
   d6fc6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6fca:	f09c 0f00 	teq	ip, #0
   d6fce:	bf18      	it	ne
   d6fd0:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fdc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fe0:	d204      	bcs.n	d6fec <__aeabi_dmul+0x80>
   d6fe2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fe6:	416d      	adcs	r5, r5
   d6fe8:	eb46 0606 	adc.w	r6, r6, r6
   d6fec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6ff0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6ff4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6ff8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6ffc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7000:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7004:	bf88      	it	hi
   d7006:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d700a:	d81e      	bhi.n	d704a <__aeabi_dmul+0xde>
   d700c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7010:	bf08      	it	eq
   d7012:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7016:	f150 0000 	adcs.w	r0, r0, #0
   d701a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d701e:	bd70      	pop	{r4, r5, r6, pc}
   d7020:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7024:	ea46 0101 	orr.w	r1, r6, r1
   d7028:	ea40 0002 	orr.w	r0, r0, r2
   d702c:	ea81 0103 	eor.w	r1, r1, r3
   d7030:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7034:	bfc2      	ittt	gt
   d7036:	ebd4 050c 	rsbsgt	r5, r4, ip
   d703a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d703e:	bd70      	popgt	{r4, r5, r6, pc}
   d7040:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7044:	f04f 0e00 	mov.w	lr, #0
   d7048:	3c01      	subs	r4, #1
   d704a:	f300 80ab 	bgt.w	d71a4 <__aeabi_dmul+0x238>
   d704e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7052:	bfde      	ittt	le
   d7054:	2000      	movle	r0, #0
   d7056:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d705a:	bd70      	pople	{r4, r5, r6, pc}
   d705c:	f1c4 0400 	rsb	r4, r4, #0
   d7060:	3c20      	subs	r4, #32
   d7062:	da35      	bge.n	d70d0 <__aeabi_dmul+0x164>
   d7064:	340c      	adds	r4, #12
   d7066:	dc1b      	bgt.n	d70a0 <__aeabi_dmul+0x134>
   d7068:	f104 0414 	add.w	r4, r4, #20
   d706c:	f1c4 0520 	rsb	r5, r4, #32
   d7070:	fa00 f305 	lsl.w	r3, r0, r5
   d7074:	fa20 f004 	lsr.w	r0, r0, r4
   d7078:	fa01 f205 	lsl.w	r2, r1, r5
   d707c:	ea40 0002 	orr.w	r0, r0, r2
   d7080:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7084:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7088:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d708c:	fa21 f604 	lsr.w	r6, r1, r4
   d7090:	eb42 0106 	adc.w	r1, r2, r6
   d7094:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7098:	bf08      	it	eq
   d709a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d709e:	bd70      	pop	{r4, r5, r6, pc}
   d70a0:	f1c4 040c 	rsb	r4, r4, #12
   d70a4:	f1c4 0520 	rsb	r5, r4, #32
   d70a8:	fa00 f304 	lsl.w	r3, r0, r4
   d70ac:	fa20 f005 	lsr.w	r0, r0, r5
   d70b0:	fa01 f204 	lsl.w	r2, r1, r4
   d70b4:	ea40 0002 	orr.w	r0, r0, r2
   d70b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70c0:	f141 0100 	adc.w	r1, r1, #0
   d70c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70c8:	bf08      	it	eq
   d70ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70ce:	bd70      	pop	{r4, r5, r6, pc}
   d70d0:	f1c4 0520 	rsb	r5, r4, #32
   d70d4:	fa00 f205 	lsl.w	r2, r0, r5
   d70d8:	ea4e 0e02 	orr.w	lr, lr, r2
   d70dc:	fa20 f304 	lsr.w	r3, r0, r4
   d70e0:	fa01 f205 	lsl.w	r2, r1, r5
   d70e4:	ea43 0302 	orr.w	r3, r3, r2
   d70e8:	fa21 f004 	lsr.w	r0, r1, r4
   d70ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70f0:	fa21 f204 	lsr.w	r2, r1, r4
   d70f4:	ea20 0002 	bic.w	r0, r0, r2
   d70f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d70fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7100:	bf08      	it	eq
   d7102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7106:	bd70      	pop	{r4, r5, r6, pc}
   d7108:	f094 0f00 	teq	r4, #0
   d710c:	d10f      	bne.n	d712e <__aeabi_dmul+0x1c2>
   d710e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7112:	0040      	lsls	r0, r0, #1
   d7114:	eb41 0101 	adc.w	r1, r1, r1
   d7118:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d711c:	bf08      	it	eq
   d711e:	3c01      	subeq	r4, #1
   d7120:	d0f7      	beq.n	d7112 <__aeabi_dmul+0x1a6>
   d7122:	ea41 0106 	orr.w	r1, r1, r6
   d7126:	f095 0f00 	teq	r5, #0
   d712a:	bf18      	it	ne
   d712c:	4770      	bxne	lr
   d712e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7132:	0052      	lsls	r2, r2, #1
   d7134:	eb43 0303 	adc.w	r3, r3, r3
   d7138:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d713c:	bf08      	it	eq
   d713e:	3d01      	subeq	r5, #1
   d7140:	d0f7      	beq.n	d7132 <__aeabi_dmul+0x1c6>
   d7142:	ea43 0306 	orr.w	r3, r3, r6
   d7146:	4770      	bx	lr
   d7148:	ea94 0f0c 	teq	r4, ip
   d714c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7150:	bf18      	it	ne
   d7152:	ea95 0f0c 	teqne	r5, ip
   d7156:	d00c      	beq.n	d7172 <__aeabi_dmul+0x206>
   d7158:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d715c:	bf18      	it	ne
   d715e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7162:	d1d1      	bne.n	d7108 <__aeabi_dmul+0x19c>
   d7164:	ea81 0103 	eor.w	r1, r1, r3
   d7168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d716c:	f04f 0000 	mov.w	r0, #0
   d7170:	bd70      	pop	{r4, r5, r6, pc}
   d7172:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7176:	bf06      	itte	eq
   d7178:	4610      	moveq	r0, r2
   d717a:	4619      	moveq	r1, r3
   d717c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7180:	d019      	beq.n	d71b6 <__aeabi_dmul+0x24a>
   d7182:	ea94 0f0c 	teq	r4, ip
   d7186:	d102      	bne.n	d718e <__aeabi_dmul+0x222>
   d7188:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d718c:	d113      	bne.n	d71b6 <__aeabi_dmul+0x24a>
   d718e:	ea95 0f0c 	teq	r5, ip
   d7192:	d105      	bne.n	d71a0 <__aeabi_dmul+0x234>
   d7194:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7198:	bf1c      	itt	ne
   d719a:	4610      	movne	r0, r2
   d719c:	4619      	movne	r1, r3
   d719e:	d10a      	bne.n	d71b6 <__aeabi_dmul+0x24a>
   d71a0:	ea81 0103 	eor.w	r1, r1, r3
   d71a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d71b0:	f04f 0000 	mov.w	r0, #0
   d71b4:	bd70      	pop	{r4, r5, r6, pc}
   d71b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71be:	bd70      	pop	{r4, r5, r6, pc}

000d71c0 <__aeabi_ddiv>:
   d71c0:	b570      	push	{r4, r5, r6, lr}
   d71c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71ce:	bf1d      	ittte	ne
   d71d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71d4:	ea94 0f0c 	teqne	r4, ip
   d71d8:	ea95 0f0c 	teqne	r5, ip
   d71dc:	f000 f8a7 	bleq	d732e <__aeabi_ddiv+0x16e>
   d71e0:	eba4 0405 	sub.w	r4, r4, r5
   d71e4:	ea81 0e03 	eor.w	lr, r1, r3
   d71e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71f0:	f000 8088 	beq.w	d7304 <__aeabi_ddiv+0x144>
   d71f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d71fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7200:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7204:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7208:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d720c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7210:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7214:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7218:	429d      	cmp	r5, r3
   d721a:	bf08      	it	eq
   d721c:	4296      	cmpeq	r6, r2
   d721e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7222:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7226:	d202      	bcs.n	d722e <__aeabi_ddiv+0x6e>
   d7228:	085b      	lsrs	r3, r3, #1
   d722a:	ea4f 0232 	mov.w	r2, r2, rrx
   d722e:	1ab6      	subs	r6, r6, r2
   d7230:	eb65 0503 	sbc.w	r5, r5, r3
   d7234:	085b      	lsrs	r3, r3, #1
   d7236:	ea4f 0232 	mov.w	r2, r2, rrx
   d723a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d723e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7242:	ebb6 0e02 	subs.w	lr, r6, r2
   d7246:	eb75 0e03 	sbcs.w	lr, r5, r3
   d724a:	bf22      	ittt	cs
   d724c:	1ab6      	subcs	r6, r6, r2
   d724e:	4675      	movcs	r5, lr
   d7250:	ea40 000c 	orrcs.w	r0, r0, ip
   d7254:	085b      	lsrs	r3, r3, #1
   d7256:	ea4f 0232 	mov.w	r2, r2, rrx
   d725a:	ebb6 0e02 	subs.w	lr, r6, r2
   d725e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7262:	bf22      	ittt	cs
   d7264:	1ab6      	subcs	r6, r6, r2
   d7266:	4675      	movcs	r5, lr
   d7268:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d726c:	085b      	lsrs	r3, r3, #1
   d726e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7272:	ebb6 0e02 	subs.w	lr, r6, r2
   d7276:	eb75 0e03 	sbcs.w	lr, r5, r3
   d727a:	bf22      	ittt	cs
   d727c:	1ab6      	subcs	r6, r6, r2
   d727e:	4675      	movcs	r5, lr
   d7280:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7284:	085b      	lsrs	r3, r3, #1
   d7286:	ea4f 0232 	mov.w	r2, r2, rrx
   d728a:	ebb6 0e02 	subs.w	lr, r6, r2
   d728e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7292:	bf22      	ittt	cs
   d7294:	1ab6      	subcs	r6, r6, r2
   d7296:	4675      	movcs	r5, lr
   d7298:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d729c:	ea55 0e06 	orrs.w	lr, r5, r6
   d72a0:	d018      	beq.n	d72d4 <__aeabi_ddiv+0x114>
   d72a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d72a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d72aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d72ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d72b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72be:	d1c0      	bne.n	d7242 <__aeabi_ddiv+0x82>
   d72c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72c4:	d10b      	bne.n	d72de <__aeabi_ddiv+0x11e>
   d72c6:	ea41 0100 	orr.w	r1, r1, r0
   d72ca:	f04f 0000 	mov.w	r0, #0
   d72ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72d2:	e7b6      	b.n	d7242 <__aeabi_ddiv+0x82>
   d72d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72d8:	bf04      	itt	eq
   d72da:	4301      	orreq	r1, r0
   d72dc:	2000      	moveq	r0, #0
   d72de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72e2:	bf88      	it	hi
   d72e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72e8:	f63f aeaf 	bhi.w	d704a <__aeabi_dmul+0xde>
   d72ec:	ebb5 0c03 	subs.w	ip, r5, r3
   d72f0:	bf04      	itt	eq
   d72f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72fa:	f150 0000 	adcs.w	r0, r0, #0
   d72fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7302:	bd70      	pop	{r4, r5, r6, pc}
   d7304:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7308:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d730c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7310:	bfc2      	ittt	gt
   d7312:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7316:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d731a:	bd70      	popgt	{r4, r5, r6, pc}
   d731c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7320:	f04f 0e00 	mov.w	lr, #0
   d7324:	3c01      	subs	r4, #1
   d7326:	e690      	b.n	d704a <__aeabi_dmul+0xde>
   d7328:	ea45 0e06 	orr.w	lr, r5, r6
   d732c:	e68d      	b.n	d704a <__aeabi_dmul+0xde>
   d732e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7332:	ea94 0f0c 	teq	r4, ip
   d7336:	bf08      	it	eq
   d7338:	ea95 0f0c 	teqeq	r5, ip
   d733c:	f43f af3b 	beq.w	d71b6 <__aeabi_dmul+0x24a>
   d7340:	ea94 0f0c 	teq	r4, ip
   d7344:	d10a      	bne.n	d735c <__aeabi_ddiv+0x19c>
   d7346:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d734a:	f47f af34 	bne.w	d71b6 <__aeabi_dmul+0x24a>
   d734e:	ea95 0f0c 	teq	r5, ip
   d7352:	f47f af25 	bne.w	d71a0 <__aeabi_dmul+0x234>
   d7356:	4610      	mov	r0, r2
   d7358:	4619      	mov	r1, r3
   d735a:	e72c      	b.n	d71b6 <__aeabi_dmul+0x24a>
   d735c:	ea95 0f0c 	teq	r5, ip
   d7360:	d106      	bne.n	d7370 <__aeabi_ddiv+0x1b0>
   d7362:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7366:	f43f aefd 	beq.w	d7164 <__aeabi_dmul+0x1f8>
   d736a:	4610      	mov	r0, r2
   d736c:	4619      	mov	r1, r3
   d736e:	e722      	b.n	d71b6 <__aeabi_dmul+0x24a>
   d7370:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7374:	bf18      	it	ne
   d7376:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d737a:	f47f aec5 	bne.w	d7108 <__aeabi_dmul+0x19c>
   d737e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7382:	f47f af0d 	bne.w	d71a0 <__aeabi_dmul+0x234>
   d7386:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d738a:	f47f aeeb 	bne.w	d7164 <__aeabi_dmul+0x1f8>
   d738e:	e712      	b.n	d71b6 <__aeabi_dmul+0x24a>

000d7390 <__gedf2>:
   d7390:	f04f 3cff 	mov.w	ip, #4294967295
   d7394:	e006      	b.n	d73a4 <__cmpdf2+0x4>
   d7396:	bf00      	nop

000d7398 <__ledf2>:
   d7398:	f04f 0c01 	mov.w	ip, #1
   d739c:	e002      	b.n	d73a4 <__cmpdf2+0x4>
   d739e:	bf00      	nop

000d73a0 <__cmpdf2>:
   d73a0:	f04f 0c01 	mov.w	ip, #1
   d73a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d73a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73b4:	bf18      	it	ne
   d73b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73ba:	d01b      	beq.n	d73f4 <__cmpdf2+0x54>
   d73bc:	b001      	add	sp, #4
   d73be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d73c2:	bf0c      	ite	eq
   d73c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d73c8:	ea91 0f03 	teqne	r1, r3
   d73cc:	bf02      	ittt	eq
   d73ce:	ea90 0f02 	teqeq	r0, r2
   d73d2:	2000      	moveq	r0, #0
   d73d4:	4770      	bxeq	lr
   d73d6:	f110 0f00 	cmn.w	r0, #0
   d73da:	ea91 0f03 	teq	r1, r3
   d73de:	bf58      	it	pl
   d73e0:	4299      	cmppl	r1, r3
   d73e2:	bf08      	it	eq
   d73e4:	4290      	cmpeq	r0, r2
   d73e6:	bf2c      	ite	cs
   d73e8:	17d8      	asrcs	r0, r3, #31
   d73ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73ee:	f040 0001 	orr.w	r0, r0, #1
   d73f2:	4770      	bx	lr
   d73f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73fc:	d102      	bne.n	d7404 <__cmpdf2+0x64>
   d73fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7402:	d107      	bne.n	d7414 <__cmpdf2+0x74>
   d7404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d740c:	d1d6      	bne.n	d73bc <__cmpdf2+0x1c>
   d740e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7412:	d0d3      	beq.n	d73bc <__cmpdf2+0x1c>
   d7414:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7418:	4770      	bx	lr
   d741a:	bf00      	nop

000d741c <__aeabi_cdrcmple>:
   d741c:	4684      	mov	ip, r0
   d741e:	4610      	mov	r0, r2
   d7420:	4662      	mov	r2, ip
   d7422:	468c      	mov	ip, r1
   d7424:	4619      	mov	r1, r3
   d7426:	4663      	mov	r3, ip
   d7428:	e000      	b.n	d742c <__aeabi_cdcmpeq>
   d742a:	bf00      	nop

000d742c <__aeabi_cdcmpeq>:
   d742c:	b501      	push	{r0, lr}
   d742e:	f7ff ffb7 	bl	d73a0 <__cmpdf2>
   d7432:	2800      	cmp	r0, #0
   d7434:	bf48      	it	mi
   d7436:	f110 0f00 	cmnmi.w	r0, #0
   d743a:	bd01      	pop	{r0, pc}

000d743c <__aeabi_dcmpeq>:
   d743c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7440:	f7ff fff4 	bl	d742c <__aeabi_cdcmpeq>
   d7444:	bf0c      	ite	eq
   d7446:	2001      	moveq	r0, #1
   d7448:	2000      	movne	r0, #0
   d744a:	f85d fb08 	ldr.w	pc, [sp], #8
   d744e:	bf00      	nop

000d7450 <__aeabi_dcmplt>:
   d7450:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7454:	f7ff ffea 	bl	d742c <__aeabi_cdcmpeq>
   d7458:	bf34      	ite	cc
   d745a:	2001      	movcc	r0, #1
   d745c:	2000      	movcs	r0, #0
   d745e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7462:	bf00      	nop

000d7464 <__aeabi_dcmple>:
   d7464:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7468:	f7ff ffe0 	bl	d742c <__aeabi_cdcmpeq>
   d746c:	bf94      	ite	ls
   d746e:	2001      	movls	r0, #1
   d7470:	2000      	movhi	r0, #0
   d7472:	f85d fb08 	ldr.w	pc, [sp], #8
   d7476:	bf00      	nop

000d7478 <__aeabi_dcmpge>:
   d7478:	f84d ed08 	str.w	lr, [sp, #-8]!
   d747c:	f7ff ffce 	bl	d741c <__aeabi_cdrcmple>
   d7480:	bf94      	ite	ls
   d7482:	2001      	movls	r0, #1
   d7484:	2000      	movhi	r0, #0
   d7486:	f85d fb08 	ldr.w	pc, [sp], #8
   d748a:	bf00      	nop

000d748c <__aeabi_dcmpgt>:
   d748c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7490:	f7ff ffc4 	bl	d741c <__aeabi_cdrcmple>
   d7494:	bf34      	ite	cc
   d7496:	2001      	movcc	r0, #1
   d7498:	2000      	movcs	r0, #0
   d749a:	f85d fb08 	ldr.w	pc, [sp], #8
   d749e:	bf00      	nop

000d74a0 <__aeabi_dcmpun>:
   d74a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74a8:	d102      	bne.n	d74b0 <__aeabi_dcmpun+0x10>
   d74aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d74ae:	d10a      	bne.n	d74c6 <__aeabi_dcmpun+0x26>
   d74b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d74b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74b8:	d102      	bne.n	d74c0 <__aeabi_dcmpun+0x20>
   d74ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d74be:	d102      	bne.n	d74c6 <__aeabi_dcmpun+0x26>
   d74c0:	f04f 0000 	mov.w	r0, #0
   d74c4:	4770      	bx	lr
   d74c6:	f04f 0001 	mov.w	r0, #1
   d74ca:	4770      	bx	lr

000d74cc <__aeabi_d2iz>:
   d74cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74d4:	d215      	bcs.n	d7502 <__aeabi_d2iz+0x36>
   d74d6:	d511      	bpl.n	d74fc <__aeabi_d2iz+0x30>
   d74d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74e0:	d912      	bls.n	d7508 <__aeabi_d2iz+0x3c>
   d74e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74f2:	fa23 f002 	lsr.w	r0, r3, r2
   d74f6:	bf18      	it	ne
   d74f8:	4240      	negne	r0, r0
   d74fa:	4770      	bx	lr
   d74fc:	f04f 0000 	mov.w	r0, #0
   d7500:	4770      	bx	lr
   d7502:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7506:	d105      	bne.n	d7514 <__aeabi_d2iz+0x48>
   d7508:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d750c:	bf08      	it	eq
   d750e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7512:	4770      	bx	lr
   d7514:	f04f 0000 	mov.w	r0, #0
   d7518:	4770      	bx	lr
   d751a:	bf00      	nop

000d751c <__aeabi_d2uiz>:
   d751c:	004a      	lsls	r2, r1, #1
   d751e:	d211      	bcs.n	d7544 <__aeabi_d2uiz+0x28>
   d7520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7524:	d211      	bcs.n	d754a <__aeabi_d2uiz+0x2e>
   d7526:	d50d      	bpl.n	d7544 <__aeabi_d2uiz+0x28>
   d7528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d752c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7530:	d40e      	bmi.n	d7550 <__aeabi_d2uiz+0x34>
   d7532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d753a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d753e:	fa23 f002 	lsr.w	r0, r3, r2
   d7542:	4770      	bx	lr
   d7544:	f04f 0000 	mov.w	r0, #0
   d7548:	4770      	bx	lr
   d754a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d754e:	d102      	bne.n	d7556 <__aeabi_d2uiz+0x3a>
   d7550:	f04f 30ff 	mov.w	r0, #4294967295
   d7554:	4770      	bx	lr
   d7556:	f04f 0000 	mov.w	r0, #0
   d755a:	4770      	bx	lr

000d755c <__aeabi_uldivmod>:
   d755c:	b953      	cbnz	r3, d7574 <__aeabi_uldivmod+0x18>
   d755e:	b94a      	cbnz	r2, d7574 <__aeabi_uldivmod+0x18>
   d7560:	2900      	cmp	r1, #0
   d7562:	bf08      	it	eq
   d7564:	2800      	cmpeq	r0, #0
   d7566:	bf1c      	itt	ne
   d7568:	f04f 31ff 	movne.w	r1, #4294967295
   d756c:	f04f 30ff 	movne.w	r0, #4294967295
   d7570:	f000 b98c 	b.w	d788c <__aeabi_idiv0>
   d7574:	f1ad 0c08 	sub.w	ip, sp, #8
   d7578:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d757c:	f000 f824 	bl	d75c8 <__udivmoddi4>
   d7580:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7588:	b004      	add	sp, #16
   d758a:	4770      	bx	lr

000d758c <__aeabi_d2ulz>:
   d758c:	b5d0      	push	{r4, r6, r7, lr}
   d758e:	4b0c      	ldr	r3, [pc, #48]	; (d75c0 <__aeabi_d2ulz+0x34>)
   d7590:	2200      	movs	r2, #0
   d7592:	4606      	mov	r6, r0
   d7594:	460f      	mov	r7, r1
   d7596:	f7ff fce9 	bl	d6f6c <__aeabi_dmul>
   d759a:	f7ff ffbf 	bl	d751c <__aeabi_d2uiz>
   d759e:	4604      	mov	r4, r0
   d75a0:	f7ff fc6a 	bl	d6e78 <__aeabi_ui2d>
   d75a4:	4b07      	ldr	r3, [pc, #28]	; (d75c4 <__aeabi_d2ulz+0x38>)
   d75a6:	2200      	movs	r2, #0
   d75a8:	f7ff fce0 	bl	d6f6c <__aeabi_dmul>
   d75ac:	4602      	mov	r2, r0
   d75ae:	460b      	mov	r3, r1
   d75b0:	4630      	mov	r0, r6
   d75b2:	4639      	mov	r1, r7
   d75b4:	f7ff fb22 	bl	d6bfc <__aeabi_dsub>
   d75b8:	f7ff ffb0 	bl	d751c <__aeabi_d2uiz>
   d75bc:	4621      	mov	r1, r4
   d75be:	bdd0      	pop	{r4, r6, r7, pc}
   d75c0:	3df00000 	.word	0x3df00000
   d75c4:	41f00000 	.word	0x41f00000

000d75c8 <__udivmoddi4>:
   d75c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d75cc:	9d08      	ldr	r5, [sp, #32]
   d75ce:	4604      	mov	r4, r0
   d75d0:	468c      	mov	ip, r1
   d75d2:	2b00      	cmp	r3, #0
   d75d4:	f040 8083 	bne.w	d76de <__udivmoddi4+0x116>
   d75d8:	428a      	cmp	r2, r1
   d75da:	4617      	mov	r7, r2
   d75dc:	d947      	bls.n	d766e <__udivmoddi4+0xa6>
   d75de:	fab2 f282 	clz	r2, r2
   d75e2:	b142      	cbz	r2, d75f6 <__udivmoddi4+0x2e>
   d75e4:	f1c2 0020 	rsb	r0, r2, #32
   d75e8:	fa24 f000 	lsr.w	r0, r4, r0
   d75ec:	4091      	lsls	r1, r2
   d75ee:	4097      	lsls	r7, r2
   d75f0:	ea40 0c01 	orr.w	ip, r0, r1
   d75f4:	4094      	lsls	r4, r2
   d75f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d75fa:	0c23      	lsrs	r3, r4, #16
   d75fc:	fbbc f6f8 	udiv	r6, ip, r8
   d7600:	fa1f fe87 	uxth.w	lr, r7
   d7604:	fb08 c116 	mls	r1, r8, r6, ip
   d7608:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d760c:	fb06 f10e 	mul.w	r1, r6, lr
   d7610:	4299      	cmp	r1, r3
   d7612:	d909      	bls.n	d7628 <__udivmoddi4+0x60>
   d7614:	18fb      	adds	r3, r7, r3
   d7616:	f106 30ff 	add.w	r0, r6, #4294967295
   d761a:	f080 8119 	bcs.w	d7850 <__udivmoddi4+0x288>
   d761e:	4299      	cmp	r1, r3
   d7620:	f240 8116 	bls.w	d7850 <__udivmoddi4+0x288>
   d7624:	3e02      	subs	r6, #2
   d7626:	443b      	add	r3, r7
   d7628:	1a5b      	subs	r3, r3, r1
   d762a:	b2a4      	uxth	r4, r4
   d762c:	fbb3 f0f8 	udiv	r0, r3, r8
   d7630:	fb08 3310 	mls	r3, r8, r0, r3
   d7634:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7638:	fb00 fe0e 	mul.w	lr, r0, lr
   d763c:	45a6      	cmp	lr, r4
   d763e:	d909      	bls.n	d7654 <__udivmoddi4+0x8c>
   d7640:	193c      	adds	r4, r7, r4
   d7642:	f100 33ff 	add.w	r3, r0, #4294967295
   d7646:	f080 8105 	bcs.w	d7854 <__udivmoddi4+0x28c>
   d764a:	45a6      	cmp	lr, r4
   d764c:	f240 8102 	bls.w	d7854 <__udivmoddi4+0x28c>
   d7650:	3802      	subs	r0, #2
   d7652:	443c      	add	r4, r7
   d7654:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d7658:	eba4 040e 	sub.w	r4, r4, lr
   d765c:	2600      	movs	r6, #0
   d765e:	b11d      	cbz	r5, d7668 <__udivmoddi4+0xa0>
   d7660:	40d4      	lsrs	r4, r2
   d7662:	2300      	movs	r3, #0
   d7664:	e9c5 4300 	strd	r4, r3, [r5]
   d7668:	4631      	mov	r1, r6
   d766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d766e:	b902      	cbnz	r2, d7672 <__udivmoddi4+0xaa>
   d7670:	deff      	udf	#255	; 0xff
   d7672:	fab2 f282 	clz	r2, r2
   d7676:	2a00      	cmp	r2, #0
   d7678:	d150      	bne.n	d771c <__udivmoddi4+0x154>
   d767a:	1bcb      	subs	r3, r1, r7
   d767c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7680:	fa1f f887 	uxth.w	r8, r7
   d7684:	2601      	movs	r6, #1
   d7686:	fbb3 fcfe 	udiv	ip, r3, lr
   d768a:	0c21      	lsrs	r1, r4, #16
   d768c:	fb0e 331c 	mls	r3, lr, ip, r3
   d7690:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7694:	fb08 f30c 	mul.w	r3, r8, ip
   d7698:	428b      	cmp	r3, r1
   d769a:	d907      	bls.n	d76ac <__udivmoddi4+0xe4>
   d769c:	1879      	adds	r1, r7, r1
   d769e:	f10c 30ff 	add.w	r0, ip, #4294967295
   d76a2:	d202      	bcs.n	d76aa <__udivmoddi4+0xe2>
   d76a4:	428b      	cmp	r3, r1
   d76a6:	f200 80e9 	bhi.w	d787c <__udivmoddi4+0x2b4>
   d76aa:	4684      	mov	ip, r0
   d76ac:	1ac9      	subs	r1, r1, r3
   d76ae:	b2a3      	uxth	r3, r4
   d76b0:	fbb1 f0fe 	udiv	r0, r1, lr
   d76b4:	fb0e 1110 	mls	r1, lr, r0, r1
   d76b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d76bc:	fb08 f800 	mul.w	r8, r8, r0
   d76c0:	45a0      	cmp	r8, r4
   d76c2:	d907      	bls.n	d76d4 <__udivmoddi4+0x10c>
   d76c4:	193c      	adds	r4, r7, r4
   d76c6:	f100 33ff 	add.w	r3, r0, #4294967295
   d76ca:	d202      	bcs.n	d76d2 <__udivmoddi4+0x10a>
   d76cc:	45a0      	cmp	r8, r4
   d76ce:	f200 80d9 	bhi.w	d7884 <__udivmoddi4+0x2bc>
   d76d2:	4618      	mov	r0, r3
   d76d4:	eba4 0408 	sub.w	r4, r4, r8
   d76d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d76dc:	e7bf      	b.n	d765e <__udivmoddi4+0x96>
   d76de:	428b      	cmp	r3, r1
   d76e0:	d909      	bls.n	d76f6 <__udivmoddi4+0x12e>
   d76e2:	2d00      	cmp	r5, #0
   d76e4:	f000 80b1 	beq.w	d784a <__udivmoddi4+0x282>
   d76e8:	2600      	movs	r6, #0
   d76ea:	e9c5 0100 	strd	r0, r1, [r5]
   d76ee:	4630      	mov	r0, r6
   d76f0:	4631      	mov	r1, r6
   d76f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76f6:	fab3 f683 	clz	r6, r3
   d76fa:	2e00      	cmp	r6, #0
   d76fc:	d14a      	bne.n	d7794 <__udivmoddi4+0x1cc>
   d76fe:	428b      	cmp	r3, r1
   d7700:	d302      	bcc.n	d7708 <__udivmoddi4+0x140>
   d7702:	4282      	cmp	r2, r0
   d7704:	f200 80b8 	bhi.w	d7878 <__udivmoddi4+0x2b0>
   d7708:	1a84      	subs	r4, r0, r2
   d770a:	eb61 0103 	sbc.w	r1, r1, r3
   d770e:	2001      	movs	r0, #1
   d7710:	468c      	mov	ip, r1
   d7712:	2d00      	cmp	r5, #0
   d7714:	d0a8      	beq.n	d7668 <__udivmoddi4+0xa0>
   d7716:	e9c5 4c00 	strd	r4, ip, [r5]
   d771a:	e7a5      	b.n	d7668 <__udivmoddi4+0xa0>
   d771c:	f1c2 0320 	rsb	r3, r2, #32
   d7720:	fa20 f603 	lsr.w	r6, r0, r3
   d7724:	4097      	lsls	r7, r2
   d7726:	fa01 f002 	lsl.w	r0, r1, r2
   d772a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d772e:	40d9      	lsrs	r1, r3
   d7730:	4330      	orrs	r0, r6
   d7732:	0c03      	lsrs	r3, r0, #16
   d7734:	fbb1 f6fe 	udiv	r6, r1, lr
   d7738:	fa1f f887 	uxth.w	r8, r7
   d773c:	fb0e 1116 	mls	r1, lr, r6, r1
   d7740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7744:	fb06 f108 	mul.w	r1, r6, r8
   d7748:	4299      	cmp	r1, r3
   d774a:	fa04 f402 	lsl.w	r4, r4, r2
   d774e:	d909      	bls.n	d7764 <__udivmoddi4+0x19c>
   d7750:	18fb      	adds	r3, r7, r3
   d7752:	f106 3cff 	add.w	ip, r6, #4294967295
   d7756:	f080 808d 	bcs.w	d7874 <__udivmoddi4+0x2ac>
   d775a:	4299      	cmp	r1, r3
   d775c:	f240 808a 	bls.w	d7874 <__udivmoddi4+0x2ac>
   d7760:	3e02      	subs	r6, #2
   d7762:	443b      	add	r3, r7
   d7764:	1a5b      	subs	r3, r3, r1
   d7766:	b281      	uxth	r1, r0
   d7768:	fbb3 f0fe 	udiv	r0, r3, lr
   d776c:	fb0e 3310 	mls	r3, lr, r0, r3
   d7770:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7774:	fb00 f308 	mul.w	r3, r0, r8
   d7778:	428b      	cmp	r3, r1
   d777a:	d907      	bls.n	d778c <__udivmoddi4+0x1c4>
   d777c:	1879      	adds	r1, r7, r1
   d777e:	f100 3cff 	add.w	ip, r0, #4294967295
   d7782:	d273      	bcs.n	d786c <__udivmoddi4+0x2a4>
   d7784:	428b      	cmp	r3, r1
   d7786:	d971      	bls.n	d786c <__udivmoddi4+0x2a4>
   d7788:	3802      	subs	r0, #2
   d778a:	4439      	add	r1, r7
   d778c:	1acb      	subs	r3, r1, r3
   d778e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d7792:	e778      	b.n	d7686 <__udivmoddi4+0xbe>
   d7794:	f1c6 0c20 	rsb	ip, r6, #32
   d7798:	fa03 f406 	lsl.w	r4, r3, r6
   d779c:	fa22 f30c 	lsr.w	r3, r2, ip
   d77a0:	431c      	orrs	r4, r3
   d77a2:	fa20 f70c 	lsr.w	r7, r0, ip
   d77a6:	fa01 f306 	lsl.w	r3, r1, r6
   d77aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d77ae:	fa21 f10c 	lsr.w	r1, r1, ip
   d77b2:	431f      	orrs	r7, r3
   d77b4:	0c3b      	lsrs	r3, r7, #16
   d77b6:	fbb1 f9fe 	udiv	r9, r1, lr
   d77ba:	fa1f f884 	uxth.w	r8, r4
   d77be:	fb0e 1119 	mls	r1, lr, r9, r1
   d77c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d77c6:	fb09 fa08 	mul.w	sl, r9, r8
   d77ca:	458a      	cmp	sl, r1
   d77cc:	fa02 f206 	lsl.w	r2, r2, r6
   d77d0:	fa00 f306 	lsl.w	r3, r0, r6
   d77d4:	d908      	bls.n	d77e8 <__udivmoddi4+0x220>
   d77d6:	1861      	adds	r1, r4, r1
   d77d8:	f109 30ff 	add.w	r0, r9, #4294967295
   d77dc:	d248      	bcs.n	d7870 <__udivmoddi4+0x2a8>
   d77de:	458a      	cmp	sl, r1
   d77e0:	d946      	bls.n	d7870 <__udivmoddi4+0x2a8>
   d77e2:	f1a9 0902 	sub.w	r9, r9, #2
   d77e6:	4421      	add	r1, r4
   d77e8:	eba1 010a 	sub.w	r1, r1, sl
   d77ec:	b2bf      	uxth	r7, r7
   d77ee:	fbb1 f0fe 	udiv	r0, r1, lr
   d77f2:	fb0e 1110 	mls	r1, lr, r0, r1
   d77f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d77fa:	fb00 f808 	mul.w	r8, r0, r8
   d77fe:	45b8      	cmp	r8, r7
   d7800:	d907      	bls.n	d7812 <__udivmoddi4+0x24a>
   d7802:	19e7      	adds	r7, r4, r7
   d7804:	f100 31ff 	add.w	r1, r0, #4294967295
   d7808:	d22e      	bcs.n	d7868 <__udivmoddi4+0x2a0>
   d780a:	45b8      	cmp	r8, r7
   d780c:	d92c      	bls.n	d7868 <__udivmoddi4+0x2a0>
   d780e:	3802      	subs	r0, #2
   d7810:	4427      	add	r7, r4
   d7812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7816:	eba7 0708 	sub.w	r7, r7, r8
   d781a:	fba0 8902 	umull	r8, r9, r0, r2
   d781e:	454f      	cmp	r7, r9
   d7820:	46c6      	mov	lr, r8
   d7822:	4649      	mov	r1, r9
   d7824:	d31a      	bcc.n	d785c <__udivmoddi4+0x294>
   d7826:	d017      	beq.n	d7858 <__udivmoddi4+0x290>
   d7828:	b15d      	cbz	r5, d7842 <__udivmoddi4+0x27a>
   d782a:	ebb3 020e 	subs.w	r2, r3, lr
   d782e:	eb67 0701 	sbc.w	r7, r7, r1
   d7832:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7836:	40f2      	lsrs	r2, r6
   d7838:	ea4c 0202 	orr.w	r2, ip, r2
   d783c:	40f7      	lsrs	r7, r6
   d783e:	e9c5 2700 	strd	r2, r7, [r5]
   d7842:	2600      	movs	r6, #0
   d7844:	4631      	mov	r1, r6
   d7846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d784a:	462e      	mov	r6, r5
   d784c:	4628      	mov	r0, r5
   d784e:	e70b      	b.n	d7668 <__udivmoddi4+0xa0>
   d7850:	4606      	mov	r6, r0
   d7852:	e6e9      	b.n	d7628 <__udivmoddi4+0x60>
   d7854:	4618      	mov	r0, r3
   d7856:	e6fd      	b.n	d7654 <__udivmoddi4+0x8c>
   d7858:	4543      	cmp	r3, r8
   d785a:	d2e5      	bcs.n	d7828 <__udivmoddi4+0x260>
   d785c:	ebb8 0e02 	subs.w	lr, r8, r2
   d7860:	eb69 0104 	sbc.w	r1, r9, r4
   d7864:	3801      	subs	r0, #1
   d7866:	e7df      	b.n	d7828 <__udivmoddi4+0x260>
   d7868:	4608      	mov	r0, r1
   d786a:	e7d2      	b.n	d7812 <__udivmoddi4+0x24a>
   d786c:	4660      	mov	r0, ip
   d786e:	e78d      	b.n	d778c <__udivmoddi4+0x1c4>
   d7870:	4681      	mov	r9, r0
   d7872:	e7b9      	b.n	d77e8 <__udivmoddi4+0x220>
   d7874:	4666      	mov	r6, ip
   d7876:	e775      	b.n	d7764 <__udivmoddi4+0x19c>
   d7878:	4630      	mov	r0, r6
   d787a:	e74a      	b.n	d7712 <__udivmoddi4+0x14a>
   d787c:	f1ac 0c02 	sub.w	ip, ip, #2
   d7880:	4439      	add	r1, r7
   d7882:	e713      	b.n	d76ac <__udivmoddi4+0xe4>
   d7884:	3802      	subs	r0, #2
   d7886:	443c      	add	r4, r7
   d7888:	e724      	b.n	d76d4 <__udivmoddi4+0x10c>
   d788a:	bf00      	nop

000d788c <__aeabi_idiv0>:
   d788c:	4770      	bx	lr
   d788e:	bf00      	nop

000d7890 <__cxa_atexit>:
   d7890:	b510      	push	{r4, lr}
   d7892:	4c05      	ldr	r4, [pc, #20]	; (d78a8 <__cxa_atexit+0x18>)
   d7894:	4613      	mov	r3, r2
   d7896:	b12c      	cbz	r4, d78a4 <__cxa_atexit+0x14>
   d7898:	460a      	mov	r2, r1
   d789a:	4601      	mov	r1, r0
   d789c:	2002      	movs	r0, #2
   d789e:	f3af 8000 	nop.w
   d78a2:	bd10      	pop	{r4, pc}
   d78a4:	4620      	mov	r0, r4
   d78a6:	e7fc      	b.n	d78a2 <__cxa_atexit+0x12>
   d78a8:	00000000 	.word	0x00000000

000d78ac <memcpy>:
   d78ac:	440a      	add	r2, r1
   d78ae:	4291      	cmp	r1, r2
   d78b0:	f100 33ff 	add.w	r3, r0, #4294967295
   d78b4:	d100      	bne.n	d78b8 <memcpy+0xc>
   d78b6:	4770      	bx	lr
   d78b8:	b510      	push	{r4, lr}
   d78ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d78be:	f803 4f01 	strb.w	r4, [r3, #1]!
   d78c2:	4291      	cmp	r1, r2
   d78c4:	d1f9      	bne.n	d78ba <memcpy+0xe>
   d78c6:	bd10      	pop	{r4, pc}

000d78c8 <memset>:
   d78c8:	4402      	add	r2, r0
   d78ca:	4603      	mov	r3, r0
   d78cc:	4293      	cmp	r3, r2
   d78ce:	d100      	bne.n	d78d2 <memset+0xa>
   d78d0:	4770      	bx	lr
   d78d2:	f803 1b01 	strb.w	r1, [r3], #1
   d78d6:	e7f9      	b.n	d78cc <memset+0x4>

000d78d8 <srand>:
   d78d8:	b538      	push	{r3, r4, r5, lr}
   d78da:	4b0d      	ldr	r3, [pc, #52]	; (d7910 <srand+0x38>)
   d78dc:	681d      	ldr	r5, [r3, #0]
   d78de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d78e0:	4604      	mov	r4, r0
   d78e2:	b97b      	cbnz	r3, d7904 <srand+0x2c>
   d78e4:	2018      	movs	r0, #24
   d78e6:	f7fd fef1 	bl	d56cc <malloc>
   d78ea:	4a0a      	ldr	r2, [pc, #40]	; (d7914 <srand+0x3c>)
   d78ec:	4b0a      	ldr	r3, [pc, #40]	; (d7918 <srand+0x40>)
   d78ee:	63a8      	str	r0, [r5, #56]	; 0x38
   d78f0:	e9c0 2300 	strd	r2, r3, [r0]
   d78f4:	4b09      	ldr	r3, [pc, #36]	; (d791c <srand+0x44>)
   d78f6:	6083      	str	r3, [r0, #8]
   d78f8:	230b      	movs	r3, #11
   d78fa:	8183      	strh	r3, [r0, #12]
   d78fc:	2201      	movs	r2, #1
   d78fe:	2300      	movs	r3, #0
   d7900:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7904:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7906:	2200      	movs	r2, #0
   d7908:	611c      	str	r4, [r3, #16]
   d790a:	615a      	str	r2, [r3, #20]
   d790c:	bd38      	pop	{r3, r4, r5, pc}
   d790e:	bf00      	nop
   d7910:	2003e560 	.word	0x2003e560
   d7914:	abcd330e 	.word	0xabcd330e
   d7918:	e66d1234 	.word	0xe66d1234
   d791c:	0005deec 	.word	0x0005deec

000d7920 <strdup>:
   d7920:	4b02      	ldr	r3, [pc, #8]	; (d792c <strdup+0xc>)
   d7922:	4601      	mov	r1, r0
   d7924:	6818      	ldr	r0, [r3, #0]
   d7926:	f000 b803 	b.w	d7930 <_strdup_r>
   d792a:	bf00      	nop
   d792c:	2003e560 	.word	0x2003e560

000d7930 <_strdup_r>:
   d7930:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7932:	4604      	mov	r4, r0
   d7934:	4608      	mov	r0, r1
   d7936:	460d      	mov	r5, r1
   d7938:	f000 f80f 	bl	d795a <strlen>
   d793c:	1c42      	adds	r2, r0, #1
   d793e:	4611      	mov	r1, r2
   d7940:	4620      	mov	r0, r4
   d7942:	9201      	str	r2, [sp, #4]
   d7944:	f7fd fee2 	bl	d570c <_malloc_r>
   d7948:	4604      	mov	r4, r0
   d794a:	b118      	cbz	r0, d7954 <_strdup_r+0x24>
   d794c:	9a01      	ldr	r2, [sp, #4]
   d794e:	4629      	mov	r1, r5
   d7950:	f7ff ffac 	bl	d78ac <memcpy>
   d7954:	4620      	mov	r0, r4
   d7956:	b003      	add	sp, #12
   d7958:	bd30      	pop	{r4, r5, pc}

000d795a <strlen>:
   d795a:	4603      	mov	r3, r0
   d795c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7960:	2a00      	cmp	r2, #0
   d7962:	d1fb      	bne.n	d795c <strlen+0x2>
   d7964:	1a18      	subs	r0, r3, r0
   d7966:	3801      	subs	r0, #1
   d7968:	4770      	bx	lr

000d796a <link_code_end>:
	...

000d796c <dynalib_user>:
   d796c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d797c:	0000 0000 6554 706d 7265 6174 7574 6172     ....Tempertatura
   d798c:	4d20 746f 726f 5600 6c65 636f 6469 6461      Motor.Velocidad
   d799c:	4d20 746f 726f 5400 6172 736e 6f70 7472      Motor.Transport
   d79ac:	2065 7355 6461 006f 3a58 0020 4720 203b     e Usado.X: . G; 
   d79bc:	0020 3a59 0020 3a5a 0020 4720 2020 5000      .Y: .Z: . G  .P
   d79cc:	7469 6863 203a 2000 b0c2 732f 203b 0020     itch: . ../s;  .
   d79dc:	6159 3a77 0020 6f52 6c6c 203a 2000 b0c2     Yaw: .Roll: . ..
   d79ec:	732f 2020 4300 726f 6972 6e65 6574 6420     /s  .Corriente d
   d79fc:	2065 6f6d 6f74 3a72 2020 2000 416d 5000     e motor:  . mA.P
   d7a0c:	746f 6e65 6963 2061 6564 6d20 746f 726f     otencia de motor
   d7a1c:	203a 2020 2000 6157 7474 0073 6f4e 7320     :   . Watts.No s
   d7a2c:	2065 7570 6f64 6c20 6565 2072 6164 6f74     e pudo leer dato
   d7a3c:	2173 4800 6d75 6469 203a 2500 2d20 0020     s!.Humid: .% - .
   d7a4c:	6554 706d 203a 2a00 2043 2000 6556 6f6c     Temp: .*C . Velo
   d7a5c:	6963 6164 2064 6564 206c 6f4d 6f74 2072     cidad del Motor 
   d7a6c:	202d 5750 3a4d 0020 0025 4220 544f 4e4f     - PWM: .%. BOTON
   d7a7c:	4520 454d 4752 4e45 4943 2041 6328 6e6f      EMERGENCIA (con
   d7a8c:	5f74 6f68 676e 296f 203a 5400 4d45 5f50     t_hongo): .TEMP_
   d7a9c:	4f4e 4d52 4c41 5400 4d45 5f50 454d 4944     NORMAL.TEMP_MEDI
   d7aac:	004f 4554 504d 415f 544c 004f 6574 706d     O.TEMP_ALTO.temp
   d7abc:	305f 3130 4300 726f 0072 6361 5f63 7867     _001.Corr.acc_gx
   d7acc:	305f 3130 2000 2d2d 2d2d 2d2d 2d2d 2d2d     _001. ----------
   d7adc:	2d2d 2d2d 5320 2065 7570 6c62 6369 206f     ---- Se publico 
   d7aec:	6164 6f74 6520 206e 616c 6e20 6275 2065     dato en la nube 
   d7afc:	6328 6e6f 6174 6f64 5f72 756e 6562 203a     (contador_nube: 
   d7b0c:	2029 2000 4f42 4f54 204e 4d45 5245 4547     ) . BOTON EMERGE
   d7b1c:	434e 4149 203a 5000 5241 4441 5f41 4d45     NCIA: .PARADA_EM
   d7b2c:	5245 4547 434e 4149 0000 0000               ERGENCIA....

000d7b38 <_ZTVN5spark13EthernetClassE>:
	...
   d7b40:	578b 000d 5781 000d 5777 000d 576d 000d     .W...W..wW..mW..
   d7b50:	5761 000d 5755 000d 6915 000d 691d 000d     aW..UW...i...i..
   d7b60:	5749 000d 5741 000d 5737 000d 572d 000d     IW..AW..7W..-W..
   d7b70:	694d 000d 616e 006e 6e69 0066 766f 0066     Mi..nan.inf.ovf.
   d7b80:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   d7b90:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d7ba0:	0065 0000                                   e...

000d7ba4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7bac:	5eb5 000d 5ebb 000d 5ef9 000d 5ec9 000d     .^...^...^...^..
   d7bbc:	5eb7 000d                                   .^..

000d7bc0 <_ZTV9IPAddress>:
	...
   d7bc8:	63fd 000d 63ed 000d 63ef 000d               .c...c...c..

000d7bd4 <_ZTV9USBSerial>:
	...
   d7bdc:	64dd 000d 6545 000d 651b 000d 5ab9 000d     .d..Ee...e...Z..
   d7bec:	650d 000d 64df 000d 64ef 000d 653f 000d     .e...d...d..?e..
   d7bfc:	64ff 000d 64d9 000d                         .d...d..

000d7c04 <_ZTV11USARTSerial>:
	...
   d7c0c:	6649 000d 66b5 000d 668d 000d 5ab9 000d     If...f...f...Z..
   d7c1c:	665d 000d 6679 000d 666b 000d 6687 000d     ]f..yf..kf...f..
   d7c2c:	664b 000d 664f 000d                         Kf..Of..

000d7c34 <_ZTV7TwoWire>:
	...
   d7c3c:	676d 000d 67b7 000d 678f 000d 676f 000d     mg...g...g..og..
   d7c4c:	6797 000d 679f 000d 67a7 000d 67af 000d     .g...g...g...g..

000d7c5c <_ZTVN5spark9WiFiClassE>:
	...
   d7c64:	68b5 000d 68ab 000d 68a1 000d 6863 000d     .h...h...h..ch..
   d7c74:	5d2f 000d 6895 000d 6915 000d 691d 000d     /]...h...i...i..
   d7c84:	6889 000d 6881 000d 6877 000d 686d 000d     .h...h..wh..mh..
   d7c94:	694d 000d                                   Mi..

000d7c98 <_ZTVN5spark12NetworkClassE>:
	...
   d7ca0:	68d5 000d 68df 000d 68e9 000d 68f3 000d     .h...h...h...h..
   d7cb0:	68fd 000d 6909 000d 6915 000d 691d 000d     .h...i...i...i..
   d7cc0:	6925 000d 6931 000d 6939 000d 6943 000d     %i..1i..9i..Ci..
   d7cd0:	694d 000d                                   Mi..

000d7cd4 <_ZSt7nothrow>:
	...

000d7cd5 <link_const_variable_data_end>:
   d7cd5:	00          	.byte	0x00
	...

000d7cd8 <link_constructors_location>:
   d7cd8:	000d499d 	.word	0x000d499d
   d7cdc:	000d5795 	.word	0x000d5795
   d7ce0:	000d57dd 	.word	0x000d57dd
   d7ce4:	000d5a91 	.word	0x000d5a91
   d7ce8:	000d5d3d 	.word	0x000d5d3d
   d7cec:	000d5d4d 	.word	0x000d5d4d
   d7cf0:	000d5d75 	.word	0x000d5d75
   d7cf4:	000d68c1 	.word	0x000d68c1
   d7cf8:	000d6a2d 	.word	0x000d6a2d

000d7cfc <link_constructors_end>:
   d7cfc:	00000000 	.word	0x00000000
